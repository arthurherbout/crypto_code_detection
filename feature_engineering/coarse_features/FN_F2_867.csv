,data_source,file_name,is_header,content,true_label,pred_label
136,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/pkcs1-sec-decrypt.c,False,"/* pkcs1-sec-decrypt.c

   The RSA publickey algorithm. Side channel resistant PKCS#1 decryption.

   Copyright (C) 2001, 2012 Niels MÃ¶ller
   Copyright (C) 2018 Red Hat, Inc.

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#if HAVE_CONFIG_H
# include ""config.h""
#endif

#include <assert.h>

#include <string.h>

#include ""memops.h""

#include ""gmp-glue.h""
#include ""pkcs1-internal.h""

/* Inputs are always cast to uint32_t values. But all values used in this
 * function should never exceed the maximum value of a uint32_t anyway.
 * these macros returns 1 on success, 0 on failure */
#define NOT_EQUAL(a, b) \
    ((0U - ((uint32_t)(a) ^ (uint32_t)(b))) >> 31)
#define EQUAL(a, b) \
    ((((uint32_t)(a) ^ (uint32_t)(b)) - 1U) >> 31)
#define GREATER_OR_EQUAL(a, b) \
    (1U - (((uint32_t)(a) - (uint32_t)(b)) >> 31))

int
_pkcs1_sec_decrypt (size_t length, uint8_t *message,
                    size_t padded_message_length,
                    const volatile uint8_t *padded_message)
{
  volatile int ok;
  size_t i, t;

  assert (padded_message_length >= length);

  t = padded_message_length - length - 1;

  /* Check format, padding, message_size */
  ok = EQUAL(padded_message[0], 0);       /* ok if padded_message[0] == 0 */
  ok &= EQUAL(padded_message[1], 2);      /* ok if padded_message[1] == 2 */
  for (i = 2; i < t; i++)      /* check padding has no zeros */
    {
      ok &= NOT_EQUAL(padded_message[i], 0);
    }
  ok &= EQUAL(padded_message[t], 0);      /* ok if terminator == 0 */

  /* fill destination buffer regardless of outcome */
  cnd_memcpy(ok, message, padded_message + t + 1, length);

  return ok;
}

int
_pkcs1_sec_decrypt_variable(size_t *length, uint8_t *message,
                            size_t padded_message_length,
                            const volatile uint8_t *padded_message)
{
  volatile int not_found = 1;
  volatile int ok;
  volatile size_t offset;
  size_t buflen, msglen;
  size_t shift, i;

  /* Check format, padding, message_size */
  ok = EQUAL(padded_message[0], 0);
  ok &= EQUAL(padded_message[1], 2);

  /* length is discovered in a side-channel silent way.
   * not_found goes to 0 when the terminator is found.
   * offset strts at 3 as it includes the terminator and
   * the fomat bytes already */
  offset = 3;
  for (i = 2; i < padded_message_length; i++)
    {
      not_found &= NOT_EQUAL(padded_message[i], 0);
      offset += not_found;
    }
  /* check if we ran out of buffer */
  ok &= NOT_EQUAL(not_found, 1);
  /* padding must be >= 11 (2 format bytes + 8 pad bytes min. + terminator) */
  ok &= GREATER_OR_EQUAL(offset, 11);

  /* offset can vary between 3 and padded_message_length, due to the loop
   * above, therefore msglen can't underflow */
  msglen = padded_message_length - offset;

  /* we always fill the whole buffer but only up to
   * padded_message_length length */
  buflen = *length;
  if (buflen > padded_message_length) { /* input independent branch */
    buflen = padded_message_length;
  }

  /* if the message length is larger than the buffer we must fail */
  ok &= GREATER_OR_EQUAL(buflen, msglen);

  /* fill destination buffer fully regardless of outcome. Copies the message
   * in a memory access independent way. The destination message buffer will
   * be clobbered past the message length. */
  shift = padded_message_length - buflen;
  cnd_memcpy(ok, message, padded_message + shift, buflen);
  offset -= shift;
  /* In this loop, the bits of the 'offset' variable are used as shifting
   * conditions, starting from the least significant bit. The end result is
   * that the buffer is shifted left exactly 'offset' bytes. */
  for (shift = 1; shift < buflen; shift <<= 1, offset >>= 1)
    {
      /* 'ok' is both a least significant bit mask and a condition */
      cnd_memcpy(offset & ok, message, message + shift, buflen - shift);
    }

  /* update length only if we succeeded, otherwise leave unchanged */
  *length = (msglen & (-(size_t) ok)) + (*length & ((size_t) ok - 1));

  return ok;
}
",1,0
140,crypto-competitions,cubehash.h,True,"#ifndef CUBEHASH_H
#define CUBEHASH_H

#include <string.h>
#include <stdint.h>

#define CHASHSTATESIZE 128
#define ROTATEUPWARDSN(x, n) (((x) << (n)) | ((x) >> (32 - (n))))
#define WSWAP(a, b, t) {t = a; a = b; b = t;}


/* Cubehash Context */
struct cubehash_ctx {
  uint32_t state[2][2][2][2][2];
  int i, r, b, f, h;
};


void chash_init(struct cubehash_ctx *, int, int, int, int, int);
void chash_round(struct cubehash_ctx *);
void chash_update(struct cubehash_ctx *, uint8_t (*)[CHASHSTATESIZE]);
void chash_final(struct cubehash_ctx *, uint8_t (*)[CHASHSTATESIZE]);
void chash_message(int, int, int, int, int, uint8_t *, size_t,
		   uint8_t (*)[CHASHSTATESIZE]);

#endif
",1,0
151,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/libsodium/crypto_scalarmult/curve25519/sandy2x/ladder_base.h,True,"#ifndef ladder_base_H
#define ladder_base_H

#ifdef __cplusplus
extern ""C"" {
#endif

#include ""fe.h""
#include ""ladder_base_namespace.h""

extern void ladder_base(fe *, const unsigned char *);

#ifdef __cplusplus
}
#endif

#endif /* ifndef ladder_base_H */

",1,0
154,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/libsodium/crypto_core/ed25519/ref10/fe_25_5/base.h,True,"{ /* 0/31 */
  {
    { 25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605 },
    { -12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378 },
    { -8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546 }
  },
  {
    { -12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903, -3814571, -358445, -10211303 },
    { -21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268, -26829678, -5319081 },
    { 26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118, -15472047, -4166697 }
  },
  {
    { 15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024 },
    { 16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574 },
    { 30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357 }
  },
  {
    { -17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023, 3284568, -6276540 },
    { 23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445, 13059162, 10374397 },
    { 7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045, -641708, -101325 }
  },
  {
    { 10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380 },
    { 4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306 },
    { 19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942 }
  },
  {
    { -15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819, -9818940, -12085777 },
    { -8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887, 1762328, 14866737 },
    { -18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421, 27914454, 4383652 }
  },
  {
    { 5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766 },
    { -30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701 },
    { 28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300 }
  },
  {
    { 14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454, -33154098, 2381726 },
    { -7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005, -32300832, 15351955 },
    { 27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515, 29551813, 10109425 }
  }
},
{ /* 1/31 */
  {
    { -13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556, 10092783, -4764171 },
    { 27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538, -17810127, 12803510 },
    { 17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194, 18016357, 4397660 }
  },
  {
    { -10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525, -17477504, 982639 },
    { 29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128, -21047696, 9934963 },
    { 5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895, -30123922, -10897950 }
  },
  {
    { -27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697, -13338309, 5500568 },
    { 12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343, 10874051, 13524335 },
    { 25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568, -22528059, 5376628 }
  },
  {
    { -26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443, 4535768, 1569007 },
    { -2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290, 31848280, 12543772 },
    { -22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731, 7718482, 14474653 }
  },
  {
    { 2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665, 24316168, -5253567 },
    { 13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532, -20729456, 8321686 },
    { 21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838, -9984458, 608372 }
  },
  {
    { -13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577, 27229399, 23887 },
    { -23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308, -1633405, 16678954 },
    { -29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045, -17169265, 4904953 }
  },
  {
    { 24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880, 2128236, -4326833 },
    { -16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033, -6882542, -2986532 },
    { -22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829, 15736322, 4143876 }
  },
  {
    { 2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663, 23527084, -16458268 },
    { 33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881, -15188911, -14416214 },
    { 1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868, -4774191, -16323038 }
  }
},
{ /* 2/31 */
  {
    { 6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732, 7390890, 2759800 },
    { 4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057, 1244380, -12919645 },
    { -4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236, 15886429, 16489664 }
  },
  {
    { 1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369, -30606455, -712933 },
    { -25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947, -30836462, 5113182 },
    { -17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386, 13847711, 5387222 }
  },
  {
    { -18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786, -19600662, 10370991 },
    { 20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092, 32232924, 16763880 },
    { 9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506, 3140038, -16510092 }
  },
  {
    { -16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613, -28774454, 366295 },
    { 19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113, 719605, 11671788 },
    { 8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516, 27000813, -10195553 }
  },
  {
    { -15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097, 6750977, -14521026 },
    { 11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122, 8169720, 16220347 },
    { -18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664, -5990708, -14166033 }
  },
  {
    { -23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284, 2655861, 1738395 },
    { -27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336, -19087449, -11005278 },
    { 1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408, 10478196, 8544890 }
  },
  {
    { 32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473, 17789017, -3395995 },
    { -30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233, 30460520, 1052596 },
    { -11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359, 3179268, -9478891 }
  },
  {
    { 31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777, -16411740, 19072640, -9511060 },
    { 11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017, 473099, 5040608 },
    { -20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092, -19558642, -3131606 }
  }
},
{ /* 3/31 */
  {
    { 7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149, -27868496, 11538389 },
    { -19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702, -5676054, 5797016 },
    { -11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574, -2369172, -5877341 }
  },
  {
    { -22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199, 15123619, 10811505 },
    { 14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356, -28886779, -11974553 },
    { -28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855, 4714547, -9600655 }
  },
  {
    { 15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832, -11745876, 12340220 },
    { 12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152, 15370987, 9608631 },
    { -4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074, -28210621, -8814099 }
  },
  {
    { 26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697, 20571223, 8420556 },
    { 14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406, -21574435, -12476749 },
    { 236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136, 15069930 }
  },
  {
    { 1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229, -30663140, -2331391 },
    { 5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378, -33069337, 9234253 },
    { 20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587, 18979186, 13396066 }
  },
  {
    { 24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782, 33514650, 7021958 },
    { -11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677, -21480480, 12868082 },
    { -28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500, -12455797, -8089383 }
  },
  {
    { -30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937, -15233648, 5540521 },
    { -11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984, -16128528, -14962807 },
    { 23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185, -11513277, -15205948 }
  },
  {
    { 9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127, -19179614, 5867134 },
    { -32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263, -29749703, -16108455 },
    { 27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073, -19526700, 7734629 }
  }
},
{ /* 4/31 */
  {
    { -8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626, 18549497, 15302069 },
    { -32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461, -8872242, 8424746 },
    { 24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917, -11284482, -828919 }
  },
  {
    { 11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461, -5066034, 16498837 },
    { 8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238, 6536641, 10543906 },
    { -28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574, -27235709, 8876771 }
  },
  {
    { -25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474, -604426, -9039817 },
    { 10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394, 3084098 },
    { 10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151, -30233575, 15272409 }
  },
  {
    { -12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138, -25014757, 1950504 },
    { -26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532, 15341279, 8373727 },
    { 28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602, -2878207, 15190420 }
  },
  {
    { -32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393, -26033313, -6875003 },
    { -1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594, -16247779, -12154742, 6048605 },
    { -30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323, 11213262, 9168384 }
  },
  {
    { -26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150, 20470157, -16398701 },
    { -23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608, 14042978, 5230683 },
    { 29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042, -5933891, -12449708 }
  },
  {
    { -3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513, -28539189, 15326563 },
    { -19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988, -20514118, 9168260 },
    { -5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605, 33087103, -9011387 }
  },
  {
    { -19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329, -15000531, -5996870, 15664672 },
    { 23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356, 18151676, 13417686 },
    { -24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441, 15271676, -15452665 }
  }
},
{ /* 5/31 */
  {
    { 11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544, -6921301, -13440182 },
    { -31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997, 12215110, 12028277 },
    { 14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780, -16900089, -655628 }
  },
  {
    { -4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009, 23973261, -12684474 },
    { -26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951, 32013174, -10103539 },
    { -25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752, 4425632, -837822 }
  },
  {
    { -10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462, 4725005, 14044970 },
    { 19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784, -19522291, -16109756 },
    { -24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106, 9282262, 10282508 }
  },
  {
    { -26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215, 5542595, -10702683 },
    { -10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761, -18093885, 10114655 },
    { -20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146, 25953725, -106158 }
  },
  {
    { -4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296, -3315279, 12831125 },
    { -15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196, 7381791, -2421839 },
    { -20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724, -15362489, 12339664 }
  },
  {
    { 27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922, 25091167, 14856294 },
    { -18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493, -22182473, -9012899 },
    { -11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390, 30146206, 9142070 }
  },
  {
    { 3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384, -8237858, 4171294 },
    { -15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949, 345228, -5462949 },
    { -21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231, -16253183, -13582083 }
  },
  {
    { 31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657, 28012650, -16405420 },
    { -5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057, -8867157, 3507940 },
    { 29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267, -9164929, 6580396 }
  }
},
{ /* 6/31 */
  {
    { -12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846, -2095802, 9304567 },
    { 20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617, 5289421, -477127 },
    { -16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094, 26939669, -3752294 }
  },
  {
    { -12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559, -3698806, 117887 },
    { 22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056, -23319780, 541964 },
    { 16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829, -13337066, -13552195 }
  },
  {
    { 9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351, 690426, 14876244 },
    { 24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348, -22380984, 6618999 },
    { -1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328, 32239829, -5652762 }
  },
  {
    { -18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059, 32779359, 5095274 },
    { -33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724, 21639561, -2630236 },
    { -16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535, 17874574, 558605 }
  },
  {
    { -13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151, 2085892, 5119761 },
    { -22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614, -31999993, -5759884 },
    { -6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145, -22351378, 12961482 }
  },
  {
    { -24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996, -30194652, -5159638 },
    { -11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275, 7589640, 8945490 },
    { -32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180, 24099109, -14456170 }
  },
  {
    { 5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025, -6231896, -10280736 },
    { 10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898, -3363451, -6441124 },
    { -17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168, -13866408, 7421392 }
  },
  {
    { 8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252, 28826358, -4123029 },
    { 6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124, 13746021, -1742048 },
    { 28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524, 4771362, -8419958 }
  }
},
{ /* 7/31 */
  {
    { 24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695, 3569627, 11342593 },
    { 26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608, 7325975, -14801071 },
    { -11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390, -17646694, -8186692 }
  },
  {
    { 11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664, 9280358, -3973687 },
    { -160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901, -11181622, -15545091, 4387441 },
    { -20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137, 20617071, -7482001 }
  },
  {
    { -938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822, 24345683, 10325460 },
    { -19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689, 4766743, 3552007 },
    { -21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909, 10988822, -3994762 }
  },
  {
    { 15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343, -8295852, 13296005 },
    { -9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054, -30000824, 12074674 },
    { 4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716, 29832613, -16391035 }
  },
  {
    { 7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297, -27122660, 13101590 },
    { -2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593, -30356070, -4190957 },
    { -30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896, 19568978, 9628812 }
  },
  {
    { 33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839, -6291786, 3437740 },
    { -18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104, 7463304, 4176122 },
    { -27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751, 24216882, 5944158 }
  },
  {
    { 8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796, 11632993, 5847885 },
    { 26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194, -9727230, 4782140 },
    { 19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911, 6358847, -1873857 }
  },
  {
    { 801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480, -13538503, 1387155 },
    { 19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355, -21866831, 11835260 },
    { 19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869, -26560550, 5052483 }
  }
},
{ /* 8/31 */
  {
    { -3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185, 12228557, -7003677 },
    { 32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564, -6114803, 8653815 },
    { 22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875, 28483275, 2841751 }
  },
  {
    { -16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658, 19932058, -12739203 },
    { -11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134, -4777469, -13910208 },
    { 1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705, -14013818, 3093230 }
  },
  {
    { 16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225, -24049421, -6691850 },
    { -21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618, -21652117, -16739389 },
    { -9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798, 17361620, 11864968 }
  },
  {
    { -11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601, -25578460, -16240689 },
    { 14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524, 9145645, -6443880 },
    { 5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128, -5652273, -3050304 }
  },
  {
    { 30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496, -27999779, 1803632 },
    { -3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514, -21405489, 7047412 },
    { 20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601, -32343828, -10257566 }
  },
  {
    { -20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640, -21679658, 2288038 },
    { -26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692, -24819617, 12570232 },
    { -1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680, -11974704, 4724943 }
  },
  {
    { 17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932, -29576300, 1903856 },
    { 23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296, 26955097, 14109738 },
    { 15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562, 31960942, 11934971 }
  },
  {
    { -27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028, 10491392, 1379718 },
    { -13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658, 21432314, 12180697 },
    { -11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540, -10301319, -13872883 }
  }
},
{ /* 9/31 */
  {
    { 5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231, 26128231, 6032912 },
    { -26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894, -25875034, -10437358 },
    { 3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164, 12376617, 3188849 }
  },
  {
    { 29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113, -16109234, -9852307 },
    { -14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669, 18640741, -960977 },
    { -6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430, 10530747, 1053335 }
  },
  {
    { -29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369, -2948985, 24018831, 15026644 },
    { -22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497, -2314791, -15145616 },
    { -27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899, -23166419, -2531735 }
  },
  {
    { -21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922, -5070217, 726099 },
    { 29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461, 30007388, -15823341 },
    { -936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848, 4555336 }
  },
  {
    { -23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696, -11985298, 12422646 },
    { 31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706, 29120153, 13924425 },
    { -17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700, 7240931, -237388 }
  },
  {
    { -31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483, 3293637, -15551743 },
    { -16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547, 12796905, -6335822 },
    { -8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836, 3222231, -11160462 }
  },
  {
    { 18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234, -7550776, 2484985 },
    { 9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812, -19802075, -3034702 },
    { -22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966, -30097688, -10618797 }
  },
  {
    { 21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497, -7360503, -4109293 },
    { 27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276, -23659143, -8132100 },
    { 19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329, 13243957, 8709688 }
  }
},
{ /* 10/31 */
  {
    { 12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734, 5150968, 7274186 },
    { 2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058, 31021603, -9793610 },
    { -2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465, 15067285, -14147707 }
  },
  {
    { 7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586, -19379462, -12403220 },
    { 915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997, -7220461, 16527025 },
    { 32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992, 23834301, 6588044 }
  },
  {
    { 32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107, -20314580, -1305992 },
    { -4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281, 1976123, -7249027 },
    { 21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252, 12331345, -8237197 }
  },
  {
    { 8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970, 10008136, -4667901 },
    { 31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089, 8684155, -10532952 },
    { 19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921, 31316348, 14219878 }
  },
  {
    { -28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409, 29126555, 9207390 },
    { 32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782, -7957600, -14435730 },
    { 2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130, 28346258, 1994730 }
  },
  {
    { -19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894, 22628102, 8115180 },
    { -30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160, -9943017, 930272 },
    { -15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970, -22765376, -10650715 }
  },
  {
    { -22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018, -16554220, -1867018, 8398970 },
    { -31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273, 18009408, -15772772 },
    { -17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419, 19288549, 1325865 }
  },
  {
    { 15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146, 33166107, -8042750 },
    { 20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715, 2213263, -13878373 },
    { 32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134, -5766928, 8371348 }
  }
},
{ /* 11/31 */
  {
    { 9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132, -26442943, 10486144 },
    { -22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596, -23921530, -11455195 },
    { 5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541, 19985175, -3436086 }
  },
  {
    { -13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297, 65030, 8370684 },
    { -8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164, 12743482, -9800518 },
    { -2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569, 18800704, 255233 }
  },
  {
    { -5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957, 19258688, -14753793 },
    { -2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390, -1524053, 2055794 },
    { 580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389, -30021019, 7394435 }
  },
  {
    { 23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205, -4821741, 14799921 },
    { 13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856, -9056018, 7402518 },
    { 2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352, 8205061, 1607563 }
  },
  {
    { 14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958, 30019587, -9029278 },
    { -27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093, 9944378, 8024 },
    { 4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085, -8142388, 5640030 }
  },
  {
    { 10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564, 15219798, -14327783 },
    { 27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195, -18342183, 9742717 },
    { 6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155, 1994844 }
  },
  {
    { 14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803, 24319929, -6446333 },
    { 16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049, -30102368, -4739048 },
    { 22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366, 21880021, -12250760 }
  },
  {
    { -4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729, 8840445, 4957760 },
    { -15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072, -14796503, 5005757 },
    { -2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326, -16395286, -2176112 }
  }
},
{ /* 12/31 */
  {
    { -19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104, 22208662, 2000468 },
    { 3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527, -3691214, -7414184 },
    { 10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332, -3132688, 16400289 }
  },
  {
    { 15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580, 26894937, 9132066 },
    { 24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452, -6817084, -2692882 },
    { 13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511, -4688006, 2364226 }
  },
  {
    { 16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457, 15445875, -7798101 },
    { 29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540, -278050, -15759279 },
    { -6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290, -29828287, -10815811 }
  },
  {
    { 27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179, 17293797, 960709 },
    { 20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122, -19384511, 7639714 },
    { -2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750, 29994677, -15808121 }
  },
  {
    { 9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782, -31184575, 709464 },
    { 12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874, 16102007, 13205847 },
    { 13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972, 10151379, 10394400 }
  },
  {
    { 4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039, -33302334, 8934414 },
    { -15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094, -11536886, 11721158 },
    { 17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153, -9205489, -1280045 }
  },
  {
    { -461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429, 6108462, -6183415 },
    { -5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331, -26898490, -7867459 },
    { -31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095, 7592688, -14992079 }
  },
  {
    { 21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833, -28256052, 4298412 },
    { -20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194, 13717174, 10805743 },
    { -14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609, -26938930, -5863836 }
  }
},
{ /* 13/31 */
  {
    { 12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704, -4381056, 9882022 },
    { 18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879, -23967430, -3299429 },
    { -6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110, -2403099, 5276065 }
  },
  {
    { 30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982, 1449224, 13082861 },
    { 10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736, -21016438, -8202000 },
    { -33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814, -10300080, -11060101 }
  },
  {
    { 32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008, -22664288, 6904815 },
    { 29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096, -29003639, -6657642 },
    { 10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370, -25584551, 5181966 }
  },
  {
    { 25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922, -2322852, -12388574 },
    { -21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087, 20603771, -6561742 },
    { -18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390, 4662781, 7820689 }
  },
  {
    { 12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924, 16136752, 15264020 },
    { -10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822, 19012087, 3772772 },
    { 3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884, 20527771, 12988982 }
  },
  {
    { -14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943, 3299665, -12424953 },
    { -16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331, -25583147, 8991218 },
    { -17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950, -30242287, 1507265 }
  },
  {
    { 29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391, 14606362, -10647073 },
    { -3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487, 4170404, -2085325 },
    { -11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000, -14276837, -8400798 }
  },
  {
    { -4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092, 13240845, 10965870 },
    { -7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411, 29514390, 4302863 },
    { -13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373, 17846988, -13971927 }
  }
},
{ /* 14/31 */
  {
    { -2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789, -5222701, 12650267 },
    { -9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293, -19134326, 10958663 },
    { 22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455, -25083830, 4271862 }
  },
  {
    { -25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529, -32526221, 8469673 },
    { 15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372, 24154791, -9460943 },
    { 15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104, 24913809, 9815020 }
  },
  {
    { -4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769, 18735128, 9466238 },
    { 11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103, -22728655, 16199064 },
    { 14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699, 30801119, 2164795 }
  },
  {
    { 15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269, -13492807, 1268052 },
    { -10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221, -17055369, 3565904 },
    { 29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713, -27162222, -14030531 }
  },
  {
    { -13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423, 2244111, -14001979 },
    { -5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800, 13491506, 4641841 },
    { 10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242, 14476989, -12767431 }
  },
  {
    { 10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259, -27912810, 12651324 },
    { -31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035, 21721536, -3148940 },
    { 10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694, 13216206, 14842320 }
  },
  {
    { -15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824, -27434397, 9900184 },
    { 14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406, -7051866, -8040114 },
    { 30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635, 9524356, -7018878 }
  },
  {
    { 12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483, 15663516, 4035784 },
    { -2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334, -22258478, 4659091 },
    { -16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997, -2178256, -13455585 }
  }
},
{ /* 15/31 */
  {
    { -8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095, 23440562, -290208 },
    { 10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483, -16571960, -7442864 },
    { 17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594, -3646624, 3898661 }
  },
  {
    { 7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530, 21831162, 1245233 },
    { 26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035, -30402091, -16716212 },
    { -12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357, -22338025, 13987525 }
  },
  {
    { -24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639, -7469781, -2858068 },
    { 9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245, -14581012, 4091397 },
    { -8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163, 29077877, -14741988 }
  },
  {
    { 5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881, -20017847, 2357889 },
    { 32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908, 5727338, 189038 },
    { 14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115, -25888931, -14884697 }
  },
  {
    { 20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781, 13913677, -5137875 },
    { -25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180, 12878652, 8511905 },
    { -25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974, 5568676, -3127656 }
  },
  {
    { 11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373, -14395196, 8070818 },
    { 27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306, -11552749, -1028714 },
    { 10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853, -27493162, 15431203 }
  },
  {
    { 20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142, -15056790, -7935931 },
    { -30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766, -3356550, 9594024 },
    { -23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290, 13352335, -10977084 }
  },
  {
    { -1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482, -13215537, -319204 },
    { 20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870, -22750759, 14523817 },
    { 27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494, -30172742, -4805667 }
  }
},
{ /* 16/31 */
  {
    { 11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740, -27727044, 11358504 },
    { -12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336, -26123651, 4985768 },
    { -19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114, -19414307, -15621255 }
  },
  {
    { 6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005, -1691065, -9004790 },
    { 1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723, -16796596, -5031438 },
    { -22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978, -99853, -10237333 }
  },
  {
    { 17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976, -29260363, -5511971 },
    { 31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247, 4882242, -10626905 },
    { 29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828, -5190932, -4162409 }
  },
  {
    { 12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697, 330070, -3659409 },
    { 6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892, -271295, 12071499 },
    { -8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675, -5159697, 3829363 }
  },
  {
    { 28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787, 26333140, 14267664 },
    { -11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488, -21761224, 8930324 },
    { -21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911, -26491501, -16408940 }
  },
  {
    { 13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254, -15943699, 13814990 },
    { -17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833, -1956526, -1776914 },
    { -25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135, -18685978, 4578290 }
  },
  {
    { 24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919, 21964432, 8235257 },
    { -6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206, 13006806, 2355433 },
    { -16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366, 1141648, -12796236 }
  },
  {
    { -12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972, 32674895, 13715045 },
    { 11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212, -28740881, -15642093 },
    { -1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794, -27245943, 4383347 }
  }
},
{ /* 17/31 */
  {
    { -28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449, 27193557, 6245191 },
    { -15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492, 22510453, 8577507 },
    { -12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092, -29571492, -3635906 }
  },
  {
    { 3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320, 5611860, 8164018 },
    { -16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289, 5773085, -8422109 },
    { -23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320, 31632953, 190926 }
  },
  {
    { -24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564, -25341555, -3627528 },
    { 8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005, -1672488, 827625 },
    { -32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036, -24878478, 1541286 }
  },
  {
    { 2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481, 20456845, -1885033 },
    { 27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058, 29439641, 15138866 },
    { 21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163, 7779328, 109896 }
  },
  {
    { 30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118, 23177719, -554075 },
    { 26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492, 4439158, -13279347 },
    { -22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527, -17717757, -5461437 }
  },
  {
    { -5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225, 8550082, -15114165 },
    { -18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739, -23260460, -8428588 },
    { -32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482, -21902570, 1494193 }
  },
  {
    { -19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112, 8742704, 12967017 },
    { -28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896, -29903758, 15553883 },
    { 21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274, 19375923, -12647961 }
  },
  {
    { 8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716, 2862653, 9455043 },
    { 29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080, 15511449, 4789663 },
    { -20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893, 23513200, 16652362 }
  }
},
{ /* 18/31 */
  {
    { -33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300, -18319198, 10212860 },
    { 2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940, -9988298, -12506466 },
    { -24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440, -2499677, -16710063 }
  },
  {
    { -26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300, 2719757, 4940997 },
    { -1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463, 26699843, 5276295 },
    { -13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635, -15452774, 7159369 }
  },
  {
    { 9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176, 22477218, -8403385 },
    { 18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995, -22548173, 9334109 },
    { 2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545, -22587149, 536906 }
  },
  {
    { 4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625, 10838060, -15420424 },
    { -19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950, 6378260, 699185 },
    { 7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155, -5045064, -13373962 }
  },
  {
    { -7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840, -3918636, -9669325 },
    { 10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568, -21786507, 5427593 },
    { 696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720, 19236243, 12477404 }
  },
  {
    { -11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504, -23169516, 7733644 },
    { 17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171, 10322027, 15313801 },
    { 26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982, -24449242, 10890804 }
  },
  {
    { -31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931, 25180797, -5334884 },
    { -586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883, 316878, 13820577 },
    { -9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054, 30696930, -3712849 }
  },
  {
    { 32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397, -32349517, 7392473 },
    { -8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995, 25112947, -2926644 },
    { -2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194, 5537438, -13914319 }
  }
},
{ /* 19/31 */
  {
    { -11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667, 31234590, 6090599 },
    { -9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753, -6970405, -9034768 },
    { -27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646, 20650474, 1804084 }
  },
  {
    { -27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713, 27842616, -202328 },
    { -15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932, -11375082, 12714369 },
    { 20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546, -19733229, 12796920 }
  },
  {
    { 12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495, -12899438, 3480665, -15182815 },
    { -32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875, -33374054, 2771025 },
    { -21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226, -24552282, 15673397 }
  },
  {
    { -20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254, 3727144, -12934448 },
    { 6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683, 31123697, -10958981 },
    { 30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260, -16432438, 9648165 }
  },
  {
    { 32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604, -26008332, -11377501 },
    { 17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639, 2662509, -16297073 },
    { -1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777, 32247248, -14389861 }
  },
  {
    { 14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817, -16027623, -13378845 },
    { -1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137, 17597934, 2346211 },
    { 18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352, 3059833, -11782870 }
  },
  {
    { 10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586, -33502212, 3592096 },
    { 33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897, -982665, -6837803 },
    { -32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704, 26353178, 693168 }
  },
  {
    { 30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668, 31375464, 14369965 },
    { -14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839, 17901441, 16011505 },
    { 18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240, -16046376, 8764035, 12309598 }
  }
},
{ /* 20/31 */
  {
    { 5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319, 17544096, -10593782 },
    { 5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127, -5565381, 12348900 },
    { -31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295, -10632534, -585479 }
  },
  {
    { -12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050, 30944593, 1130208 },
    { 8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540, 23550156, -271232 },
    { 17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146, -408818, -137719 }
  },
  {
    { 16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936, 3260525, -7166271 },
    { -4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905, -12748722, 2701326 },
    { -8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971, 11329923, 1862132 }
  },
  {
    { 14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231, -9037963, -940300 },
    { 8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717, -15438168, 11595570 },
    { 15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794, -13489462, -4363670 }
  },
  {
    { -2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635, 977108, 699994 },
    { -12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841, -30534533, -14337913 },
    { 31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775, 12493932, -5409317 }
  },
  {
    { -25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121, 29375955, 6024730 },
    { 842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184, -9940361, 2854096 },
    { -4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770, 12121869, 16648078 }
  },
  {
    { -15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064, 20237806, 2838411 },
    { -19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457, 1068881, -12499905 },
    { -9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053, 12521378, 4845654 }
  },
  {
    { -28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400, -6482306, -12885870 },
    { -23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216, -3113227, 13974498 },
    { 12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737, 18895762, 12629579 }
  }
},
{ /* 21/31 */
  {
    { 14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443, 32195181, 3895677 },
    { 10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119, -8982069, 4429647 },
    { -2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895, 18047436, -15281743 }
  },
  {
    { -25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114, -12850837, -17620701, -9408468 },
    { 21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431, -29958985, 8773375 },
    { -25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935, -7874389, -13920155 }
  },
  {
    { 6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042, -1721788, -2776725 },
    { -12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698, 28408820, 6816612 },
    { -10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702, -10339570, 5067943 }
  },
  {
    { -30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132, 5331210, -10105944 },
    { 30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394, 27679908, -1648928 },
    { 9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565, 22611444, -12715406 }
  },
  {
    { 22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942, 4854859, 6622139 },
    { -8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227, 26404409, 13001963 },
    { -31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720, -15405155, 11020693 }
  },
  {
    { 1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163, 28761762, 1406734 },
    { -448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088, 25577411, -13378680 },
    { -24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936, -9368926, 4745410 }
  },
  {
    { -9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852, 10931924, -11931931 },
    { -16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641, -20470770, 13434654 },
    { 22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326, 28445307, -5364710 }
  },
  {
    { 29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675, 9074234, 1167180 },
    { -26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498, 3843903, 9367684 },
    { -10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684, -139197, 4242895 }
  }
},
{ /* 22/31 */
  {
    { 22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660, -27417366, 16625501 },
    { -11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725, -27351616, 14247413 },
    { 6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061, 27108877, -1180880 }
  },
  {
    { -8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889, -27148451, 981874 },
    { 22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780, -10479804, -16197962 },
    { -7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969, -15933690, 3797899 }
  },
  {
    { 21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232, 20491983, -8042152 },
    { 9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587, 30997318, -6703063 },
    { 7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576, 17649998, -250080 }
  },
  {
    { -9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724, -2233253, 7662146 },
    { -17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199, -3174674, 3440183 },
    { -19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835, 4862400, 1133 }
  },
  {
    { -32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861, -30594991, -7379421 },
    { -3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196, 18278453, 15405622 },
    { -4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523, -21875062, 13626197 }
  },
  {
    { 2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792, 13340839, 15928663 },
    { 31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826, -23452306, 5964753 },
    { 4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144, 2538215, -7570755 }
  },
  {
    { -9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421, -629256, -15958862 },
    { -26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288, 11659922, -11115118 },
    { 26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080, 33100372, -1306171 }
  },
  {
    { 15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675, -5931810, -14466380 },
    { 16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968, -10735770, -10039824 },
    { 28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599, 18036436, 5803270 }
  }
},
{ /* 23/31 */
  {
    { -817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332, -6159431, -14117438 },
    { -31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292, -20095739, 11763584 },
    { -594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632, -19773211, -10713562 }
  },
  {
    { 30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773, -17020157, 992471 },
    { 18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033, -11574335, -10601610 },
    { 19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234, 26224780, 16452269 }
  },
  {
    { -30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186, -20533829, 3698650 },
    { 14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444, 27394301, 12015369 },
    { 19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777, -13259127, -3402461 }
  },
  {
    { 30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312, -8550524, -10393462 },
    { -5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654, -4976164, 12651793 },
    { -2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902, 9768698, -2533218 }
  },
  {
    { -24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450, 4940095, 10678226 },
    { 18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024, -24372348, 16582019 },
    { -15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560, -11003761, 7989037 }
  },
  {
    { 31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206, -19686113, -14800171 },
    { -17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713, 28550068, -6857132 },
    { -28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038, 1155602, 5988841 }
  },
  {
    { 21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481, 24618407, 8283181 },
    { -33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928, 1466169, 10740210 },
    { -1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719, -32164649, -15327040 }
  },
  {
    { 3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507, -3260321, -573935 },
    { 24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372, -7380369, -6144105 },
    { -28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463, -14453128, -1625486, -6494814 }
  }
},
{ /* 24/31 */
  {
    { 793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251, -9906200, -621852 },
    { 5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826, -6171428, -15186581 },
    { -4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238, -1558923, -9863646 }
  },
  {
    { 10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338, -30581476, -15757844 },
    { 10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496, 24003793, 14264025 },
    { 27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525, 13958495, -5732453 }
  },
  {
    { -23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781, 7340521, -15410068 },
    { 4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061, -15066784, -10375192 },
    { -17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888, -8843694, 3849921 }
  },
  {
    { -9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955, 5002294, -15550259 },
    { -12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448, -25845716, 12741426 },
    { -5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464, 28834118, -7646072 }
  },
  {
    { -17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841, 20461858, 5491305 },
    { 13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986, 11293807, -28588204, -9421832 },
    { 28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166, 29867745, -8795943 }
  },
  {
    { -16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392, 22853429, -4012011 },
    { 24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887, 12876623, -2112447 },
    { 17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397, 16031844, 3723494 }
  },
  {
    { -28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890, 23896954, -4314245 },
    { -20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064, -9919646, -8826859 },
    { 28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325, -18051778, -2082915 }
  },
  {
    { 16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268, -19715240, 7847707 },
    { 10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018, -10020567, 3852848 },
    { -11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110, 29330899, -15076224 }
  }
},
{ /* 25/31 */
  {
    { -25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490, -27548796, 12314391 },
    { 15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866, 16103996, -3731215 },
    { -23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699, -29815713, -9841101 }
  },
  {
    { 23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517, -25205859, 2739713 },
    { 21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907, 4931255, 11987849 },
    { -7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388, -30076310, 10117930 }
  },
  {
    { -29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079, 12890019, 15728940 },
    { -21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139, 12885167, 8311031 },
    { -17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730, 1888765, -5435404 }
  },
  {
    { -25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644, -12707869, -19464434, -3340243 },
    { -23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197, 17151279, -9854116 },
    { -24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279, -16866484, 16176525 }
  },
  {
    { -23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426, -28746253, -10197509 },
    { -10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610, 32808310, 1099883 },
    { 15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350, 2051441, -15225865 }
  },
  {
    { -3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188, -22686354, 16633660 },
    { 4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549, 8402478, -9864273 },
    { -28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072, 17983010, 9967138 }
  },
  {
    { -25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337, 17507396, 3651560 },
    { -10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557, -18553322, -11357135 },
    { 2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447, -5605463, -7621941 }
  },
  {
    { -4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066, 17258084, -7977739 },
    { 18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008, 26908270, 12150756 },
    { -30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701, -32302074, 16215819 }
  }
},
{ /* 26/31 */
  {
    { -6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905, -7503072, -8675347 },
    { -27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080, 21676107, -1943028 },
    { 21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466, -3556191, -7913075 }
  },
  {
    { 16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336, -18907032, -9662799 },
    { -2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659, 25459437, -4564609 },
    { -25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602, -6432418, -1644817 }
  },
  {
    { -23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658, 6335692, 7249989 },
    { -30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242, 25993170, -12478523 },
    { 4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955, 31820368, 15075278 }
  },
  {
    { 31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886, -17970238, 12833045 },
    { 19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449, -9413939, 14905377 },
    { 24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129, 27628530, -7555480 }
  },
  {
    { 17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582, -14110875, 15297016 },
    { 510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220, 8683221, 2921426 },
    { 18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924, 4674690, 13890525 }
  },
  {
    { 13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105, 4389687, 288396 },
    { 9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628, 23388070, 16052080 },
    { 12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979, -14754271, -10812892 }
  },
  {
    { 15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844, -28822128, 929275 },
    { 11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533, -9371869, -21393143, 2465074 },
    { 20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066, 2463391, -4622140 }
  },
  {
    { -16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107, 4003896, 12673717 },
    { -1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726, 7903886, 2348101 },
    { 24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159, -28377538, 10048127 }
  }
},
{ /* 27/31 */
  {
    { -12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090, -32297756, 15221632 },
    { -26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755, 29769758, 6593415 },
    { -31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678, 30958054, 8292160 }
  },
  {
    { 31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186, 26143136, -3148876 },
    { 22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433, -3758243, -2304625 },
    { -15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569, -16664475, 8194478 }
  },
  {
    { 27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376, 28572286, 3005164 },
    { 26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479, -26094821, -13079595 },
    { -7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627, 32208683, -1198248 }
  },
  {
    { -16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842, -27672585, -11539858 },
    { 15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429, 15397331, -4130193 },
    { 8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021, -27505566, 15087184 }
  },
  {
    { -18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896, 16788528, -5868942 },
    { -1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320, 31322514, -11615635 },
    { 21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414, 13040862, -12112948 }
  },
  {
    { 11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103, 1613711, 4896935 },
    { -25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045, -23971776, -11267415 },
    { -15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433, -23753030, -8436416 }
  },
  {
    { -7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030, 23097949, -566018 },
    { 4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221, -18512313, 2424778 },
    { 366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109, -3642553, 12412659 }
  },
  {
    { -24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504, -3141501, 11179385 },
    { 18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897, -18684645, -11443503 },
    { 476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813, 11052904, 5219329 }
  }
},
{ /* 28/31 */
  {
    { 20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730, 9014762, -8579056 },
    { -13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280, 8473550, -3256838 },
    { 24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821, -24568481, 11788948 }
  },
  {
    { -3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733, -24568470, -1458691 },
    { -15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194, -18513325, 8464118 },
    { -23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612, 33313881, -8370517 }
  },
  {
    { -20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854, -8940735, -5818269 },
    { -6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188, 28358192, -4253904 },
    { -23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016, -5351664, 5596589 }
  },
  {
    { -28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221, 1768301, 15373193 },
    { -7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991, -24660491, 3442910 },
    { -30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455, -18585478, 13365930 }
  },
  {
    { -7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186, -9689599, -3031667 },
    { 25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784, 15723479, -15163481 },
    { -9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171, 519526, -1235876 }
  },
  {
    { 22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967, 16648397, 7605640 },
    { -8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555, -9468848, 4763278 },
    { -21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523, -11356529, 728112 }
  },
  {
    { 26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558, -29365436, -5498272 },
    { 17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945, 10750447, 10014012 },
    { -10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732, 3424691, 7540221 }
  },
  {
    { 30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219, -9244265, 15258046 },
    { 13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395, 1062915, -5136345 },
    { -19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497, 32960380, 1459310 }
  }
},
{ /* 29/31 */
  {
    { 19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885, 18638003, -11174937 },
    { 31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354, -6643087, -5442636 },
    { -9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543, -32294889, -6456008 }
  },
  {
    { -2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692, -7852844, -8138429 },
    { -15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588, -9431476, 5203576 },
    { 31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524, 31809243, 7347066 }
  },
  {
    { -9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255, 15192876, -2087490 },
    { -12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420, 33473243, -13382104 },
    { 33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903, -6135662, 14480053 }
  },
  {
    { 31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227, 27595050, 8737275 },
    { -20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604, 26498114, 66511 },
    { 22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747, -13327787, -7515095 }
  },
  {
    { -28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437, -17127465, 15115439 },
    { 23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096, 8236921, 16492939 },
    { -23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562, 6708380, -6222424 }
  },
  {
    { 2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700, 29955601, -11678310 },
    { 3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595, -9917575, 6216608 },
    { -32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567, -26767480, 7525079 }
  },
  {
    { -23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495, -19386633, 11994101 },
    { 21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258, -7477437, 13381418 },
    { 18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247, 28535282, 15779576 }
  },
  {
    { 30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730, 9955285, -16303356 },
    { 9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399, 20194861, 13380996 },
    { -26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771, 26342023, 10146099 }
  }
},
{ /* 30/31 */
  {
    { -26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040, 21612326, -545728 },
    { -13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797, -20856566, 11649658 },
    { -10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064, 33514190, 2333242 }
  },
  {
    { -21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638, 24350578, -13450001 },
    { -4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836, 8317860, 12352766 },
    { 18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550, 20712163, 6719373 }
  },
  {
    { 26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210, 26224235, -3297458 },
    { -17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610, 18620611, -16428628 },
    { -13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556, -30701573, -16479657 }
  },
  {
    { -23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639, 13735342, 1934062 },
    { 25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346, -21277997, 5473616 },
    { 31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656, 29111212, -5451014 }
  },
  {
    { 24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839, -10295587, 452383 },
    { -25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248, 15766062, 8407814 },
    { -20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953, -8067909, 2276718 }
  },
  {
    { 30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219, 22740376, -7303417 },
    { 2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383, -15637599, 13295222 },
    { 33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972, -4451357, -14669444 }
  },
  {
    { -20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880, 7770569, 9620597 },
    { 23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323, -33502340, -14767970 },
    { 1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118, 30494170, -11440799 }
  },
  {
    { -5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050, -1684339, -13333647 },
    { 13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865, 3353509, 4033511 },
    { -29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127, 27485041, 7356032 }
  }
},
{ /* 31/31 */
  {
    { 9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015, 28431036, -16771834 },
    { -23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565, 15970762, 4099461 },
    { 29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143, 11465739, 8317062 }
  },
  {
    { -25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455, 20969334, -5157516 },
    { -20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888, 11177095, 14989547 },
    { -24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286, -28487508, 9930240 }
  },
  {
    { -17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767, -13403753, 16291481, -5314038 },
    { -33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617, 4368891, 9788741 },
    { 16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148, 16250552, -11111103 }
  },
  {
    { -19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807, -30190403, 4782747 },
    { -1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045, 22546403, 437323 },
    { 31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261, -30633590, -14097016 }
  },
  {
    { -14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319, -19284671, -6114373 },
    { 15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498, -29380133, 11754228 },
    { -2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556, 22761615, -10134141 }
  },
  {
    { 16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393, 32851222, 11717399 },
    { 11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633, -1193175, -4030831 },
    { -185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660, -19985279, -3948376 }
  },
  {
    { -32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048, -30772034, -15486313 },
    { -18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879, 10928917, 3011958 },
    { -6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180, 18008031, 10258577 }
  },
  {
    { -22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120, 25127874, 6671743 },
    { 29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292, 25838796, 4642684 },
    { -20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640, 18423289, 4177476 }
  }
}
",1,0
257,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/umac-poly64.c,False,"/* umac-poly64.c

   Copyright (C) 2013 Niels MÃ¶ller

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#if HAVE_CONFIG_H
# include ""config.h""
#endif

#include <assert.h>

#include ""umac.h""
#include ""umac-internal.h""

static uint64_t
poly64_mul (uint32_t kh, uint32_t kl, uint64_t y)
{
  uint64_t yl, yh, pl, ph, ml, mh;
  yl = y & 0xffffffff;
  yh = y >> 32;
  pl = yl * kl;
  ph = yh * kh;
  ml = yh * kl + yl * kh; /* No overflow, thanks to special form */
  mh = ml >> 32;
  ml <<= 32;
  pl += ml;
  ph += mh + (pl < ml);

  /* Reduce, using 2^64 = UMAC_P64_OFFSET (mod p) */
  assert (ph < ((uint64_t) 1 << 57));
  ph *= UMAC_P64_OFFSET;
  pl += ph;
  if (pl < ph)
    pl += UMAC_P64_OFFSET;

  return pl;
}

uint64_t
_umac_poly64 (uint32_t kh, uint32_t kl, uint64_t y, uint64_t m)
{
  if ( (m >> 32) == 0xffffffff)
    {
      y = poly64_mul (kh, kl, y);
      if (y == 0)
	y = UMAC_P64 - 1;
      else
	y--;
      m -= UMAC_P64_OFFSET;
    }
  y = poly64_mul (kh, kl, y);
  y += m;
  if (y < m)
    y += UMAC_P64_OFFSET;

  return y;
}
",1,0
275,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/open_ssl/sha/sha3.c,False,"/*
 * Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the ""License"").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#include <string.h>
#include ""internal/sha3.h""

void SHA3_squeeze(uint64_t A[5][5], unsigned char *out, size_t len, size_t r);

void sha3_reset(KECCAK1600_CTX *ctx)
{
    memset(ctx->A, 0, sizeof(ctx->A));
    ctx->bufsz = 0;
}

int sha3_init(KECCAK1600_CTX *ctx, unsigned char pad, size_t bitlen)
{
    size_t bsz = SHA3_BLOCKSIZE(bitlen);

    if (bsz <= sizeof(ctx->buf)) {
        sha3_reset(ctx);
        ctx->block_size = bsz;
        ctx->md_size = bitlen / 8;
        ctx->pad = pad;
        return 1;
    }

    return 0;
}

int keccak_kmac_init(KECCAK1600_CTX *ctx, unsigned char pad, size_t bitlen)
{
    int ret = sha3_init(ctx, pad, bitlen);

    if (ret)
        ctx->md_size *= 2;
    return ret;
}

int sha3_update(KECCAK1600_CTX *ctx, const void *_inp, size_t len)
{
    const unsigned char *inp = _inp;
    size_t bsz = ctx->block_size;
    size_t num, rem;

    if (len == 0)
        return 1;

    if ((num = ctx->bufsz) != 0) {      /* process intermediate buffer? */
        rem = bsz - num;

        if (len < rem) {
            memcpy(ctx->buf + num, inp, len);
            ctx->bufsz += len;
            return 1;
        }
        /*
         * We have enough data to fill or overflow the intermediate
         * buffer. So we append |rem| bytes and process the block,
         * leaving the rest for later processing...
         */
        memcpy(ctx->buf + num, inp, rem);
        inp += rem, len -= rem;
        (void)SHA3_absorb(ctx->A, ctx->buf, bsz, bsz);
        ctx->bufsz = 0;
        /* ctx->buf is processed, ctx->num is guaranteed to be zero */
    }

    if (len >= bsz)
        rem = SHA3_absorb(ctx->A, inp, len, bsz);
    else
        rem = len;

    if (rem) {
        memcpy(ctx->buf, inp + len - rem, rem);
        ctx->bufsz = rem;
    }

    return 1;
}

int sha3_final(unsigned char *md, KECCAK1600_CTX *ctx)
{
    size_t bsz = ctx->block_size;
    size_t num = ctx->bufsz;

    if (ctx->md_size == 0)
        return 1;

    /*
     * Pad the data with 10*1. Note that |num| can be |bsz - 1|
     * in which case both byte operations below are performed on
     * same byte...
     */
    memset(ctx->buf + num, 0, bsz - num);
    ctx->buf[num] = ctx->pad;
    ctx->buf[bsz - 1] |= 0x80;

    (void)SHA3_absorb(ctx->A, ctx->buf, bsz, bsz);

    SHA3_squeeze(ctx->A, md, ctx->md_size, bsz);

    return 1;
}
",1,0
299,crypto-competitions,catena-blake2b.c,False,"#include ""catena.h""
#include ""blake2.h""
#include ""hash.h""


inline void __Hash1(const uint8_t *input, const uint32_t inputlen,
		      uint8_t hash[H_LEN])
{
  blake2b_state ctx;
  blake2b_init(&ctx,H_LEN);
  blake2b_update(&ctx, input, inputlen);
  blake2b_final(&ctx, hash, H_LEN);
}


/***************************************************/

inline void __Hash2(const uint8_t *i1, const uint8_t i1len,
		    const uint8_t *i2, const uint8_t i2len,
		    uint8_t hash[H_LEN])
{
  blake2b_state ctx;
  blake2b_init(&ctx,H_LEN);
  blake2b_update(&ctx, i1, i1len);
  blake2b_update(&ctx, i2, i2len);
  blake2b_final(&ctx, hash, H_LEN);
}



/***************************************************/

inline void __Hash3(const uint8_t *i1, const uint8_t i1len,
		    const uint8_t *i2, const uint8_t i2len,
		    const uint8_t *i3, const uint8_t i3len,
		    uint8_t hash[H_LEN])
{
  blake2b_state ctx;
  blake2b_init(&ctx,H_LEN);
  blake2b_update(&ctx, i1, i1len);
  blake2b_update(&ctx, i2, i2len);
  blake2b_update(&ctx, i3, i3len);
  blake2b_final(&ctx, hash, H_LEN);
}

/***************************************************/

inline void __Hash4(const uint8_t *i1, const uint8_t i1len,
		    const uint8_t *i2, const uint8_t i2len,
		    const uint8_t *i3, const uint8_t i3len,
		     const uint8_t *i4, const uint8_t i4len,
		    uint8_t hash[H_LEN])
{
  blake2b_state ctx;
  blake2b_init(&ctx,H_LEN);
  blake2b_update(&ctx, i1, i1len);
  blake2b_update(&ctx, i2, i2len);
  blake2b_update(&ctx, i3, i3len);
  blake2b_update(&ctx, i4, i4len);
  blake2b_final(&ctx, hash, H_LEN);
}


/***************************************************/

inline void __Hash5(const uint8_t *i1, const uint8_t i1len,
		    const uint8_t *i2, const uint8_t i2len,
		    const uint8_t *i3, const uint8_t i3len,
		    const uint8_t *i4, const uint8_t i4len,
		    const uint8_t *i5, const uint8_t i5len,
		    uint8_t hash[H_LEN])
{
  blake2b_state ctx;
  blake2b_init(&ctx,H_LEN);
  blake2b_update(&ctx, i1, i1len);
  blake2b_update(&ctx, i2, i2len);
  blake2b_update(&ctx, i3, i3len);
  blake2b_update(&ctx, i4, i4len);
  blake2b_update(&ctx, i5, i5len);
  blake2b_final(&ctx, hash, H_LEN);
}
",1,0
523,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/memops.h,True,"/* memops.h

   Copyright (C) 2016 Niels MÃ¶ller

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#ifndef NETTLE_MEMOPS_H_INCLUDED
#define NETTLE_MEMOPS_H_INCLUDED

#include ""memxor.h""

#ifdef __cplusplus
extern ""C"" {
#endif

/* Name mangling */
#define cnd_memcpy nettle_cnd_memcpy
#define memeql_sec nettle_memeql_sec

int
memeql_sec (const void *a, const void *b, size_t n);

/* Side-channel silent conditional memcpy. cnd must be 0 (nop) or 1
   (copy). */
void
cnd_memcpy(int cnd, volatile void *dst, const volatile void *src, size_t n);

#ifdef __cplusplus
}
#endif

#endif /* NETTLE_MEMOPS_H_INCLUDED */
",1,0
542,crypto-competitions,util.h,True,"/*
util.h - Utility functions
Written in 2013 by Daniel Franke <dfoxfranke@gmail.com>

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software. If not, see
http://creativecommons.org/publicdomain/zero/1.0/
*/

#ifdef EARWORM_BUILD_OPT
#include ""util-opt.h""
#else
#include ""util-ref.h""
#endif
",1,0
679,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/ecc-scalar.c,False,"/* ecc-scalar.c

   Copyright (C) 2013 Niels MÃ¶ller

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

/* Development of Nettle's ECC support was funded by the .SE Internet Fund. */

#if HAVE_CONFIG_H
# include ""config.h""
#endif

#include ""ecc.h""
#include ""ecc-internal.h""

void
ecc_scalar_init (struct ecc_scalar *s, const struct ecc_curve *ecc)
{
  s->ecc = ecc;
  s->p = gmp_alloc_limbs (ecc->p.size);
}

void
ecc_scalar_clear (struct ecc_scalar *s)
{
  gmp_free_limbs (s->p, s->ecc->p.size);
}

int
ecc_scalar_set (struct ecc_scalar *s, const mpz_t z)
{
  mp_size_t size = s->ecc->p.size;

  if (mpz_sgn (z) <= 0 || mpz_limbs_cmp (z, s->ecc->q.m, size) >= 0)
    return 0;

  mpz_limbs_copy (s->p, z, size);
  return 1;
}

void
ecc_scalar_get (const struct ecc_scalar *s, mpz_t z)
{
  mpz_set_n (z, s->p, s->ecc->p.size);  
}
",1,0
680,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/ecc-mul-a-eh.c,False,"/* ecc-mul-a-eh.c

   Copyright (C) 2013, 2014 Niels MÃ¶ller

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#if HAVE_CONFIG_H
# include ""config.h""
#endif

#include <assert.h>

#include ""ecc.h""
#include ""ecc-internal.h""

/* Binary algorithm needs 6*ecc->p.size + scratch for ecc_add_ehh,
   total 13 ecc->p.size

   Window algorithm needs (3<<w) * ecc->p.size for the table,
   3*ecc->p.size for a temporary point, and scratch for
   ecc_add_ehh. */

#if ECC_MUL_A_EH_WBITS == 0
void
ecc_mul_a_eh (const struct ecc_curve *ecc,
	      mp_limb_t *r,
	      const mp_limb_t *np, const mp_limb_t *p,
	      mp_limb_t *scratch)
{
#define pe scratch
#define tp (scratch + 3*ecc->p.size)
#define scratch_out (scratch + 6*ecc->p.size)

  unsigned i;

  ecc_a_to_j (ecc, pe, p);

  /* x = 0, y = 1, z = 1 */
  mpn_zero (r, 3*ecc->p.size);
  r[ecc->p.size] = r[2*ecc->p.size] = 1;
  
  for (i = ecc->p.size; i-- > 0; )
    {
      mp_limb_t w = np[i];
      mp_limb_t bit;

      for (bit = (mp_limb_t) 1 << (GMP_NUMB_BITS - 1);
	   bit > 0;
	   bit >>= 1)
	{
	  int digit;

	  ecc_dup_eh (ecc, r, r, scratch_out);
	  ecc_add_ehh (ecc, tp, r, pe, scratch_out);

	  digit = (w & bit) > 0;
	  /* If we had a one-bit, use the sum. */
	  cnd_copy (digit, r, tp, 3*ecc->p.size);
	}
    }
}
#else /* ECC_MUL_A_EH_WBITS > 1 */

#define TABLE_SIZE (1U << ECC_MUL_A_EH_WBITS)
#define TABLE_MASK (TABLE_SIZE - 1)

#define TABLE(j) (table + (j) * 3*ecc->p.size)

static void
table_init (const struct ecc_curve *ecc,
	    mp_limb_t *table, unsigned bits,
	    const mp_limb_t *p,
	    mp_limb_t *scratch)
{
  unsigned size = 1 << bits;
  unsigned j;

  mpn_zero (TABLE(0), 3*ecc->p.size);
  TABLE(0)[ecc->p.size] = TABLE(0)[2*ecc->p.size] = 1;

  ecc_a_to_j (ecc, TABLE(1), p);

  for (j = 2; j < size; j += 2)
    {
      ecc_dup_eh (ecc, TABLE(j), TABLE(j/2), scratch);
      ecc_add_ehh (ecc, TABLE(j+1), TABLE(j), TABLE(1), scratch);
    }
}

void
ecc_mul_a_eh (const struct ecc_curve *ecc,
	      mp_limb_t *r,
	      const mp_limb_t *np, const mp_limb_t *p,
	      mp_limb_t *scratch)
{
#define tp scratch
#define table (scratch + 3*ecc->p.size)
  mp_limb_t *scratch_out = table + (3*ecc->p.size << ECC_MUL_A_EH_WBITS);

  /* Avoid the mp_bitcnt_t type for compatibility with older GMP
     versions. */
  unsigned blocks = (ecc->p.bit_size + ECC_MUL_A_EH_WBITS - 1) / ECC_MUL_A_EH_WBITS;
  unsigned bit_index = (blocks-1) * ECC_MUL_A_EH_WBITS;

  mp_size_t limb_index = bit_index / GMP_NUMB_BITS;
  unsigned shift = bit_index % GMP_NUMB_BITS;
  mp_limb_t w, bits;

  table_init (ecc, table, ECC_MUL_A_EH_WBITS, p, scratch_out);

  w = np[limb_index];
  bits = w >> shift;
  if (limb_index < ecc->p.size - 1)
    bits |= np[limb_index + 1] << (GMP_NUMB_BITS - shift);

  assert (bits < TABLE_SIZE);

  sec_tabselect (r, 3*ecc->p.size, table, TABLE_SIZE, bits);

  for (;;)
    {
      unsigned j;
      if (shift >= ECC_MUL_A_EH_WBITS)
	{
	  shift -= ECC_MUL_A_EH_WBITS;
	  bits = w >> shift;
	}
      else
	{
	  if (limb_index == 0)
	    {
	      assert (shift == 0);
	      break;
	    }
	  bits = w << (ECC_MUL_A_EH_WBITS - shift);
	  w = np[--limb_index];
	  shift = shift + GMP_NUMB_BITS - ECC_MUL_A_EH_WBITS;
	  bits |= w >> shift;
	}
      for (j = 0; j < ECC_MUL_A_EH_WBITS; j++)
	ecc_dup_eh (ecc, r, r, scratch_out);

      bits &= TABLE_MASK;
      sec_tabselect (tp, 3*ecc->p.size, table, TABLE_SIZE, bits);
      ecc_add_ehh (ecc, r, tp, r, scratch_out);
    }
#undef table
#undef tp
}

#endif /* ECC_MUL_A_EH_WBITS > 1 */
",1,0
700,crypto-competitions,tiaoxin-optimized.h,True,"#ifndef TIAOXIN_OPTIMIZED_H
#define TIAOXIN_OPTIMIZED_H

int tiaoxin_optimized_encrypt(
       const unsigned char *ad,unsigned long long adlen,
       const unsigned char *m,unsigned long long mlen,
       const unsigned char *nsec,
       const unsigned char *npub,
       const unsigned char *k,
       unsigned char *c,unsigned long long *clen
     );


int tiaoxin_optimized_decrypt(
       unsigned char *m,unsigned long long *mlen,
       unsigned char *nsec,
       const unsigned char *c,unsigned long long clen,
       const unsigned char *ad,unsigned long long adlen,
       const unsigned char *npub,
       const unsigned char *k
     );


#endif",1,0
720,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/cast128_sboxes.h,True,"/*
 *	CAST-128 in C
 *	Written by Steve Reid <sreid@sea-to-sky.net>
 *	100% Public Domain - no warranty
 *	Released 1997.10.11
 */

static const uint32_t cast_sbox1[256] = {
  0x30FB40D4, 0x9FA0FF0B, 0x6BECCD2F, 0x3F258C7A,
  0x1E213F2F, 0x9C004DD3, 0x6003E540, 0xCF9FC949,
  0xBFD4AF27, 0x88BBBDB5, 0xE2034090, 0x98D09675,
  0x6E63A0E0, 0x15C361D2, 0xC2E7661D, 0x22D4FF8E,
  0x28683B6F, 0xC07FD059, 0xFF2379C8, 0x775F50E2,
  0x43C340D3, 0xDF2F8656, 0x887CA41A, 0xA2D2BD2D,
  0xA1C9E0D6, 0x346C4819, 0x61B76D87, 0x22540F2F,
  0x2ABE32E1, 0xAA54166B, 0x22568E3A, 0xA2D341D0,
  0x66DB40C8, 0xA784392F, 0x004DFF2F, 0x2DB9D2DE,
  0x97943FAC, 0x4A97C1D8, 0x527644B7, 0xB5F437A7,
  0xB82CBAEF, 0xD751D159, 0x6FF7F0ED, 0x5A097A1F,
  0x827B68D0, 0x90ECF52E, 0x22B0C054, 0xBC8E5935,
  0x4B6D2F7F, 0x50BB64A2, 0xD2664910, 0xBEE5812D,
  0xB7332290, 0xE93B159F, 0xB48EE411, 0x4BFF345D,
  0xFD45C240, 0xAD31973F, 0xC4F6D02E, 0x55FC8165,
  0xD5B1CAAD, 0xA1AC2DAE, 0xA2D4B76D, 0xC19B0C50,
  0x882240F2, 0x0C6E4F38, 0xA4E4BFD7, 0x4F5BA272,
  0x564C1D2F, 0xC59C5319, 0xB949E354, 0xB04669FE,
  0xB1B6AB8A, 0xC71358DD, 0x6385C545, 0x110F935D,
  0x57538AD5, 0x6A390493, 0xE63D37E0, 0x2A54F6B3,
  0x3A787D5F, 0x6276A0B5, 0x19A6FCDF, 0x7A42206A,
  0x29F9D4D5, 0xF61B1891, 0xBB72275E, 0xAA508167,
  0x38901091, 0xC6B505EB, 0x84C7CB8C, 0x2AD75A0F,
  0x874A1427, 0xA2D1936B, 0x2AD286AF, 0xAA56D291,
  0xD7894360, 0x425C750D, 0x93B39E26, 0x187184C9,
  0x6C00B32D, 0x73E2BB14, 0xA0BEBC3C, 0x54623779,
  0x64459EAB, 0x3F328B82, 0x7718CF82, 0x59A2CEA6,
  0x04EE002E, 0x89FE78E6, 0x3FAB0950, 0x325FF6C2,
  0x81383F05, 0x6963C5C8, 0x76CB5AD6, 0xD49974C9,
  0xCA180DCF, 0x380782D5, 0xC7FA5CF6, 0x8AC31511,
  0x35E79E13, 0x47DA91D0, 0xF40F9086, 0xA7E2419E,
  0x31366241, 0x051EF495, 0xAA573B04, 0x4A805D8D,
  0x548300D0, 0x00322A3C, 0xBF64CDDF, 0xBA57A68E,
  0x75C6372B, 0x50AFD341, 0xA7C13275, 0x915A0BF5,
  0x6B54BFAB, 0x2B0B1426, 0xAB4CC9D7, 0x449CCD82,
  0xF7FBF265, 0xAB85C5F3, 0x1B55DB94, 0xAAD4E324,
  0xCFA4BD3F, 0x2DEAA3E2, 0x9E204D02, 0xC8BD25AC,
  0xEADF55B3, 0xD5BD9E98, 0xE31231B2, 0x2AD5AD6C,
  0x954329DE, 0xADBE4528, 0xD8710F69, 0xAA51C90F,
  0xAA786BF6, 0x22513F1E, 0xAA51A79B, 0x2AD344CC,
  0x7B5A41F0, 0xD37CFBAD, 0x1B069505, 0x41ECE491,
  0xB4C332E6, 0x032268D4, 0xC9600ACC, 0xCE387E6D,
  0xBF6BB16C, 0x6A70FB78, 0x0D03D9C9, 0xD4DF39DE,
  0xE01063DA, 0x4736F464, 0x5AD328D8, 0xB347CC96,
  0x75BB0FC3, 0x98511BFB, 0x4FFBCC35, 0xB58BCF6A,
  0xE11F0ABC, 0xBFC5FE4A, 0xA70AEC10, 0xAC39570A,
  0x3F04442F, 0x6188B153, 0xE0397A2E, 0x5727CB79,
  0x9CEB418F, 0x1CACD68D, 0x2AD37C96, 0x0175CB9D,
  0xC69DFF09, 0xC75B65F0, 0xD9DB40D8, 0xEC0E7779,
  0x4744EAD4, 0xB11C3274, 0xDD24CB9E, 0x7E1C54BD,
  0xF01144F9, 0xD2240EB1, 0x9675B3FD, 0xA3AC3755,
  0xD47C27AF, 0x51C85F4D, 0x56907596, 0xA5BB15E6,
  0x580304F0, 0xCA042CF1, 0x011A37EA, 0x8DBFAADB,
  0x35BA3E4A, 0x3526FFA0, 0xC37B4D09, 0xBC306ED9,
  0x98A52666, 0x5648F725, 0xFF5E569D, 0x0CED63D0,
  0x7C63B2CF, 0x700B45E1, 0xD5EA50F1, 0x85A92872,
  0xAF1FBDA7, 0xD4234870, 0xA7870BF3, 0x2D3B4D79,
  0x42E04198, 0x0CD0EDE7, 0x26470DB8, 0xF881814C,
  0x474D6AD7, 0x7C0C5E5C, 0xD1231959, 0x381B7298,
  0xF5D2F4DB, 0xAB838653, 0x6E2F1E23, 0x83719C9E,
  0xBD91E046, 0x9A56456E, 0xDC39200C, 0x20C8C571,
  0x962BDA1C, 0xE1E696FF, 0xB141AB08, 0x7CCA89B9,
  0x1A69E783, 0x02CC4843, 0xA2F7C579, 0x429EF47D,
  0x427B169C, 0x5AC9F049, 0xDD8F0F00, 0x5C8165BF
};

static const uint32_t cast_sbox2[256] = {
  0x1F201094, 0xEF0BA75B, 0x69E3CF7E, 0x393F4380,
  0xFE61CF7A, 0xEEC5207A, 0x55889C94, 0x72FC0651,
  0xADA7EF79, 0x4E1D7235, 0xD55A63CE, 0xDE0436BA,
  0x99C430EF, 0x5F0C0794, 0x18DCDB7D, 0xA1D6EFF3,
  0xA0B52F7B, 0x59E83605, 0xEE15B094, 0xE9FFD909,
  0xDC440086, 0xEF944459, 0xBA83CCB3, 0xE0C3CDFB,
  0xD1DA4181, 0x3B092AB1, 0xF997F1C1, 0xA5E6CF7B,
  0x01420DDB, 0xE4E7EF5B, 0x25A1FF41, 0xE180F806,
  0x1FC41080, 0x179BEE7A, 0xD37AC6A9, 0xFE5830A4,
  0x98DE8B7F, 0x77E83F4E, 0x79929269, 0x24FA9F7B,
  0xE113C85B, 0xACC40083, 0xD7503525, 0xF7EA615F,
  0x62143154, 0x0D554B63, 0x5D681121, 0xC866C359,
  0x3D63CF73, 0xCEE234C0, 0xD4D87E87, 0x5C672B21,
  0x071F6181, 0x39F7627F, 0x361E3084, 0xE4EB573B,
  0x602F64A4, 0xD63ACD9C, 0x1BBC4635, 0x9E81032D,
  0x2701F50C, 0x99847AB4, 0xA0E3DF79, 0xBA6CF38C,
  0x10843094, 0x2537A95E, 0xF46F6FFE, 0xA1FF3B1F,
  0x208CFB6A, 0x8F458C74, 0xD9E0A227, 0x4EC73A34,
  0xFC884F69, 0x3E4DE8DF, 0xEF0E0088, 0x3559648D,
  0x8A45388C, 0x1D804366, 0x721D9BFD, 0xA58684BB,
  0xE8256333, 0x844E8212, 0x128D8098, 0xFED33FB4,
  0xCE280AE1, 0x27E19BA5, 0xD5A6C252, 0xE49754BD,
  0xC5D655DD, 0xEB667064, 0x77840B4D, 0xA1B6A801,
  0x84DB26A9, 0xE0B56714, 0x21F043B7, 0xE5D05860,
  0x54F03084, 0x066FF472, 0xA31AA153, 0xDADC4755,
  0xB5625DBF, 0x68561BE6, 0x83CA6B94, 0x2D6ED23B,
  0xECCF01DB, 0xA6D3D0BA, 0xB6803D5C, 0xAF77A709,
  0x33B4A34C, 0x397BC8D6, 0x5EE22B95, 0x5F0E5304,
  0x81ED6F61, 0x20E74364, 0xB45E1378, 0xDE18639B,
  0x881CA122, 0xB96726D1, 0x8049A7E8, 0x22B7DA7B,
  0x5E552D25, 0x5272D237, 0x79D2951C, 0xC60D894C,
  0x488CB402, 0x1BA4FE5B, 0xA4B09F6B, 0x1CA815CF,
  0xA20C3005, 0x8871DF63, 0xB9DE2FCB, 0x0CC6C9E9,
  0x0BEEFF53, 0xE3214517, 0xB4542835, 0x9F63293C,
  0xEE41E729, 0x6E1D2D7C, 0x50045286, 0x1E6685F3,
  0xF33401C6, 0x30A22C95, 0x31A70850, 0x60930F13,
  0x73F98417, 0xA1269859, 0xEC645C44, 0x52C877A9,
  0xCDFF33A6, 0xA02B1741, 0x7CBAD9A2, 0x2180036F,
  0x50D99C08, 0xCB3F4861, 0xC26BD765, 0x64A3F6AB,
  0x80342676, 0x25A75E7B, 0xE4E6D1FC, 0x20C710E6,
  0xCDF0B680, 0x17844D3B, 0x31EEF84D, 0x7E0824E4,
  0x2CCB49EB, 0x846A3BAE, 0x8FF77888, 0xEE5D60F6,
  0x7AF75673, 0x2FDD5CDB, 0xA11631C1, 0x30F66F43,
  0xB3FAEC54, 0x157FD7FA, 0xEF8579CC, 0xD152DE58,
  0xDB2FFD5E, 0x8F32CE19, 0x306AF97A, 0x02F03EF8,
  0x99319AD5, 0xC242FA0F, 0xA7E3EBB0, 0xC68E4906,
  0xB8DA230C, 0x80823028, 0xDCDEF3C8, 0xD35FB171,
  0x088A1BC8, 0xBEC0C560, 0x61A3C9E8, 0xBCA8F54D,
  0xC72FEFFA, 0x22822E99, 0x82C570B4, 0xD8D94E89,
  0x8B1C34BC, 0x301E16E6, 0x273BE979, 0xB0FFEAA6,
  0x61D9B8C6, 0x00B24869, 0xB7FFCE3F, 0x08DC283B,
  0x43DAF65A, 0xF7E19798, 0x7619B72F, 0x8F1C9BA4,
  0xDC8637A0, 0x16A7D3B1, 0x9FC393B7, 0xA7136EEB,
  0xC6BCC63E, 0x1A513742, 0xEF6828BC, 0x520365D6,
  0x2D6A77AB, 0x3527ED4B, 0x821FD216, 0x095C6E2E,
  0xDB92F2FB, 0x5EEA29CB, 0x145892F5, 0x91584F7F,
  0x5483697B, 0x2667A8CC, 0x85196048, 0x8C4BACEA,
  0x833860D4, 0x0D23E0F9, 0x6C387E8A, 0x0AE6D249,
  0xB284600C, 0xD835731D, 0xDCB1C647, 0xAC4C56EA,
  0x3EBD81B3, 0x230EABB0, 0x6438BC87, 0xF0B5B1FA,
  0x8F5EA2B3, 0xFC184642, 0x0A036B7A, 0x4FB089BD,
  0x649DA589, 0xA345415E, 0x5C038323, 0x3E5D3BB9,
  0x43D79572, 0x7E6DD07C, 0x06DFDF1E, 0x6C6CC4EF,
  0x7160A539, 0x73BFBE70, 0x83877605, 0x4523ECF1
};

static const uint32_t cast_sbox3[256] = {
  0x8DEFC240, 0x25FA5D9F, 0xEB903DBF, 0xE810C907,
  0x47607FFF, 0x369FE44B, 0x8C1FC644, 0xAECECA90,
  0xBEB1F9BF, 0xEEFBCAEA, 0xE8CF1950, 0x51DF07AE,
  0x920E8806, 0xF0AD0548, 0xE13C8D83, 0x927010D5,
  0x11107D9F, 0x07647DB9, 0xB2E3E4D4, 0x3D4F285E,
  0xB9AFA820, 0xFADE82E0, 0xA067268B, 0x8272792E,
  0x553FB2C0, 0x489AE22B, 0xD4EF9794, 0x125E3FBC,
  0x21FFFCEE, 0x825B1BFD, 0x9255C5ED, 0x1257A240,
  0x4E1A8302, 0xBAE07FFF, 0x528246E7, 0x8E57140E,
  0x3373F7BF, 0x8C9F8188, 0xA6FC4EE8, 0xC982B5A5,
  0xA8C01DB7, 0x579FC264, 0x67094F31, 0xF2BD3F5F,
  0x40FFF7C1, 0x1FB78DFC, 0x8E6BD2C1, 0x437BE59B,
  0x99B03DBF, 0xB5DBC64B, 0x638DC0E6, 0x55819D99,
  0xA197C81C, 0x4A012D6E, 0xC5884A28, 0xCCC36F71,
  0xB843C213, 0x6C0743F1, 0x8309893C, 0x0FEDDD5F,
  0x2F7FE850, 0xD7C07F7E, 0x02507FBF, 0x5AFB9A04,
  0xA747D2D0, 0x1651192E, 0xAF70BF3E, 0x58C31380,
  0x5F98302E, 0x727CC3C4, 0x0A0FB402, 0x0F7FEF82,
  0x8C96FDAD, 0x5D2C2AAE, 0x8EE99A49, 0x50DA88B8,
  0x8427F4A0, 0x1EAC5790, 0x796FB449, 0x8252DC15,
  0xEFBD7D9B, 0xA672597D, 0xADA840D8, 0x45F54504,
  0xFA5D7403, 0xE83EC305, 0x4F91751A, 0x925669C2,
  0x23EFE941, 0xA903F12E, 0x60270DF2, 0x0276E4B6,
  0x94FD6574, 0x927985B2, 0x8276DBCB, 0x02778176,
  0xF8AF918D, 0x4E48F79E, 0x8F616DDF, 0xE29D840E,
  0x842F7D83, 0x340CE5C8, 0x96BBB682, 0x93B4B148,
  0xEF303CAB, 0x984FAF28, 0x779FAF9B, 0x92DC560D,
  0x224D1E20, 0x8437AA88, 0x7D29DC96, 0x2756D3DC,
  0x8B907CEE, 0xB51FD240, 0xE7C07CE3, 0xE566B4A1,
  0xC3E9615E, 0x3CF8209D, 0x6094D1E3, 0xCD9CA341,
  0x5C76460E, 0x00EA983B, 0xD4D67881, 0xFD47572C,
  0xF76CEDD9, 0xBDA8229C, 0x127DADAA, 0x438A074E,
  0x1F97C090, 0x081BDB8A, 0x93A07EBE, 0xB938CA15,
  0x97B03CFF, 0x3DC2C0F8, 0x8D1AB2EC, 0x64380E51,
  0x68CC7BFB, 0xD90F2788, 0x12490181, 0x5DE5FFD4,
  0xDD7EF86A, 0x76A2E214, 0xB9A40368, 0x925D958F,
  0x4B39FFFA, 0xBA39AEE9, 0xA4FFD30B, 0xFAF7933B,
  0x6D498623, 0x193CBCFA, 0x27627545, 0x825CF47A,
  0x61BD8BA0, 0xD11E42D1, 0xCEAD04F4, 0x127EA392,
  0x10428DB7, 0x8272A972, 0x9270C4A8, 0x127DE50B,
  0x285BA1C8, 0x3C62F44F, 0x35C0EAA5, 0xE805D231,
  0x428929FB, 0xB4FCDF82, 0x4FB66A53, 0x0E7DC15B,
  0x1F081FAB, 0x108618AE, 0xFCFD086D, 0xF9FF2889,
  0x694BCC11, 0x236A5CAE, 0x12DECA4D, 0x2C3F8CC5,
  0xD2D02DFE, 0xF8EF5896, 0xE4CF52DA, 0x95155B67,
  0x494A488C, 0xB9B6A80C, 0x5C8F82BC, 0x89D36B45,
  0x3A609437, 0xEC00C9A9, 0x44715253, 0x0A874B49,
  0xD773BC40, 0x7C34671C, 0x02717EF6, 0x4FEB5536,
  0xA2D02FFF, 0xD2BF60C4, 0xD43F03C0, 0x50B4EF6D,
  0x07478CD1, 0x006E1888, 0xA2E53F55, 0xB9E6D4BC,
  0xA2048016, 0x97573833, 0xD7207D67, 0xDE0F8F3D,
  0x72F87B33, 0xABCC4F33, 0x7688C55D, 0x7B00A6B0,
  0x947B0001, 0x570075D2, 0xF9BB88F8, 0x8942019E,
  0x4264A5FF, 0x856302E0, 0x72DBD92B, 0xEE971B69,
  0x6EA22FDE, 0x5F08AE2B, 0xAF7A616D, 0xE5C98767,
  0xCF1FEBD2, 0x61EFC8C2, 0xF1AC2571, 0xCC8239C2,
  0x67214CB8, 0xB1E583D1, 0xB7DC3E62, 0x7F10BDCE,
  0xF90A5C38, 0x0FF0443D, 0x606E6DC6, 0x60543A49,
  0x5727C148, 0x2BE98A1D, 0x8AB41738, 0x20E1BE24,
  0xAF96DA0F, 0x68458425, 0x99833BE5, 0x600D457D,
  0x282F9350, 0x8334B362, 0xD91D1120, 0x2B6D8DA0,
  0x642B1E31, 0x9C305A00, 0x52BCE688, 0x1B03588A,
  0xF7BAEFD5, 0x4142ED9C, 0xA4315C11, 0x83323EC5,
  0xDFEF4636, 0xA133C501, 0xE9D3531C, 0xEE353783
};

static const uint32_t cast_sbox4[256] = {
  0x9DB30420, 0x1FB6E9DE, 0xA7BE7BEF, 0xD273A298,
  0x4A4F7BDB, 0x64AD8C57, 0x85510443, 0xFA020ED1,
  0x7E287AFF, 0xE60FB663, 0x095F35A1, 0x79EBF120,
  0xFD059D43, 0x6497B7B1, 0xF3641F63, 0x241E4ADF,
  0x28147F5F, 0x4FA2B8CD, 0xC9430040, 0x0CC32220,
  0xFDD30B30, 0xC0A5374F, 0x1D2D00D9, 0x24147B15,
  0xEE4D111A, 0x0FCA5167, 0x71FF904C, 0x2D195FFE,
  0x1A05645F, 0x0C13FEFE, 0x081B08CA, 0x05170121,
  0x80530100, 0xE83E5EFE, 0xAC9AF4F8, 0x7FE72701,
  0xD2B8EE5F, 0x06DF4261, 0xBB9E9B8A, 0x7293EA25,
  0xCE84FFDF, 0xF5718801, 0x3DD64B04, 0xA26F263B,
  0x7ED48400, 0x547EEBE6, 0x446D4CA0, 0x6CF3D6F5,
  0x2649ABDF, 0xAEA0C7F5, 0x36338CC1, 0x503F7E93,
  0xD3772061, 0x11B638E1, 0x72500E03, 0xF80EB2BB,
  0xABE0502E, 0xEC8D77DE, 0x57971E81, 0xE14F6746,
  0xC9335400, 0x6920318F, 0x081DBB99, 0xFFC304A5,
  0x4D351805, 0x7F3D5CE3, 0xA6C866C6, 0x5D5BCCA9,
  0xDAEC6FEA, 0x9F926F91, 0x9F46222F, 0x3991467D,
  0xA5BF6D8E, 0x1143C44F, 0x43958302, 0xD0214EEB,
  0x022083B8, 0x3FB6180C, 0x18F8931E, 0x281658E6,
  0x26486E3E, 0x8BD78A70, 0x7477E4C1, 0xB506E07C,
  0xF32D0A25, 0x79098B02, 0xE4EABB81, 0x28123B23,
  0x69DEAD38, 0x1574CA16, 0xDF871B62, 0x211C40B7,
  0xA51A9EF9, 0x0014377B, 0x041E8AC8, 0x09114003,
  0xBD59E4D2, 0xE3D156D5, 0x4FE876D5, 0x2F91A340,
  0x557BE8DE, 0x00EAE4A7, 0x0CE5C2EC, 0x4DB4BBA6,
  0xE756BDFF, 0xDD3369AC, 0xEC17B035, 0x06572327,
  0x99AFC8B0, 0x56C8C391, 0x6B65811C, 0x5E146119,
  0x6E85CB75, 0xBE07C002, 0xC2325577, 0x893FF4EC,
  0x5BBFC92D, 0xD0EC3B25, 0xB7801AB7, 0x8D6D3B24,
  0x20C763EF, 0xC366A5FC, 0x9C382880, 0x0ACE3205,
  0xAAC9548A, 0xECA1D7C7, 0x041AFA32, 0x1D16625A,
  0x6701902C, 0x9B757A54, 0x31D477F7, 0x9126B031,
  0x36CC6FDB, 0xC70B8B46, 0xD9E66A48, 0x56E55A79,
  0x026A4CEB, 0x52437EFF, 0x2F8F76B4, 0x0DF980A5,
  0x8674CDE3, 0xEDDA04EB, 0x17A9BE04, 0x2C18F4DF,
  0xB7747F9D, 0xAB2AF7B4, 0xEFC34D20, 0x2E096B7C,
  0x1741A254, 0xE5B6A035, 0x213D42F6, 0x2C1C7C26,
  0x61C2F50F, 0x6552DAF9, 0xD2C231F8, 0x25130F69,
  0xD8167FA2, 0x0418F2C8, 0x001A96A6, 0x0D1526AB,
  0x63315C21, 0x5E0A72EC, 0x49BAFEFD, 0x187908D9,
  0x8D0DBD86, 0x311170A7, 0x3E9B640C, 0xCC3E10D7,
  0xD5CAD3B6, 0x0CAEC388, 0xF73001E1, 0x6C728AFF,
  0x71EAE2A1, 0x1F9AF36E, 0xCFCBD12F, 0xC1DE8417,
  0xAC07BE6B, 0xCB44A1D8, 0x8B9B0F56, 0x013988C3,
  0xB1C52FCA, 0xB4BE31CD, 0xD8782806, 0x12A3A4E2,
  0x6F7DE532, 0x58FD7EB6, 0xD01EE900, 0x24ADFFC2,
  0xF4990FC5, 0x9711AAC5, 0x001D7B95, 0x82E5E7D2,
  0x109873F6, 0x00613096, 0xC32D9521, 0xADA121FF,
  0x29908415, 0x7FBB977F, 0xAF9EB3DB, 0x29C9ED2A,
  0x5CE2A465, 0xA730F32C, 0xD0AA3FE8, 0x8A5CC091,
  0xD49E2CE7, 0x0CE454A9, 0xD60ACD86, 0x015F1919,
  0x77079103, 0xDEA03AF6, 0x78A8565E, 0xDEE356DF,
  0x21F05CBE, 0x8B75E387, 0xB3C50651, 0xB8A5C3EF,
  0xD8EEB6D2, 0xE523BE77, 0xC2154529, 0x2F69EFDF,
  0xAFE67AFB, 0xF470C4B2, 0xF3E0EB5B, 0xD6CC9876,
  0x39E4460C, 0x1FDA8538, 0x1987832F, 0xCA007367,
  0xA99144F8, 0x296B299E, 0x492FC295, 0x9266BEAB,
  0xB5676E69, 0x9BD3DDDA, 0xDF7E052F, 0xDB25701C,
  0x1B5E51EE, 0xF65324E6, 0x6AFCE36C, 0x0316CC04,
  0x8644213E, 0xB7DC59D0, 0x7965291F, 0xCCD6FD43,
  0x41823979, 0x932BCDF6, 0xB657C34D, 0x4EDFD282,
  0x7AE5290C, 0x3CB9536B, 0x851E20FE, 0x9833557E,
  0x13ECF0B0, 0xD3FFB372, 0x3F85C5C1, 0x0AEF7ED2
};

static const uint32_t cast_sbox5[256] = {
  0x7EC90C04, 0x2C6E74B9, 0x9B0E66DF, 0xA6337911,
  0xB86A7FFF, 0x1DD358F5, 0x44DD9D44, 0x1731167F,
  0x08FBF1FA, 0xE7F511CC, 0xD2051B00, 0x735ABA00,
  0x2AB722D8, 0x386381CB, 0xACF6243A, 0x69BEFD7A,
  0xE6A2E77F, 0xF0C720CD, 0xC4494816, 0xCCF5C180,
  0x38851640, 0x15B0A848, 0xE68B18CB, 0x4CAADEFF,
  0x5F480A01, 0x0412B2AA, 0x259814FC, 0x41D0EFE2,
  0x4E40B48D, 0x248EB6FB, 0x8DBA1CFE, 0x41A99B02,
  0x1A550A04, 0xBA8F65CB, 0x7251F4E7, 0x95A51725,
  0xC106ECD7, 0x97A5980A, 0xC539B9AA, 0x4D79FE6A,
  0xF2F3F763, 0x68AF8040, 0xED0C9E56, 0x11B4958B,
  0xE1EB5A88, 0x8709E6B0, 0xD7E07156, 0x4E29FEA7,
  0x6366E52D, 0x02D1C000, 0xC4AC8E05, 0x9377F571,
  0x0C05372A, 0x578535F2, 0x2261BE02, 0xD642A0C9,
  0xDF13A280, 0x74B55BD2, 0x682199C0, 0xD421E5EC,
  0x53FB3CE8, 0xC8ADEDB3, 0x28A87FC9, 0x3D959981,
  0x5C1FF900, 0xFE38D399, 0x0C4EFF0B, 0x062407EA,
  0xAA2F4FB1, 0x4FB96976, 0x90C79505, 0xB0A8A774,
  0xEF55A1FF, 0xE59CA2C2, 0xA6B62D27, 0xE66A4263,
  0xDF65001F, 0x0EC50966, 0xDFDD55BC, 0x29DE0655,
  0x911E739A, 0x17AF8975, 0x32C7911C, 0x89F89468,
  0x0D01E980, 0x524755F4, 0x03B63CC9, 0x0CC844B2,
  0xBCF3F0AA, 0x87AC36E9, 0xE53A7426, 0x01B3D82B,
  0x1A9E7449, 0x64EE2D7E, 0xCDDBB1DA, 0x01C94910,
  0xB868BF80, 0x0D26F3FD, 0x9342EDE7, 0x04A5C284,
  0x636737B6, 0x50F5B616, 0xF24766E3, 0x8ECA36C1,
  0x136E05DB, 0xFEF18391, 0xFB887A37, 0xD6E7F7D4,
  0xC7FB7DC9, 0x3063FCDF, 0xB6F589DE, 0xEC2941DA,
  0x26E46695, 0xB7566419, 0xF654EFC5, 0xD08D58B7,
  0x48925401, 0xC1BACB7F, 0xE5FF550F, 0xB6083049,
  0x5BB5D0E8, 0x87D72E5A, 0xAB6A6EE1, 0x223A66CE,
  0xC62BF3CD, 0x9E0885F9, 0x68CB3E47, 0x086C010F,
  0xA21DE820, 0xD18B69DE, 0xF3F65777, 0xFA02C3F6,
  0x407EDAC3, 0xCBB3D550, 0x1793084D, 0xB0D70EBA,
  0x0AB378D5, 0xD951FB0C, 0xDED7DA56, 0x4124BBE4,
  0x94CA0B56, 0x0F5755D1, 0xE0E1E56E, 0x6184B5BE,
  0x580A249F, 0x94F74BC0, 0xE327888E, 0x9F7B5561,
  0xC3DC0280, 0x05687715, 0x646C6BD7, 0x44904DB3,
  0x66B4F0A3, 0xC0F1648A, 0x697ED5AF, 0x49E92FF6,
  0x309E374F, 0x2CB6356A, 0x85808573, 0x4991F840,
  0x76F0AE02, 0x083BE84D, 0x28421C9A, 0x44489406,
  0x736E4CB8, 0xC1092910, 0x8BC95FC6, 0x7D869CF4,
  0x134F616F, 0x2E77118D, 0xB31B2BE1, 0xAA90B472,
  0x3CA5D717, 0x7D161BBA, 0x9CAD9010, 0xAF462BA2,
  0x9FE459D2, 0x45D34559, 0xD9F2DA13, 0xDBC65487,
  0xF3E4F94E, 0x176D486F, 0x097C13EA, 0x631DA5C7,
  0x445F7382, 0x175683F4, 0xCDC66A97, 0x70BE0288,
  0xB3CDCF72, 0x6E5DD2F3, 0x20936079, 0x459B80A5,
  0xBE60E2DB, 0xA9C23101, 0xEBA5315C, 0x224E42F2,
  0x1C5C1572, 0xF6721B2C, 0x1AD2FFF3, 0x8C25404E,
  0x324ED72F, 0x4067B7FD, 0x0523138E, 0x5CA3BC78,
  0xDC0FD66E, 0x75922283, 0x784D6B17, 0x58EBB16E,
  0x44094F85, 0x3F481D87, 0xFCFEAE7B, 0x77B5FF76,
  0x8C2302BF, 0xAAF47556, 0x5F46B02A, 0x2B092801,
  0x3D38F5F7, 0x0CA81F36, 0x52AF4A8A, 0x66D5E7C0,
  0xDF3B0874, 0x95055110, 0x1B5AD7A8, 0xF61ED5AD,
  0x6CF6E479, 0x20758184, 0xD0CEFA65, 0x88F7BE58,
  0x4A046826, 0x0FF6F8F3, 0xA09C7F70, 0x5346ABA0,
  0x5CE96C28, 0xE176EDA3, 0x6BAC307F, 0x376829D2,
  0x85360FA9, 0x17E3FE2A, 0x24B79767, 0xF5A96B20,
  0xD6CD2595, 0x68FF1EBF, 0x7555442C, 0xF19F06BE,
  0xF9E0659A, 0xEEB9491D, 0x34010718, 0xBB30CAB8,
  0xE822FE15, 0x88570983, 0x750E6249, 0xDA627E55,
  0x5E76FFA8, 0xB1534546, 0x6D47DE08, 0xEFE9E7D4
};

static const uint32_t cast_sbox6[256] = {
  0xF6FA8F9D, 0x2CAC6CE1, 0x4CA34867, 0xE2337F7C,
  0x95DB08E7, 0x016843B4, 0xECED5CBC, 0x325553AC,
  0xBF9F0960, 0xDFA1E2ED, 0x83F0579D, 0x63ED86B9,
  0x1AB6A6B8, 0xDE5EBE39, 0xF38FF732, 0x8989B138,
  0x33F14961, 0xC01937BD, 0xF506C6DA, 0xE4625E7E,
  0xA308EA99, 0x4E23E33C, 0x79CBD7CC, 0x48A14367,
  0xA3149619, 0xFEC94BD5, 0xA114174A, 0xEAA01866,
  0xA084DB2D, 0x09A8486F, 0xA888614A, 0x2900AF98,
  0x01665991, 0xE1992863, 0xC8F30C60, 0x2E78EF3C,
  0xD0D51932, 0xCF0FEC14, 0xF7CA07D2, 0xD0A82072,
  0xFD41197E, 0x9305A6B0, 0xE86BE3DA, 0x74BED3CD,
  0x372DA53C, 0x4C7F4448, 0xDAB5D440, 0x6DBA0EC3,
  0x083919A7, 0x9FBAEED9, 0x49DBCFB0, 0x4E670C53,
  0x5C3D9C01, 0x64BDB941, 0x2C0E636A, 0xBA7DD9CD,
  0xEA6F7388, 0xE70BC762, 0x35F29ADB, 0x5C4CDD8D,
  0xF0D48D8C, 0xB88153E2, 0x08A19866, 0x1AE2EAC8,
  0x284CAF89, 0xAA928223, 0x9334BE53, 0x3B3A21BF,
  0x16434BE3, 0x9AEA3906, 0xEFE8C36E, 0xF890CDD9,
  0x80226DAE, 0xC340A4A3, 0xDF7E9C09, 0xA694A807,
  0x5B7C5ECC, 0x221DB3A6, 0x9A69A02F, 0x68818A54,
  0xCEB2296F, 0x53C0843A, 0xFE893655, 0x25BFE68A,
  0xB4628ABC, 0xCF222EBF, 0x25AC6F48, 0xA9A99387,
  0x53BDDB65, 0xE76FFBE7, 0xE967FD78, 0x0BA93563,
  0x8E342BC1, 0xE8A11BE9, 0x4980740D, 0xC8087DFC,
  0x8DE4BF99, 0xA11101A0, 0x7FD37975, 0xDA5A26C0,
  0xE81F994F, 0x9528CD89, 0xFD339FED, 0xB87834BF,
  0x5F04456D, 0x22258698, 0xC9C4C83B, 0x2DC156BE,
  0x4F628DAA, 0x57F55EC5, 0xE2220ABE, 0xD2916EBF,
  0x4EC75B95, 0x24F2C3C0, 0x42D15D99, 0xCD0D7FA0,
  0x7B6E27FF, 0xA8DC8AF0, 0x7345C106, 0xF41E232F,
  0x35162386, 0xE6EA8926, 0x3333B094, 0x157EC6F2,
  0x372B74AF, 0x692573E4, 0xE9A9D848, 0xF3160289,
  0x3A62EF1D, 0xA787E238, 0xF3A5F676, 0x74364853,
  0x20951063, 0x4576698D, 0xB6FAD407, 0x592AF950,
  0x36F73523, 0x4CFB6E87, 0x7DA4CEC0, 0x6C152DAA,
  0xCB0396A8, 0xC50DFE5D, 0xFCD707AB, 0x0921C42F,
  0x89DFF0BB, 0x5FE2BE78, 0x448F4F33, 0x754613C9,
  0x2B05D08D, 0x48B9D585, 0xDC049441, 0xC8098F9B,
  0x7DEDE786, 0xC39A3373, 0x42410005, 0x6A091751,
  0x0EF3C8A6, 0x890072D6, 0x28207682, 0xA9A9F7BE,
  0xBF32679D, 0xD45B5B75, 0xB353FD00, 0xCBB0E358,
  0x830F220A, 0x1F8FB214, 0xD372CF08, 0xCC3C4A13,
  0x8CF63166, 0x061C87BE, 0x88C98F88, 0x6062E397,
  0x47CF8E7A, 0xB6C85283, 0x3CC2ACFB, 0x3FC06976,
  0x4E8F0252, 0x64D8314D, 0xDA3870E3, 0x1E665459,
  0xC10908F0, 0x513021A5, 0x6C5B68B7, 0x822F8AA0,
  0x3007CD3E, 0x74719EEF, 0xDC872681, 0x073340D4,
  0x7E432FD9, 0x0C5EC241, 0x8809286C, 0xF592D891,
  0x08A930F6, 0x957EF305, 0xB7FBFFBD, 0xC266E96F,
  0x6FE4AC98, 0xB173ECC0, 0xBC60B42A, 0x953498DA,
  0xFBA1AE12, 0x2D4BD736, 0x0F25FAAB, 0xA4F3FCEB,
  0xE2969123, 0x257F0C3D, 0x9348AF49, 0x361400BC,
  0xE8816F4A, 0x3814F200, 0xA3F94043, 0x9C7A54C2,
  0xBC704F57, 0xDA41E7F9, 0xC25AD33A, 0x54F4A084,
  0xB17F5505, 0x59357CBE, 0xEDBD15C8, 0x7F97C5AB,
  0xBA5AC7B5, 0xB6F6DEAF, 0x3A479C3A, 0x5302DA25,
  0x653D7E6A, 0x54268D49, 0x51A477EA, 0x5017D55B,
  0xD7D25D88, 0x44136C76, 0x0404A8C8, 0xB8E5A121,
  0xB81A928A, 0x60ED5869, 0x97C55B96, 0xEAEC991B,
  0x29935913, 0x01FDB7F1, 0x088E8DFA, 0x9AB6F6F5,
  0x3B4CBF9F, 0x4A5DE3AB, 0xE6051D35, 0xA0E1D855,
  0xD36B4CF1, 0xF544EDEB, 0xB0E93524, 0xBEBB8FBD,
  0xA2D762CF, 0x49C92F54, 0x38B5F331, 0x7128A454,
  0x48392905, 0xA65B1DB8, 0x851C97BD, 0xD675CF2F
};

static const uint32_t cast_sbox7[256] = {
  0x85E04019, 0x332BF567, 0x662DBFFF, 0xCFC65693,
  0x2A8D7F6F, 0xAB9BC912, 0xDE6008A1, 0x2028DA1F,
  0x0227BCE7, 0x4D642916, 0x18FAC300, 0x50F18B82,
  0x2CB2CB11, 0xB232E75C, 0x4B3695F2, 0xB28707DE,
  0xA05FBCF6, 0xCD4181E9, 0xE150210C, 0xE24EF1BD,
  0xB168C381, 0xFDE4E789, 0x5C79B0D8, 0x1E8BFD43,
  0x4D495001, 0x38BE4341, 0x913CEE1D, 0x92A79C3F,
  0x089766BE, 0xBAEEADF4, 0x1286BECF, 0xB6EACB19,
  0x2660C200, 0x7565BDE4, 0x64241F7A, 0x8248DCA9,
  0xC3B3AD66, 0x28136086, 0x0BD8DFA8, 0x356D1CF2,
  0x107789BE, 0xB3B2E9CE, 0x0502AA8F, 0x0BC0351E,
  0x166BF52A, 0xEB12FF82, 0xE3486911, 0xD34D7516,
  0x4E7B3AFF, 0x5F43671B, 0x9CF6E037, 0x4981AC83,
  0x334266CE, 0x8C9341B7, 0xD0D854C0, 0xCB3A6C88,
  0x47BC2829, 0x4725BA37, 0xA66AD22B, 0x7AD61F1E,
  0x0C5CBAFA, 0x4437F107, 0xB6E79962, 0x42D2D816,
  0x0A961288, 0xE1A5C06E, 0x13749E67, 0x72FC081A,
  0xB1D139F7, 0xF9583745, 0xCF19DF58, 0xBEC3F756,
  0xC06EBA30, 0x07211B24, 0x45C28829, 0xC95E317F,
  0xBC8EC511, 0x38BC46E9, 0xC6E6FA14, 0xBAE8584A,
  0xAD4EBC46, 0x468F508B, 0x7829435F, 0xF124183B,
  0x821DBA9F, 0xAFF60FF4, 0xEA2C4E6D, 0x16E39264,
  0x92544A8B, 0x009B4FC3, 0xABA68CED, 0x9AC96F78,
  0x06A5B79A, 0xB2856E6E, 0x1AEC3CA9, 0xBE838688,
  0x0E0804E9, 0x55F1BE56, 0xE7E5363B, 0xB3A1F25D,
  0xF7DEBB85, 0x61FE033C, 0x16746233, 0x3C034C28,
  0xDA6D0C74, 0x79AAC56C, 0x3CE4E1AD, 0x51F0C802,
  0x98F8F35A, 0x1626A49F, 0xEED82B29, 0x1D382FE3,
  0x0C4FB99A, 0xBB325778, 0x3EC6D97B, 0x6E77A6A9,
  0xCB658B5C, 0xD45230C7, 0x2BD1408B, 0x60C03EB7,
  0xB9068D78, 0xA33754F4, 0xF430C87D, 0xC8A71302,
  0xB96D8C32, 0xEBD4E7BE, 0xBE8B9D2D, 0x7979FB06,
  0xE7225308, 0x8B75CF77, 0x11EF8DA4, 0xE083C858,
  0x8D6B786F, 0x5A6317A6, 0xFA5CF7A0, 0x5DDA0033,
  0xF28EBFB0, 0xF5B9C310, 0xA0EAC280, 0x08B9767A,
  0xA3D9D2B0, 0x79D34217, 0x021A718D, 0x9AC6336A,
  0x2711FD60, 0x438050E3, 0x069908A8, 0x3D7FEDC4,
  0x826D2BEF, 0x4EEB8476, 0x488DCF25, 0x36C9D566,
  0x28E74E41, 0xC2610ACA, 0x3D49A9CF, 0xBAE3B9DF,
  0xB65F8DE6, 0x92AEAF64, 0x3AC7D5E6, 0x9EA80509,
  0xF22B017D, 0xA4173F70, 0xDD1E16C3, 0x15E0D7F9,
  0x50B1B887, 0x2B9F4FD5, 0x625ABA82, 0x6A017962,
  0x2EC01B9C, 0x15488AA9, 0xD716E740, 0x40055A2C,
  0x93D29A22, 0xE32DBF9A, 0x058745B9, 0x3453DC1E,
  0xD699296E, 0x496CFF6F, 0x1C9F4986, 0xDFE2ED07,
  0xB87242D1, 0x19DE7EAE, 0x053E561A, 0x15AD6F8C,
  0x66626C1C, 0x7154C24C, 0xEA082B2A, 0x93EB2939,
  0x17DCB0F0, 0x58D4F2AE, 0x9EA294FB, 0x52CF564C,
  0x9883FE66, 0x2EC40581, 0x763953C3, 0x01D6692E,
  0xD3A0C108, 0xA1E7160E, 0xE4F2DFA6, 0x693ED285,
  0x74904698, 0x4C2B0EDD, 0x4F757656, 0x5D393378,
  0xA132234F, 0x3D321C5D, 0xC3F5E194, 0x4B269301,
  0xC79F022F, 0x3C997E7E, 0x5E4F9504, 0x3FFAFBBD,
  0x76F7AD0E, 0x296693F4, 0x3D1FCE6F, 0xC61E45BE,
  0xD3B5AB34, 0xF72BF9B7, 0x1B0434C0, 0x4E72B567,
  0x5592A33D, 0xB5229301, 0xCFD2A87F, 0x60AEB767,
  0x1814386B, 0x30BCC33D, 0x38A0C07D, 0xFD1606F2,
  0xC363519B, 0x589DD390, 0x5479F8E6, 0x1CB8D647,
  0x97FD61A9, 0xEA7759F4, 0x2D57539D, 0x569A58CF,
  0xE84E63AD, 0x462E1B78, 0x6580F87E, 0xF3817914,
  0x91DA55F4, 0x40A230F3, 0xD1988F35, 0xB6E318D2,
  0x3FFA50BC, 0x3D40F021, 0xC3C0BDAE, 0x4958C24C,
  0x518F36B2, 0x84B1D370, 0x0FEDCE83, 0x878DDADA,
  0xF2A279C7, 0x94E01BE8, 0x90716F4B, 0x954B8AA3
};

static const uint32_t cast_sbox8[256] = {
  0xE216300D, 0xBBDDFFFC, 0xA7EBDABD, 0x35648095,
  0x7789F8B7, 0xE6C1121B, 0x0E241600, 0x052CE8B5,
  0x11A9CFB0, 0xE5952F11, 0xECE7990A, 0x9386D174,
  0x2A42931C, 0x76E38111, 0xB12DEF3A, 0x37DDDDFC,
  0xDE9ADEB1, 0x0A0CC32C, 0xBE197029, 0x84A00940,
  0xBB243A0F, 0xB4D137CF, 0xB44E79F0, 0x049EEDFD,
  0x0B15A15D, 0x480D3168, 0x8BBBDE5A, 0x669DED42,
  0xC7ECE831, 0x3F8F95E7, 0x72DF191B, 0x7580330D,
  0x94074251, 0x5C7DCDFA, 0xABBE6D63, 0xAA402164,
  0xB301D40A, 0x02E7D1CA, 0x53571DAE, 0x7A3182A2,
  0x12A8DDEC, 0xFDAA335D, 0x176F43E8, 0x71FB46D4,
  0x38129022, 0xCE949AD4, 0xB84769AD, 0x965BD862,
  0x82F3D055, 0x66FB9767, 0x15B80B4E, 0x1D5B47A0,
  0x4CFDE06F, 0xC28EC4B8, 0x57E8726E, 0x647A78FC,
  0x99865D44, 0x608BD593, 0x6C200E03, 0x39DC5FF6,
  0x5D0B00A3, 0xAE63AFF2, 0x7E8BD632, 0x70108C0C,
  0xBBD35049, 0x2998DF04, 0x980CF42A, 0x9B6DF491,
  0x9E7EDD53, 0x06918548, 0x58CB7E07, 0x3B74EF2E,
  0x522FFFB1, 0xD24708CC, 0x1C7E27CD, 0xA4EB215B,
  0x3CF1D2E2, 0x19B47A38, 0x424F7618, 0x35856039,
  0x9D17DEE7, 0x27EB35E6, 0xC9AFF67B, 0x36BAF5B8,
  0x09C467CD, 0xC18910B1, 0xE11DBF7B, 0x06CD1AF8,
  0x7170C608, 0x2D5E3354, 0xD4DE495A, 0x64C6D006,
  0xBCC0C62C, 0x3DD00DB3, 0x708F8F34, 0x77D51B42,
  0x264F620F, 0x24B8D2BF, 0x15C1B79E, 0x46A52564,
  0xF8D7E54E, 0x3E378160, 0x7895CDA5, 0x859C15A5,
  0xE6459788, 0xC37BC75F, 0xDB07BA0C, 0x0676A3AB,
  0x7F229B1E, 0x31842E7B, 0x24259FD7, 0xF8BEF472,
  0x835FFCB8, 0x6DF4C1F2, 0x96F5B195, 0xFD0AF0FC,
  0xB0FE134C, 0xE2506D3D, 0x4F9B12EA, 0xF215F225,
  0xA223736F, 0x9FB4C428, 0x25D04979, 0x34C713F8,
  0xC4618187, 0xEA7A6E98, 0x7CD16EFC, 0x1436876C,
  0xF1544107, 0xBEDEEE14, 0x56E9AF27, 0xA04AA441,
  0x3CF7C899, 0x92ECBAE6, 0xDD67016D, 0x151682EB,
  0xA842EEDF, 0xFDBA60B4, 0xF1907B75, 0x20E3030F,
  0x24D8C29E, 0xE139673B, 0xEFA63FB8, 0x71873054,
  0xB6F2CF3B, 0x9F326442, 0xCB15A4CC, 0xB01A4504,
  0xF1E47D8D, 0x844A1BE5, 0xBAE7DFDC, 0x42CBDA70,
  0xCD7DAE0A, 0x57E85B7A, 0xD53F5AF6, 0x20CF4D8C,
  0xCEA4D428, 0x79D130A4, 0x3486EBFB, 0x33D3CDDC,
  0x77853B53, 0x37EFFCB5, 0xC5068778, 0xE580B3E6,
  0x4E68B8F4, 0xC5C8B37E, 0x0D809EA2, 0x398FEB7C,
  0x132A4F94, 0x43B7950E, 0x2FEE7D1C, 0x223613BD,
  0xDD06CAA2, 0x37DF932B, 0xC4248289, 0xACF3EBC3,
  0x5715F6B7, 0xEF3478DD, 0xF267616F, 0xC148CBE4,
  0x9052815E, 0x5E410FAB, 0xB48A2465, 0x2EDA7FA4,
  0xE87B40E4, 0xE98EA084, 0x5889E9E1, 0xEFD390FC,
  0xDD07D35B, 0xDB485694, 0x38D7E5B2, 0x57720101,
  0x730EDEBC, 0x5B643113, 0x94917E4F, 0x503C2FBA,
  0x646F1282, 0x7523D24A, 0xE0779695, 0xF9C17A8F,
  0x7A5B2121, 0xD187B896, 0x29263A4D, 0xBA510CDF,
  0x81F47C9F, 0xAD1163ED, 0xEA7B5965, 0x1A00726E,
  0x11403092, 0x00DA6D77, 0x4A0CDD61, 0xAD1F4603,
  0x605BDFB0, 0x9EEDC364, 0x22EBE6A8, 0xCEE7D28A,
  0xA0E736A0, 0x5564A6B9, 0x10853209, 0xC7EB8F37,
  0x2DE705CA, 0x8951570F, 0xDF09822B, 0xBD691A6C,
  0xAA12E4F2, 0x87451C0F, 0xE0F6A27A, 0x3ADA4819,
  0x4CF1764F, 0x0D771C2B, 0x67CDB156, 0x350D8384,
  0x5938FA0F, 0x42399EF3, 0x36997B07, 0x0E84093D,
  0x4AA93E61, 0x8360D87B, 0x1FA98B0C, 0x1149382C,
  0xE97625A5, 0x0614D1B7, 0x0E25244B, 0x0C768347,
  0x589E8D82, 0x0D2059D1, 0xA466BB1E, 0xF8DA0A82,
  0x04F19130, 0xBA6E4EC0, 0x99265164, 0x1EE7230D,
  0x50B2AD80, 0xEAEE6801, 0x8DB2A283, 0xEA8BF59E
};

",1,0
919,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/libgcrypt/hash-common.h,True,"/* hash-common.h - Declarations of common code for hash algorithms.
 * Copyright (C) 2008 Free Software Foundation, Inc.
 *
 * This file is part of Libgcrypt.
 *
 * Libgcrypt is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Libgcrypt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef GCRY_HASH_COMMON_H
#define GCRY_HASH_COMMON_H

#include ""types.h""


const char * _gcry_hash_selftest_check_one
/**/         (int algo,
              int datamode, const void *data, size_t datalen,
              const void *expect, size_t expectlen);

/* Type for the md_write helper function.  */
typedef unsigned int (*_gcry_md_block_write_t) (void *c,
						const unsigned char *blks,
						size_t nblks);

#if (defined(USE_SHA512) || defined(USE_WHIRLPOOL))
/* SHA-512 and Whirlpool needs u64. SHA-512 needs larger buffer. */
# define MD_BLOCK_MAX_BLOCKSIZE 128
# define MD_NBLOCKS_TYPE u64
#else
# define MD_BLOCK_MAX_BLOCKSIZE 64
# define MD_NBLOCKS_TYPE u32
#endif

/* SHA1 needs 2x64 bytes and SHA-512 needs 128 bytes. */
#define MD_BLOCK_CTX_BUFFER_SIZE 128

typedef struct gcry_md_block_ctx
{
    byte buf[MD_BLOCK_CTX_BUFFER_SIZE];
    MD_NBLOCKS_TYPE nblocks;
    MD_NBLOCKS_TYPE nblocks_high;
    int count;
    size_t blocksize;
    _gcry_md_block_write_t bwrite;
} gcry_md_block_ctx_t;


void
_gcry_md_block_write( void *context, const void *inbuf_arg, size_t inlen);

#endif /*GCRY_HASH_COMMON_H*/
",1,0
1017,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/open_ssl/rc2/rc2_local.h,True,"/*
 * Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the ""License"").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#undef c2l
#define c2l(c,l)        (l =((unsigned long)(*((c)++)))    , \
                         l|=((unsigned long)(*((c)++)))<< 8L, \
                         l|=((unsigned long)(*((c)++)))<<16L, \
                         l|=((unsigned long)(*((c)++)))<<24L)

/* NOTE - c is not incremented as per c2l */
#undef c2ln
#define c2ln(c,l1,l2,n) { \
                        c+=n; \
                        l1=l2=0; \
                        switch (n) { \
                        case 8: l2 =((unsigned long)(*(--(c))))<<24L; \
                        /* fall thru */                               \
                        case 7: l2|=((unsigned long)(*(--(c))))<<16L; \
                        /* fall thru */                               \
                        case 6: l2|=((unsigned long)(*(--(c))))<< 8L; \
                        /* fall thru */                               \
                        case 5: l2|=((unsigned long)(*(--(c))));      \
                        /* fall thru */                               \
                        case 4: l1 =((unsigned long)(*(--(c))))<<24L; \
                        /* fall thru */                               \
                        case 3: l1|=((unsigned long)(*(--(c))))<<16L; \
                        /* fall thru */                               \
                        case 2: l1|=((unsigned long)(*(--(c))))<< 8L; \
                        /* fall thru */                               \
                        case 1: l1|=((unsigned long)(*(--(c))));      \
                                } \
                        }

#undef l2c
#define l2c(l,c)        (*((c)++)=(unsigned char)(((l)     )&0xff), \
                         *((c)++)=(unsigned char)(((l)>> 8L)&0xff), \
                         *((c)++)=(unsigned char)(((l)>>16L)&0xff), \
                         *((c)++)=(unsigned char)(((l)>>24L)&0xff))

/* NOTE - c is not incremented as per l2c */
#undef l2cn
#define l2cn(l1,l2,c,n) { \
                        c+=n; \
                        switch (n) { \
                        case 8: *(--(c))=(unsigned char)(((l2)>>24L)&0xff); \
                        /* fall thru */                                     \
                        case 7: *(--(c))=(unsigned char)(((l2)>>16L)&0xff); \
                        /* fall thru */                                     \
                        case 6: *(--(c))=(unsigned char)(((l2)>> 8L)&0xff); \
                        /* fall thru */                                     \
                        case 5: *(--(c))=(unsigned char)(((l2)     )&0xff); \
                        /* fall thru */                                     \
                        case 4: *(--(c))=(unsigned char)(((l1)>>24L)&0xff); \
                        /* fall thru */                                     \
                        case 3: *(--(c))=(unsigned char)(((l1)>>16L)&0xff); \
                        /* fall thru */                                     \
                        case 2: *(--(c))=(unsigned char)(((l1)>> 8L)&0xff); \
                        /* fall thru */                                     \
                        case 1: *(--(c))=(unsigned char)(((l1)     )&0xff); \
                                } \
                        }

/* NOTE - c is not incremented as per n2l */
#define n2ln(c,l1,l2,n) { \
                        c+=n; \
                        l1=l2=0; \
                        switch (n) { \
                        case 8: l2 =((unsigned long)(*(--(c))))    ; \
                        /* fall thru */                              \
                        case 7: l2|=((unsigned long)(*(--(c))))<< 8; \
                        /* fall thru */                              \
                        case 6: l2|=((unsigned long)(*(--(c))))<<16; \
                        /* fall thru */                              \
                        case 5: l2|=((unsigned long)(*(--(c))))<<24; \
                        /* fall thru */                              \
                        case 4: l1 =((unsigned long)(*(--(c))))    ; \
                        /* fall thru */                              \
                        case 3: l1|=((unsigned long)(*(--(c))))<< 8; \
                        /* fall thru */                              \
                        case 2: l1|=((unsigned long)(*(--(c))))<<16; \
                        /* fall thru */                              \
                        case 1: l1|=((unsigned long)(*(--(c))))<<24; \
                                } \
                        }

/* NOTE - c is not incremented as per l2n */
#define l2nn(l1,l2,c,n) { \
                        c+=n; \
                        switch (n) { \
                        case 8: *(--(c))=(unsigned char)(((l2)    )&0xff); \
                        /* fall thru */                                    \
                        case 7: *(--(c))=(unsigned char)(((l2)>> 8)&0xff); \
                        /* fall thru */                                    \
                        case 6: *(--(c))=(unsigned char)(((l2)>>16)&0xff); \
                        /* fall thru */                                    \
                        case 5: *(--(c))=(unsigned char)(((l2)>>24)&0xff); \
                        /* fall thru */                                    \
                        case 4: *(--(c))=(unsigned char)(((l1)    )&0xff); \
                        /* fall thru */                                    \
                        case 3: *(--(c))=(unsigned char)(((l1)>> 8)&0xff); \
                        /* fall thru */                                    \
                        case 2: *(--(c))=(unsigned char)(((l1)>>16)&0xff); \
                        /* fall thru */                                    \
                        case 1: *(--(c))=(unsigned char)(((l1)>>24)&0xff); \
                                } \
                        }

#undef n2l
#define n2l(c,l)        (l =((unsigned long)(*((c)++)))<<24L, \
                         l|=((unsigned long)(*((c)++)))<<16L, \
                         l|=((unsigned long)(*((c)++)))<< 8L, \
                         l|=((unsigned long)(*((c)++))))

#undef l2n
#define l2n(l,c)        (*((c)++)=(unsigned char)(((l)>>24L)&0xff), \
                         *((c)++)=(unsigned char)(((l)>>16L)&0xff), \
                         *((c)++)=(unsigned char)(((l)>> 8L)&0xff), \
                         *((c)++)=(unsigned char)(((l)     )&0xff))

#define C_RC2(n) \
        t=(x0+(x1& ~x3)+(x2&x3)+ *(p0++))&0xffff; \
        x0=(t<<1)|(t>>15); \
        t=(x1+(x2& ~x0)+(x3&x0)+ *(p0++))&0xffff; \
        x1=(t<<2)|(t>>14); \
        t=(x2+(x3& ~x1)+(x0&x1)+ *(p0++))&0xffff; \
        x2=(t<<3)|(t>>13); \
        t=(x3+(x0& ~x2)+(x1&x2)+ *(p0++))&0xffff; \
        x3=(t<<5)|(t>>11);
",1,0
1248,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/libsodium/crypto_scalarmult/curve25519/sandy2x/fe51.h,True,"/*
   This file is adapted from amd64-51/fe25519.h:
   'fe25519' is renamed as 'fe51';
   All the redundant functions are removed;
   New function fe51_nsquare is introduced.
*/

#ifndef fe51_H
#define fe51_H

#ifdef __cplusplus
extern ""C"" {
#endif

#include <stdint.h>
#include <stdlib.h>

#include ""fe51_namespace.h""

typedef struct
{
    uint64_t v[5];
}
fe51;

extern void fe51_pack(unsigned char *, const fe51 *);
extern void fe51_mul(fe51 *, const fe51 *, const fe51 *);
extern void fe51_nsquare(fe51 *, const fe51 *, int);
extern void fe51_invert(fe51 *, const fe51 *);

#ifdef __cplusplus
}
#endif

#endif
",1,0
1302,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/ripemd160-internal.h,True,"/* ripemd160-internal.h

   RIPEMD-160 hash function.

   Copyright (C) 2011 Andres Mejia

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#ifndef NETTLE_RIPEMD160_INTERNAL_H_INCLUDED
#define NETTLE_RIPEMD160_INTERNAL_H_INCLUDED


/* Internal compression function. STATE points to 5 uint32_t words,
   and DATA points to 64 bytes of input data, possibly unaligned. */
void
_nettle_ripemd160_compress(uint32_t *state, const uint8_t *data);

#endif /* NETTLE_RIPEMD160_INTERNAL_H_INCLUDED */
",1,0
1395,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/libgcrypt/asm-poly1305-amd64.h,True,"/* asm-common-amd64.h  -  Poly1305 macros for AMD64 assembly
 *
 * Copyright (C) 2019 Jussi Kivilinna <jussi.kivilinna@iki.fi>
 *
 * This file is part of Libgcrypt.
 *
 * Libgcrypt is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Libgcrypt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef GCRY_ASM_POLY1305_AMD64_H
#define GCRY_ASM_POLY1305_AMD64_H

#include ""asm-common-amd64.h""

/**********************************************************************
  poly1305 for stitched chacha20-poly1305 AMD64 implementations
 **********************************************************************/

#define POLY_RSTATE    %r8
#define POLY_RSRC      %r9

#define POLY_R_H0      %rbx
#define POLY_R_H1      %rcx
#define POLY_R_H2      %r10
#define POLY_R_H2d     %r10d
#define POLY_R_R0      %r11
#define POLY_R_R1_MUL5 %r12
#define POLY_R_X0_HI   %r13
#define POLY_R_X0_LO   %r14
#define POLY_R_X1_HI   %r15
#define POLY_R_X1_LO   %rsi

#define POLY_S_R0      (4 * 4 + 0 * 8)(POLY_RSTATE)
#define POLY_S_R1      (4 * 4 + 1 * 8)(POLY_RSTATE)
#define POLY_S_H0      (4 * 4 + 2 * 8 + 0 * 8)(POLY_RSTATE)
#define POLY_S_H1      (4 * 4 + 2 * 8 + 1 * 8)(POLY_RSTATE)
#define POLY_S_H2d     (4 * 4 + 2 * 8 + 2 * 8)(POLY_RSTATE)

#define POLY1305_LOAD_STATE() \
	movq POLY_S_H0, POLY_R_H0; \
	movq POLY_S_H1, POLY_R_H1; \
	movl POLY_S_H2d, POLY_R_H2d; \
	movq POLY_S_R0, POLY_R_R0; \
	movq POLY_S_R1, POLY_R_R1_MUL5; \
	shrq $2, POLY_R_R1_MUL5; \
	addq POLY_S_R1, POLY_R_R1_MUL5;

#define POLY1305_STORE_STATE() \
	movq POLY_R_H0, POLY_S_H0; \
	movq POLY_R_H1, POLY_S_H1; \
	movl POLY_R_H2d, POLY_S_H2d;

/* a = h + m */
#define POLY1305_BLOCK_PART1(src_offset) \
	addq ((src_offset) + 0 * 8)(POLY_RSRC), POLY_R_H0; \
	adcq ((src_offset) + 1 * 8)(POLY_RSRC), POLY_R_H1; \
	adcl $1, POLY_R_H2d; \
	\
	/* h = a * r (partial mod 2^130-5): */ \
	\
	/* h0 * r1 */ \
	movq POLY_R_H0, %rax; \
	mulq POLY_S_R1; \
	movq %rax, POLY_R_X1_LO; \
	movq %rdx, POLY_R_X1_HI;

#define POLY1305_BLOCK_PART2() \
	\
	/* h0 * r0 */ \
	movq POLY_R_H0, %rax; \
	mulq POLY_R_R0; \
	movq %rax, POLY_R_X0_LO; \
	movq %rdx, POLY_R_X0_HI;

#define POLY1305_BLOCK_PART3() \
	\
	/* h1 * r0 */ \
	movq POLY_R_H1, %rax; \
	mulq POLY_R_R0; \
	addq %rax, POLY_R_X1_LO; \
	adcq %rdx, POLY_R_X1_HI; \
	\
	/* h1 * r1 mod 2^130-5 */ \
	movq POLY_R_R1_MUL5, %rax; \
	mulq POLY_R_H1;

#define POLY1305_BLOCK_PART4() \
	movq POLY_R_H2, POLY_R_H1; \
	imulq POLY_R_R1_MUL5, POLY_R_H1; /* h2 * r1 mod 2^130-5 */ \
	addq %rax, POLY_R_X0_LO; \
	adcq %rdx, POLY_R_X0_HI; \
	imulq POLY_R_R0, POLY_R_H2;      /* h2 * r0 */ \
	addq POLY_R_X1_LO, POLY_R_H1; \
	adcq POLY_R_X1_HI, POLY_R_H2;

#define POLY1305_BLOCK_PART5() \
	\
	/* carry propagation */ \
	movq POLY_R_H2, POLY_R_H0; \
	andl $3, POLY_R_H2d; \
	shrq $2, POLY_R_H0; \
	leaq (POLY_R_H0, POLY_R_H0, 4), POLY_R_H0; \
	addq POLY_R_X0_LO, POLY_R_H0; \
	adcq POLY_R_X0_HI, POLY_R_H1; \
	adcl $0, POLY_R_H2d;

#ifdef TESTING_POLY1305_ASM
/* for testing only, mixed C/asm poly1305.c is marginally faster (~2%). */
.align 8
.globl _gcry_poly1305_amd64_ssse3_blocks1
ELF(.type _gcry_poly1305_amd64_ssse3_blocks1,@function;)

_gcry_poly1305_amd64_ssse3_blocks1:
	/* input:
	 *	%rdi: poly1305-state
	 *	%rsi: src
	 *	%rdx: nblks
	 */
	pushq %rbp;
	movq %rsp, %rbp;

	subq $(10 * 8), %rsp;
	movq %rbx, (1 * 8)(%rsp);
	movq %r12, (2 * 8)(%rsp);
	movq %r13, (3 * 8)(%rsp);
	movq %r14, (4 * 8)(%rsp);
	movq %r15, (5 * 8)(%rsp);

	movq %rdx, (8 * 8)(%rsp); # NBLKS

	movq %rdi, POLY_RSTATE;
	movq %rsi, POLY_RSRC;

	POLY1305_LOAD_STATE();

.L_poly1:
	POLY1305_BLOCK_PART1(0 * 16);
	POLY1305_BLOCK_PART2();
	POLY1305_BLOCK_PART3();
	POLY1305_BLOCK_PART4();
	POLY1305_BLOCK_PART5();

	subq $1, (8 * 8)(%rsp); # NBLKS
	leaq (16)(POLY_RSRC), POLY_RSRC;
	jnz .L_poly1;

	POLY1305_STORE_STATE();

	movq (1 * 8)(%rsp), %rbx;
	movq (2 * 8)(%rsp), %r12;
	movq (3 * 8)(%rsp), %r13;
	movq (4 * 8)(%rsp), %r14;
	movq (5 * 8)(%rsp), %r15;

	xorl %eax, %eax;
	leave
	ret;
#endif

#endif /* GCRY_ASM_POLY1305_AMD64_H */
",1,0
1401,crypto-competitions,ocrypt.h,True,"/*
 * Omega Crypt (ocrypt)
 * Brandon Enright <bmenrigh@brandonenright.net>
 * http://www.brandonenright.net/ocrypt/
 *
 * 2014-03-31
 *
 * Placed in the public domain.
 *
 * Submitted to the Password Hashing Competition
 * https://password-hashing.net/index.html
 */


#ifndef OCRYPT_H
#define OCRYPT_H

#include <string.h>
#include <stdint.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

#include ""chacha-wrapper.h""
#include ""cubehash.h""

int ocrypt(uint8_t *, size_t, uint8_t *, size_t,
	   uint8_t *, size_t, uint8_t *, size_t,
	   unsigned int, unsigned int);


#define OCRYPT_PARAMS_SIZE ((256 * 3) + 3)

#define OCRYPT_BASE_TCOST 17
#define OCRYPT_BASE_MCOST 17
#define OCRYPT_MAX_TCOST  14 /* user input, actually 17 + 14 = 31 */
#define OCRYPT_MAX_MCOST  14 /* user input, actually 17 + 14 = 31 */

/* Omega Crypt return values */
#define OCRYPT_SUCCESS  0
#define OCRYPT_E_OLEN   1
#define OCRYPT_E_PLEN   2
#define OCRYPT_E_SLEN   3
#define OCRYPT_E_KLEN   4
#define OCRYPT_E_MEM    5
#define OCRYPT_E_TCOST  6
#define OCRYPT_E_MCOST  7

#endif
",1,0
1515,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/chacha-set-key.c,False,"/* chacha-set-key.c

   Copyright (C) 2014 Niels MÃ¶ller

   This file is part of GNU Nettle.

   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:

     * the GNU Lesser General Public License as published by the Free
       Software Foundation; either version 3 of the License, or (at your
       option) any later version.

   or

     * the GNU General Public License as published by the Free
       Software Foundation; either version 2 of the License, or (at your
       option) any later version.

   or both in parallel, as here.

   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program.  If
   not, see http://www.gnu.org/licenses/.
*/

#if HAVE_CONFIG_H
# include ""config.h""
#endif

#include <stdlib.h>
#include <string.h>

#include ""chacha.h""

#include ""macros.h""

void
chacha_set_key(struct chacha_ctx *ctx, const uint8_t *key)
{
  static const uint32_t sigma[4] = {
    /* ""expand 32-byte k"" */
    0x61707865, 0x3320646e, 0x79622d32, 0x6b206574
  };
  ctx->state[4] = LE_READ_UINT32(key + 0);
  ctx->state[5] = LE_READ_UINT32(key + 4);
  ctx->state[6] = LE_READ_UINT32(key + 8);
  ctx->state[7] = LE_READ_UINT32(key + 12);

  ctx->state[8]  = LE_READ_UINT32(key + 16);
  ctx->state[9]  = LE_READ_UINT32(key + 20);
  ctx->state[10] = LE_READ_UINT32(key + 24);
  ctx->state[11] = LE_READ_UINT32(key + 28);

  memcpy (ctx->state, sigma, sizeof(sigma));
}
",1,0
1582,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/eccparams.c,False,"#include <stdio.h>
#include <stdlib.h>

int
main (int argc, char **argv)
{
  unsigned bits;
  unsigned max;
  unsigned c;
  if (argc < 3)
    {
    usage:
      fprintf(stderr, ""Usage: %s: exp-bits max-entries\n"", argv[0]);
      return EXIT_FAILURE;
    }
  bits = atoi(argv[1]);
  if (bits < 2)
    goto usage;
  max = atoi(argv[2]);
  if ( max < 2)
    goto usage;

  for (c = 3; (1<<c) <= max; c++)
    {
      unsigned b;
      for (b = 1;; b++)
	{
	  unsigned s = (1<<c) * b;
	  unsigned k;
	  if (s > max)
	    break;
	  k = (bits + (c*b) - 1) / (c * b);
	  printf(""k = %2u, c = %2u, S = %3u, T = %3u (%3u A + %2u D)\n"",
		 k, c, s, (b+1)*k, b*k, k);
	}
    }
  return 0;
}
",1,0
1609,crypto-library,/Users/red/Documents/CP/crypto_code_detection/data/crypto-library/files/nettle/mini-gmp.h,True,"/* mini-gmp, a minimalistic implementation of a GNU GMP subset.

Copyright 2011-2015 Free Software Foundation, Inc.

This file is part of the GNU MP Library.

The GNU MP Library is free software; you can redistribute it and/or modify
it under the terms of either:

  * the GNU Lesser General Public License as published by the Free
    Software Foundation; either version 3 of the License, or (at your
    option) any later version.

or

  * the GNU General Public License as published by the Free Software
    Foundation; either version 2 of the License, or (at your option) any
    later version.

or both in parallel, as here.

The GNU MP Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received copies of the GNU General Public License and the
GNU Lesser General Public License along with the GNU MP Library.  If not,
see https://www.gnu.org/licenses/.  */

/* About mini-gmp: This is a minimal implementation of a subset of the
   GMP interface. It is intended for inclusion into applications which
   have modest bignums needs, as a fallback when the real GMP library
   is not installed.

   This file defines the public interface. */

#ifndef __MINI_GMP_H__
#define __MINI_GMP_H__

/* For size_t */
#include <stddef.h>

#if defined (__cplusplus)
extern ""C"" {
#endif

void mp_set_memory_functions (void *(*) (size_t),
			      void *(*) (void *, size_t, size_t),
			      void (*) (void *, size_t));

void mp_get_memory_functions (void *(**) (size_t),
			      void *(**) (void *, size_t, size_t),
			      void (**) (void *, size_t));

typedef unsigned long mp_limb_t;
typedef long mp_size_t;
typedef unsigned long mp_bitcnt_t;

typedef mp_limb_t *mp_ptr;
typedef const mp_limb_t *mp_srcptr;

typedef struct
{
  int _mp_alloc;		/* Number of *limbs* allocated and pointed
				   to by the _mp_d field.  */
  int _mp_size;			/* abs(_mp_size) is the number of limbs the
				   last field points to.  If _mp_size is
				   negative this is a negative number.  */
  mp_limb_t *_mp_d;		/* Pointer to the limbs.  */
} __mpz_struct;

typedef __mpz_struct mpz_t[1];

typedef __mpz_struct *mpz_ptr;
typedef const __mpz_struct *mpz_srcptr;

extern const int mp_bits_per_limb;

void mpn_copyi (mp_ptr, mp_srcptr, mp_size_t);
void mpn_copyd (mp_ptr, mp_srcptr, mp_size_t);
void mpn_zero (mp_ptr, mp_size_t);

int mpn_cmp (mp_srcptr, mp_srcptr, mp_size_t);
int mpn_zero_p (mp_srcptr, mp_size_t);

mp_limb_t mpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t mpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
mp_limb_t mpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);

mp_limb_t mpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t mpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
mp_limb_t mpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);

mp_limb_t mpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t mpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);
mp_limb_t mpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);

mp_limb_t mpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);
void mpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);
void mpn_sqr (mp_ptr, mp_srcptr, mp_size_t);
int mpn_perfect_square_p (mp_srcptr, mp_size_t);
mp_size_t mpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);

mp_limb_t mpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);
mp_limb_t mpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);

mp_bitcnt_t mpn_scan0 (mp_srcptr, mp_bitcnt_t);
mp_bitcnt_t mpn_scan1 (mp_srcptr, mp_bitcnt_t);

void mpn_com (mp_ptr, mp_srcptr, mp_size_t);
mp_limb_t mpn_neg (mp_ptr, mp_srcptr, mp_size_t);

mp_bitcnt_t mpn_popcount (mp_srcptr, mp_size_t);

mp_limb_t mpn_invert_3by2 (mp_limb_t, mp_limb_t);
#define mpn_invert_limb(x) mpn_invert_3by2 ((x), 0)

size_t mpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);
mp_size_t mpn_set_str (mp_ptr, const unsigned char *, size_t, int);

void mpz_init (mpz_t);
void mpz_init2 (mpz_t, mp_bitcnt_t);
void mpz_clear (mpz_t);

#define mpz_odd_p(z)   (((z)->_mp_size != 0) & (int) (z)->_mp_d[0])
#define mpz_even_p(z)  (! mpz_odd_p (z))

int mpz_sgn (const mpz_t);
int mpz_cmp_si (const mpz_t, long);
int mpz_cmp_ui (const mpz_t, unsigned long);
int mpz_cmp (const mpz_t, const mpz_t);
int mpz_cmpabs_ui (const mpz_t, unsigned long);
int mpz_cmpabs (const mpz_t, const mpz_t);
int mpz_cmp_d (const mpz_t, double);
int mpz_cmpabs_d (const mpz_t, double);

void mpz_abs (mpz_t, const mpz_t);
void mpz_neg (mpz_t, const mpz_t);
void mpz_swap (mpz_t, mpz_t);

void mpz_add_ui (mpz_t, const mpz_t, unsigned long);
void mpz_add (mpz_t, const mpz_t, const mpz_t);
void mpz_sub_ui (mpz_t, const mpz_t, unsigned long);
void mpz_ui_sub (mpz_t, unsigned long, const mpz_t);
void mpz_sub (mpz_t, const mpz_t, const mpz_t);

void mpz_mul_si (mpz_t, const mpz_t, long int);
void mpz_mul_ui (mpz_t, const mpz_t, unsigned long int);
void mpz_mul (mpz_t, const mpz_t, const mpz_t);
void mpz_mul_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_addmul_ui (mpz_t, const mpz_t, unsigned long int);
void mpz_addmul (mpz_t, const mpz_t, const mpz_t);
void mpz_submul_ui (mpz_t, const mpz_t, unsigned long int);
void mpz_submul (mpz_t, const mpz_t, const mpz_t);

void mpz_cdiv_qr (mpz_t, mpz_t, const mpz_t, const mpz_t);
void mpz_fdiv_qr (mpz_t, mpz_t, const mpz_t, const mpz_t);
void mpz_tdiv_qr (mpz_t, mpz_t, const mpz_t, const mpz_t);
void mpz_cdiv_q (mpz_t, const mpz_t, const mpz_t);
void mpz_fdiv_q (mpz_t, const mpz_t, const mpz_t);
void mpz_tdiv_q (mpz_t, const mpz_t, const mpz_t);
void mpz_cdiv_r (mpz_t, const mpz_t, const mpz_t);
void mpz_fdiv_r (mpz_t, const mpz_t, const mpz_t);
void mpz_tdiv_r (mpz_t, const mpz_t, const mpz_t);

void mpz_cdiv_q_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_fdiv_q_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_tdiv_q_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_cdiv_r_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_fdiv_r_2exp (mpz_t, const mpz_t, mp_bitcnt_t);
void mpz_tdiv_r_2exp (mpz_t, const mpz_t, mp_bitcnt_t);

void mpz_mod (mpz_t, const mpz_t, const mpz_t);

void mpz_divexact (mpz_t, const mpz_t, const mpz_t);

int mpz_divisible_p (const mpz_t, const mpz_t);
int mpz_congruent_p (const mpz_t, const mpz_t, const mpz_t);

unsigned long mpz_cdiv_qr_ui (mpz_t, mpz_t, const mpz_t, unsigned long);
unsigned long mpz_fdiv_qr_ui (mpz_t, mpz_t, const mpz_t, unsigned long);
unsigned long mpz_tdiv_qr_ui (mpz_t, mpz_t, const mpz_t, unsigned long);
unsigned long mpz_cdiv_q_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_fdiv_q_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_tdiv_q_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_cdiv_r_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_fdiv_r_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_tdiv_r_ui (mpz_t, const mpz_t, unsigned long);
unsigned long mpz_cdiv_ui (const mpz_t, unsigned long);
unsigned long mpz_fdiv_ui (const mpz_t, unsigned long);
unsigned long mpz_tdiv_ui (const mpz_t, unsigned long);

unsigned long mpz_mod_ui (mpz_t, const mpz_t, unsigned long);

void mpz_divexact_ui (mpz_t, const mpz_t, unsigned long);

int mpz_divisible_ui_p (const mpz_t, unsigned long);

unsigned long mpz_gcd_ui (mpz_t, const mpz_t, unsigned long);
void mpz_gcd (mpz_t, const mpz_t, const mpz_t);
void mpz_gcdext (mpz_t, mpz_t, mpz_t, const mpz_t, const mpz_t);
void mpz_lcm_ui (mpz_t, const mpz_t, unsigned long);
void mpz_lcm (mpz_t, const mpz_t, const mpz_t);
int mpz_invert (mpz_t, const mpz_t, const mpz_t);

void mpz_sqrtrem (mpz_t, mpz_t, const mpz_t);
void mpz_sqrt (mpz_t, const mpz_t);
int mpz_perfect_square_p (const mpz_t);

void mpz_pow_ui (mpz_t, const mpz_t, unsigned long);
void mpz_ui_pow_ui (mpz_t, unsigned long, unsigned long);
void mpz_powm (mpz_t, const mpz_t, const mpz_t, const mpz_t);
void mpz_powm_ui (mpz_t, const mpz_t, unsigned long, const mpz_t);

void mpz_rootrem (mpz_t, mpz_t, const mpz_t, unsigned long);
int mpz_root (mpz_t, const mpz_t, unsigned long);

void mpz_fac_ui (mpz_t, unsigned long);
void mpz_bin_uiui (mpz_t, unsigned long, unsigned long);

int mpz_probab_prime_p (const mpz_t, int);

int mpz_tstbit (const mpz_t, mp_bitcnt_t);
void mpz_setbit (mpz_t, mp_bitcnt_t);
void mpz_clrbit (mpz_t, mp_bitcnt_t);
void mpz_combit (mpz_t, mp_bitcnt_t);

void mpz_com (mpz_t, const mpz_t);
void mpz_and (mpz_t, const mpz_t, const mpz_t);
void mpz_ior (mpz_t, const mpz_t, const mpz_t);
void mpz_xor (mpz_t, const mpz_t, const mpz_t);

mp_bitcnt_t mpz_popcount (const mpz_t);
mp_bitcnt_t mpz_hamdist (const mpz_t, const mpz_t);
mp_bitcnt_t mpz_scan0 (const mpz_t, mp_bitcnt_t);
mp_bitcnt_t mpz_scan1 (const mpz_t, mp_bitcnt_t);

int mpz_fits_slong_p (const mpz_t);
int mpz_fits_ulong_p (const mpz_t);
long int mpz_get_si (const mpz_t);
unsigned long int mpz_get_ui (const mpz_t);
double mpz_get_d (const mpz_t);
size_t mpz_size (const mpz_t);
mp_limb_t mpz_getlimbn (const mpz_t, mp_size_t);

void mpz_realloc2 (mpz_t, mp_bitcnt_t);
mp_srcptr mpz_limbs_read (mpz_srcptr);
mp_ptr mpz_limbs_modify (mpz_t, mp_size_t);
mp_ptr mpz_limbs_write (mpz_t, mp_size_t);
void mpz_limbs_finish (mpz_t, mp_size_t);
mpz_srcptr mpz_roinit_n (mpz_t, mp_srcptr, mp_size_t);

#define MPZ_ROINIT_N(xp, xs) {{0, (xs),(xp) }}

void mpz_set_si (mpz_t, signed long int);
void mpz_set_ui (mpz_t, unsigned long int);
void mpz_set (mpz_t, const mpz_t);
void mpz_set_d (mpz_t, double);

void mpz_init_set_si (mpz_t, signed long int);
void mpz_init_set_ui (mpz_t, unsigned long int);
void mpz_init_set (mpz_t, const mpz_t);
void mpz_init_set_d (mpz_t, double);

size_t mpz_sizeinbase (const mpz_t, int);
char *mpz_get_str (char *, int, const mpz_t);
int mpz_set_str (mpz_t, const char *, int);
int mpz_init_set_str (mpz_t, const char *, int);

/* This long list taken from gmp.h. */
/* For reference, ""defined(EOF)"" cannot be used here.  In g++ 2.95.4,
   <iostream> defines EOF but not FILE.  */
#if defined (FILE)                                              \
  || defined (H_STDIO)                                          \
  || defined (_H_STDIO)               /* AIX */                 \
  || defined (_STDIO_H)               /* glibc, Sun, SCO */     \
  || defined (_STDIO_H_)              /* BSD, OSF */            \
  || defined (__STDIO_H)              /* Borland */             \
  || defined (__STDIO_H__)            /* IRIX */                \
  || defined (_STDIO_INCLUDED)        /* HPUX */                \
  || defined (__dj_include_stdio_h_)  /* DJGPP */               \
  || defined (_FILE_DEFINED)          /* Microsoft */           \
  || defined (__STDIO__)              /* Apple MPW MrC */       \
  || defined (_MSL_STDIO_H)           /* Metrowerks */          \
  || defined (_STDIO_H_INCLUDED)      /* QNX4 */		\
  || defined (_ISO_STDIO_ISO_H)       /* Sun C++ */		\
  || defined (__STDIO_LOADED)         /* VMS */
size_t mpz_out_str (FILE *, int, const mpz_t);
#endif

void mpz_import (mpz_t, size_t, int, size_t, int, size_t, const void *);
void *mpz_export (void *, size_t *, int, size_t, int, size_t, const mpz_t);

#if defined (__cplusplus)
}
#endif
#endif /* __MINI_GMP_H__ */
",1,0
