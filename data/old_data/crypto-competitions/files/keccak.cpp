#include "keccak.h"
#include <string.h>

namespace keccak
{

    void buffer_xor(void* target, const void* source, int length)
    {
        while (length > 8)
        {
            *((uint64_t*)target) ^= *((uint64_t*)source);
            target += 8;
            source += 8;
            length -= 8;
        }
        while (length > 0)
        {
            *((uint8_t*)target) ^= *((uint8_t*)source);
            target += 1;
            source += 1;
            length--;
        }
    }

    /* ****************************** keccak_state ******************************* */

    keccak_state::keccak_state()
    {
        zero(0, 200);
    }

    keccak_state::~keccak_state()
    {
        zero(0, 200);
    }

#define ROTL(x, b) (((x) << (b)) | ((x) >> (64-(b))))
#define ROTR(x, b) (((x) >> (b)) | ((x) << (64-(b))))

    void keccak_state::round(uint64_t rc)
    {
        uint64_t C0, C1, C2, C3, C4, D;
        uint64_t B[5][5];

        C0 = A[0][0] ^ A[1][0] ^ A[2][0] ^ A[3][0] ^ A[4][0];
        C1 = A[0][1] ^ A[1][1] ^ A[2][1] ^ A[3][1] ^ A[4][1];
        C2 = A[0][2] ^ A[1][2] ^ A[2][2] ^ A[3][2] ^ A[4][2];
        C3 = A[0][3] ^ A[1][3] ^ A[2][3] ^ A[3][3] ^ A[4][3];
        C4 = A[0][4] ^ A[1][4] ^ A[2][4] ^ A[3][4] ^ A[4][4];

        D = C4 ^ ROTL(C1, 1);
        A[0][0] ^= D;
        A[1][0] ^= D;
        A[2][0] ^= D;
        A[3][0] ^= D;
        A[4][0] ^= D;

        D = C0 ^ ROTL(C2, 1);
        A[0][1] ^= D;
        A[1][1] ^= D;
        A[2][1] ^= D;
        A[3][1] ^= D;
        A[4][1] ^= D;

        D = C1 ^ ROTL(C3, 1);
        A[0][2] ^= D;
        A[1][2] ^= D;
        A[2][2] ^= D;
        A[3][2] ^= D;
        A[4][2] ^= D;

        D = C2 ^ ROTL(C4, 1);
        A[0][3] ^= D;
        A[1][3] ^= D;
        A[2][3] ^= D;
        A[3][3] ^= D;
        A[4][3] ^= D;

        D = C3 ^ ROTL(C0, 1);
        A[0][4] ^= D;
        A[1][4] ^= D;
        A[2][4] ^= D;
        A[3][4] ^= D;
        A[4][4] ^= D;

        // B[0][0] = A[0][0]
        B[1][0] = ROTR(A[1][1], 64-44);
        B[2][0] = ROTR(A[2][2], 64-43);
        B[3][0] = ROTL(A[3][3], 21);
        B[4][0] = ROTL(A[4][4], 14);
        B[0][1] = ROTL(A[0][3], 28);
        B[1][1] = ROTL(A[1][4], 20);
        B[2][1] = ROTL(A[2][0], 3);
        B[3][1] = ROTR(A[3][1], 64-45);
        B[4][1] = ROTR(A[4][2], 64-61);
        B[0][2] = ROTL(A[0][1], 1);
        B[1][2] = ROTL(A[1][2], 6);
        B[2][2] = ROTL(A[2][3], 25);
        B[3][2] = ROTL(A[3][4], 8);
        B[4][2] = ROTL(A[4][0], 18);
        B[0][3] = ROTL(A[0][4], 27);
        B[1][3] = ROTR(A[1][0], 64-36);
        B[2][3] = ROTL(A[2][1], 10);
        B[3][3] = ROTL(A[3][2], 15);
        B[4][3] = ROTR(A[4][3], 64-56);
        B[0][4] = ROTR(A[0][2], 64-62);
        B[1][4] = ROTR(A[1][3], 64-55);
        B[2][4] = ROTR(A[2][4], 64-39);
        B[3][4] = ROTR(A[3][0], 64-41);
        B[4][4] = ROTL(A[4][1], 2);

        A[0][1] = B[1][0] ^ (~B[2][0] & B[3][0]);
        A[0][2] = B[2][0] ^ (~B[3][0] & B[4][0]);
        A[0][3] = B[3][0] ^ (~B[4][0] & A[0][0]); // ! A
        A[0][4] = B[4][0] ^ (~A[0][0] & B[1][0]); // ! A
        A[1][0] = B[0][1] ^ (~B[1][1] & B[2][1]);
        A[1][1] = B[1][1] ^ (~B[2][1] & B[3][1]);
        A[1][2] = B[2][1] ^ (~B[3][1] & B[4][1]);
        A[1][3] = B[3][1] ^ (~B[4][1] & B[0][1]);
        A[1][4] = B[4][1] ^ (~B[0][1] & B[1][1]);
        A[2][0] = B[0][2] ^ (~B[1][2] & B[2][2]);
        A[2][1] = B[1][2] ^ (~B[2][2] & B[3][2]);
        A[2][2] = B[2][2] ^ (~B[3][2] & B[4][2]);
        A[2][3] = B[3][2] ^ (~B[4][2] & B[0][2]);
        A[2][4] = B[4][2] ^ (~B[0][2] & B[1][2]);
        A[3][0] = B[0][3] ^ (~B[1][3] & B[2][3]);
        A[3][1] = B[1][3] ^ (~B[2][3] & B[3][3]);
        A[3][2] = B[2][3] ^ (~B[3][3] & B[4][3]);
        A[3][3] = B[3][3] ^ (~B[4][3] & B[0][3]);
        A[3][4] = B[4][3] ^ (~B[0][3] & B[1][3]);
        A[4][0] = B[0][4] ^ (~B[1][4] & B[2][4]);
        A[4][1] = B[1][4] ^ (~B[2][4] & B[3][4]);
        A[4][2] = B[2][4] ^ (~B[3][4] & B[4][4]);
        A[4][3] = B[3][4] ^ (~B[4][4] & B[0][4]);
        A[4][4] = B[4][4] ^ (~B[0][4] & B[1][4]);
        A[0][0] = A[0][0] ^ (~B[1][0] & B[2][0]); // ! A

        A[0][0] ^= rc;
    }

    void keccak_state::f(int rounds)
    {
        int rc = 0;
        for (int r = 0; r < rounds; r++)
        {
            round(round_constants[rc]);
            if (rc==254) rc = 0; else rc++;
        }
    }

    void keccak_state::pad101_xor(int from_b, int to_b)
    {
        ((uint8_t*)&A)[from_b] ^= 0x01;
        ((uint8_t*)&A)[to_b] ^= 0x80;
    }

    void keccak_state::zero(int from_b, int length)
    {
        memset( (uint8_t*)&A + from_b, 0, length);
    }

    void keccak_state::block_absorb(const void *buffer, int from_b, int length)
    {
        buffer_xor((uint8_t*)&A + from_b, buffer, length);
    }

    void keccak_state::block_squeeze(void *buffer, int from_b, int length)
    {
        memcpy(buffer, (uint8_t*)&A + from_b, length);
    }

    uint64_t keccak_state::word_read(int idx)
    {
        return ((uint64_t*)&A)[idx];
    }

    void keccak_state::word_write_xor(int idx, const uint64_t word)
    {
        ((uint64_t*)&A)[idx] ^= word;
    }

    const uint64_t keccak_state::round_constants[] = {
        0x0000000000000001,
        0x0000000000008082,
        0x800000000000808A,
        0x8000000080008000,
        0x000000000000808B,
        0x0000000080000001,
        0x8000000080008081,
        0x8000000000008009,
        0x000000000000008A,
        0x0000000000000088,
        0x0000000080008009,
        0x000000008000000A,
        0x000000008000808B,
        0x800000000000008B,
        0x8000000000008089,
        0x8000000000008003,
        0x8000000000008002,
        0x8000000000000080,
        0x000000000000800A,
        0x800000008000000A,
        0x8000000080008081,
        0x8000000000008080,
        0x0000000080000001,
        0x8000000080008008,
        0x8000000080008082,
        0x800000008000800A,
        0x8000000000000003,
        0x8000000080000009,
        0x8000000000008082,
        0x0000000000008009,
        0x8000000000000080,
        0x0000000000008083,
        0x8000000000000081,
        0x0000000000000001,
        0x000000000000800B,
        0x8000000080008001,
        0x0000000000000080,
        0x8000000000008000,
        0x8000000080008001,
        0x0000000000000009,
        0x800000008000808B,
        0x0000000000000081,
        0x8000000000000082,
        0x000000008000008B,
        0x8000000080008009,
        0x8000000080000000,
        0x0000000080000080,
        0x0000000080008003,
        0x8000000080008082,
        0x8000000080008083,
        0x8000000080000088,
        0x0000000000008089,
        0x0000000000008009,
        0x8000000000000009,
        0x0000000080008008,
        0x0000000080008001,
        0x800000000000008A,
        0x800000000000000B,
        0x0000000000000089,
        0x0000000080000002,
        0x800000000000800B,
        0x000000008000800B,
        0x000000000000808B,
        0x0000000080000088,
        0x800000000000800A,
        0x0000000080000089,
        0x8000000000000001,
        0x8000000000008088,
        0x8000000000000081,
        0x0000000000000088,
        0x0000000080008080,
        0x0000000000000081,
        0x800000000000000B,
        0x0000000000000000,
        0x0000000000000089,
        0x000000008000008B,
        0x8000000080008080,
        0x800000000000008B,
        0x8000000000008000,
        0x8000000080008088,
        0x0000000080000082,
        0x000000000000000B,
        0x800000000000000A,
        0x0000000000008082,
        0x8000000000008003,
        0x800000000000808B,
        0x800000008000000B,
        0x800000008000008A,
        0x0000000080000081,
        0x0000000080000081,
        0x0000000080000008,
        0x0000000000000083,
        0x8000000080008003,
        0x0000000080008088,
        0x8000000080000088,
        0x0000000000008000,
        0x0000000080008082,
        0x0000000080008089,
        0x8000000080008083,
        0x8000000080000001,
        0x0000000080008002,
        0x8000000080000089,
        0x0000000000000082,
        0x8000000080000008,
        0x8000000000000089,
        0x8000000080000008,
        0x8000000000000000,
        0x8000000000000083,
        0x0000000080008080,
        0x0000000000000008,
        0x8000000080000080,
        0x8000000080008080,
        0x8000000000000002,
        0x800000008000808B,
        0x0000000000000008,
        0x8000000080000009,
        0x800000000000800B,
        0x0000000080008082,
        0x0000000080008000,
        0x8000000000008008,
        0x0000000000008081,
        0x8000000080008089,
        0x0000000080008089,
        0x800000008000800A,
        0x800000000000008A,
        0x8000000000000082,
        0x0000000080000002,
        0x8000000000008082,
        0x0000000000008080,
        0x800000008000000B,
        0x8000000080000003,
        0x000000000000000A,
        0x8000000000008001,
        0x8000000080000083,
        0x8000000000008083,
        0x000000000000008B,
        0x000000000000800A,
        0x8000000080000083,
        0x800000000000800A,
        0x0000000080000000,
        0x800000008000008A,
        0x0000000080000008,
        0x000000000000000A,
        0x8000000000008088,
        0x8000000000000008,
        0x0000000080000003,
        0x8000000000000000,
        0x800000000000000A,
        0x000000000000800B,
        0x8000000080008088,
        0x000000008000000B,
        0x0000000080000080,
        0x000000008000808A,
        0x8000000000008009,
        0x0000000000000003,
        0x0000000080000003,
        0x8000000000000089,
        0x8000000080000081,
        0x800000008000008B,
        0x0000000080008003,
        0x800000008000800B,
        0x8000000000008008,
        0x0000000000008008,
        0x8000000000008002,
        0x8000000000000009,
        0x0000000080008081,
        0x000000000000808A,
        0x000000008000800A,
        0x0000000000000080,
        0x8000000000008089,
        0x800000000000808A,
        0x8000000080008089,
        0x0000000080008000,
        0x8000000000008081,
        0x000000008000800A,
        0x0000000000000009,
        0x8000000080008002,
        0x000000008000000A,
        0x0000000080008002,
        0x8000000080000000,
        0x0000000080000009,
        0x0000000000008088,
        0x0000000000000002,
        0x0000000080008008,
        0x0000000080008088,
        0x8000000080000001,
        0x000000008000808B,
        0x8000000000000002,
        0x8000000080008002,
        0x0000000080000083,
        0x0000000000008089,
        0x0000000000008080,
        0x8000000080000082,
        0x8000000000000088,
        0x800000008000808A,
        0x000000000000808A,
        0x0000000080008083,
        0x000000008000000B,
        0x0000000080000009,
        0x0000000000008001,
        0x0000000080000089,
        0x8000000000000088,
        0x8000000080008003,
        0x0000000080008001,
        0x8000000000000003,
        0x8000000080000080,
        0x8000000080008009,
        0x8000000080000089,
        0x000000000000000B,
        0x8000000000000083,
        0x0000000080008009,
        0x0000000080000083,
        0x0000000000008000,
        0x000000008000800B,
        0x0000000000008002,
        0x0000000000000003,
        0x000000008000008A,
        0x8000000080000002,
        0x0000000000008001,
        0x0000000080000000,
        0x8000000080000003,
        0x0000000000000083,
        0x800000008000808A,
        0x0000000000008003,
        0x0000000000008008,
        0x800000000000808B,
        0x8000000080000082,
        0x8000000000000001,
        0x8000000000008001,
        0x800000008000000A,
        0x8000000080008008,
        0x800000008000800B,
        0x8000000000008081,
        0x0000000080008083,
        0x0000000080000082,
        0x0000000000000082,
        0x8000000080000081,
        0x8000000080000002,
        0x0000000000008088,
        0x000000000000008B,
        0x0000000000008083,
        0x8000000000000008,
        0x000000008000008A,
        0x800000008000008B,
        0x000000008000808A,
        0x8000000000008080,
        0x0000000080000088,
        0x8000000000008083,
        0x0000000000000002,
        0x0000000080008081,
        0x0000000000008003,
        0x0000000000008081,
        0x8000000080008000,
        0x0000000000008002,
        0x000000000000008A};

}
