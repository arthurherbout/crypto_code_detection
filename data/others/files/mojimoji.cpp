/* Generated by Cython 0.28.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mojimoji
#define __PYX_HAVE_API__mojimoji
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <unordered_map>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mojimoji.pyx",
};

/*--- Type declarations ---*/
struct __pyx_opt_args_8mojimoji_zen_to_han;
struct __pyx_opt_args_8mojimoji_han_to_zen;

/* "mojimoji.pyx":7
 * from libcpp.unordered_map cimport unordered_map
 * 
 * ctypedef unordered_map[Py_UNICODE, Py_UNICODE] table_type             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::unordered_map<Py_UNICODE,Py_UNICODE>  __pyx_t_8mojimoji_table_type;

/* "mojimoji.pyx":110
 * 
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */
struct __pyx_opt_args_8mojimoji_zen_to_han {
  int __pyx_n;
  int ascii;
  int digit;
  int kana;
};

/* "mojimoji.pyx":152
 * 
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */
struct __pyx_opt_args_8mojimoji_han_to_zen {
  int __pyx_n;
  int ascii;
  int digit;
  int kana;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* unicode_iter.proto */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ObjectAsPyUnicode.proto */
static CYTHON_INLINE Py_UNICODE __Pyx_PyObject_AsPy_UNICODE(PyObject*);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'mojimoji' */
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_ascii_zh_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_ascii_hz_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_zh_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_hz_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_digit_zh_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_digit_hz_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_ten_zh_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_ten_hz_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_maru_zh_table;
static __pyx_t_8mojimoji_table_type __pyx_v_8mojimoji_kana_maru_hz_table;
static PyObject *__pyx_f_8mojimoji_zen_to_han(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8mojimoji_zen_to_han *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_8mojimoji_han_to_zen(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8mojimoji_han_to_zen *__pyx_optional_args); /*proto*/
#define __Pyx_MODULE_NAME "mojimoji"
extern int __pyx_module_is_main_mojimoji;
int __pyx_module_is_main_mojimoji = 0;

/* Implementation of 'mojimoji' */
static PyObject *__pyx_builtin_zip;
static const char __pyx_k_[] = "\357\275\201";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_4[] = "4";
static const char __pyx_k_5[] = "5";
static const char __pyx_k_6[] = "6";
static const char __pyx_k_7[] = "7";
static const char __pyx_k_8[] = "8";
static const char __pyx_k_9[] = "9";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_J[] = "J";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_Z[] = "Z";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = "\357\275\202";
static const char __pyx_k__3[] = "\357\275\203";
static const char __pyx_k__4[] = "\357\275\204";
static const char __pyx_k__5[] = "\357\275\205";
static const char __pyx_k__6[] = "\357\275\206";
static const char __pyx_k__7[] = "\357\275\207";
static const char __pyx_k__8[] = "\357\275\210";
static const char __pyx_k__9[] = "\357\275\211";
static const char __pyx_k__10[] = "\357\275\212";
static const char __pyx_k__11[] = "\357\275\213";
static const char __pyx_k__12[] = "\357\275\214";
static const char __pyx_k__13[] = "\357\275\215";
static const char __pyx_k__14[] = "\357\275\216";
static const char __pyx_k__15[] = "\357\275\217";
static const char __pyx_k__16[] = "\357\275\220";
static const char __pyx_k__17[] = "\357\275\221";
static const char __pyx_k__18[] = "\357\275\222";
static const char __pyx_k__19[] = "\357\275\223";
static const char __pyx_k__20[] = "\357\275\224";
static const char __pyx_k__21[] = "\357\275\225";
static const char __pyx_k__22[] = "\357\275\226";
static const char __pyx_k__23[] = "\357\275\227";
static const char __pyx_k__24[] = "\357\275\230";
static const char __pyx_k__25[] = "\357\275\231";
static const char __pyx_k__26[] = "\357\275\232";
static const char __pyx_k__27[] = "\357\274\241";
static const char __pyx_k__28[] = "\357\274\242";
static const char __pyx_k__29[] = "\357\274\243";
static const char __pyx_k__30[] = "\357\274\244";
static const char __pyx_k__31[] = "\357\274\245";
static const char __pyx_k__32[] = "\357\274\246";
static const char __pyx_k__33[] = "\357\274\247";
static const char __pyx_k__34[] = "\357\274\250";
static const char __pyx_k__35[] = "\357\274\251";
static const char __pyx_k__36[] = "\357\274\252";
static const char __pyx_k__37[] = "\357\274\253";
static const char __pyx_k__38[] = "\357\274\254";
static const char __pyx_k__39[] = "\357\274\255";
static const char __pyx_k__40[] = "\357\274\256";
static const char __pyx_k__41[] = "\357\274\257";
static const char __pyx_k__42[] = "\357\274\260";
static const char __pyx_k__43[] = "\357\274\261";
static const char __pyx_k__44[] = "\357\274\262";
static const char __pyx_k__45[] = "\357\274\263";
static const char __pyx_k__46[] = "\357\274\264";
static const char __pyx_k__47[] = "\357\274\265";
static const char __pyx_k__48[] = "\357\274\266";
static const char __pyx_k__49[] = "\357\274\267";
static const char __pyx_k__50[] = "\357\274\270";
static const char __pyx_k__51[] = "\357\274\271";
static const char __pyx_k__52[] = "\357\274\272";
static const char __pyx_k__53[] = "\357\274\201";
static const char __pyx_k__54[] = "\342\200\235";
static const char __pyx_k__55[] = "\357\274\203";
static const char __pyx_k__56[] = "\357\274\204";
static const char __pyx_k__57[] = "\357\274\205";
static const char __pyx_k__58[] = "\357\274\206";
static const char __pyx_k__59[] = "\342\200\231";
static const char __pyx_k__60[] = "\357\274\210";
static const char __pyx_k__61[] = "\357\274\211";
static const char __pyx_k__62[] = "\357\274\212";
static const char __pyx_k__63[] = "\357\274\213";
static const char __pyx_k__64[] = "\357\274\214";
static const char __pyx_k__65[] = "\357\274\215";
static const char __pyx_k__66[] = "\357\274\216";
static const char __pyx_k__67[] = "\357\274\217";
static const char __pyx_k__68[] = "\357\274\232";
static const char __pyx_k__69[] = "\357\274\233";
static const char __pyx_k__70[] = "\357\274\234";
static const char __pyx_k__71[] = "\357\274\235";
static const char __pyx_k__72[] = "\357\274\236";
static const char __pyx_k__73[] = "\357\274\237";
static const char __pyx_k__74[] = "\357\274\240";
static const char __pyx_k__75[] = "\357\274\273";
static const char __pyx_k__76[] = "\357\277\245";
static const char __pyx_k__77[] = "\357\274\275";
static const char __pyx_k__78[] = "\357\274\276";
static const char __pyx_k__79[] = "\357\274\277";
static const char __pyx_k__80[] = "\342\200\230";
static const char __pyx_k__81[] = "\357\275\233";
static const char __pyx_k__82[] = "\357\275\234";
static const char __pyx_k__83[] = "\357\275\235";
static const char __pyx_k__84[] = "\357\275\236";
static const char __pyx_k__85[] = "\343\200\200";
static const char __pyx_k__87[] = "!";
static const char __pyx_k__88[] = "\"";
static const char __pyx_k__89[] = "#";
static const char __pyx_k__90[] = "$";
static const char __pyx_k__91[] = "%";
static const char __pyx_k__92[] = "&";
static const char __pyx_k__93[] = "'";
static const char __pyx_k__94[] = "(";
static const char __pyx_k__95[] = ")";
static const char __pyx_k__96[] = "*";
static const char __pyx_k__97[] = "+";
static const char __pyx_k__98[] = ",";
static const char __pyx_k__99[] = "-";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k__100[] = ".";
static const char __pyx_k__101[] = "/";
static const char __pyx_k__102[] = ":";
static const char __pyx_k__103[] = ";";
static const char __pyx_k__104[] = "<";
static const char __pyx_k__105[] = "=";
static const char __pyx_k__106[] = ">";
static const char __pyx_k__107[] = "?";
static const char __pyx_k__108[] = "@";
static const char __pyx_k__109[] = "[";
static const char __pyx_k__110[] = "\302\245";
static const char __pyx_k__111[] = "]";
static const char __pyx_k__112[] = "^";
static const char __pyx_k__113[] = "_";
static const char __pyx_k__114[] = "`";
static const char __pyx_k__115[] = "{";
  static const char __pyx_k__116[] = "|";
static const char __pyx_k__117[] = "}";
static const char __pyx_k__118[] = "~";
static const char __pyx_k__119[] = " ";
static const char __pyx_k__121[] = "\343\202\242";
static const char __pyx_k__122[] = "\343\202\244";
static const char __pyx_k__123[] = "\343\202\246";
static const char __pyx_k__124[] = "\343\202\250";
static const char __pyx_k__125[] = "\343\202\252";
static const char __pyx_k__126[] = "\343\202\253";
static const char __pyx_k__127[] = "\343\202\255";
static const char __pyx_k__128[] = "\343\202\257";
static const char __pyx_k__129[] = "\343\202\261";
static const char __pyx_k__130[] = "\343\202\263";
static const char __pyx_k__131[] = "\343\202\265";
static const char __pyx_k__132[] = "\343\202\267";
static const char __pyx_k__133[] = "\343\202\271";
static const char __pyx_k__134[] = "\343\202\273";
static const char __pyx_k__135[] = "\343\202\275";
static const char __pyx_k__136[] = "\343\202\277";
static const char __pyx_k__137[] = "\343\203\201";
static const char __pyx_k__138[] = "\343\203\204";
static const char __pyx_k__139[] = "\343\203\206";
static const char __pyx_k__140[] = "\343\203\210";
static const char __pyx_k__141[] = "\343\203\212";
static const char __pyx_k__142[] = "\343\203\213";
static const char __pyx_k__143[] = "\343\203\214";
static const char __pyx_k__144[] = "\343\203\215";
static const char __pyx_k__145[] = "\343\203\216";
static const char __pyx_k__146[] = "\343\203\217";
static const char __pyx_k__147[] = "\343\203\222";
static const char __pyx_k__148[] = "\343\203\225";
static const char __pyx_k__149[] = "\343\203\230";
static const char __pyx_k__150[] = "\343\203\233";
static const char __pyx_k__151[] = "\343\203\236";
static const char __pyx_k__152[] = "\343\203\237";
static const char __pyx_k__153[] = "\343\203\240";
static const char __pyx_k__154[] = "\343\203\241";
static const char __pyx_k__155[] = "\343\203\242";
static const char __pyx_k__156[] = "\343\203\244";
static const char __pyx_k__157[] = "\343\203\246";
static const char __pyx_k__158[] = "\343\203\250";
static const char __pyx_k__159[] = "\343\203\251";
static const char __pyx_k__160[] = "\343\203\252";
static const char __pyx_k__161[] = "\343\203\253";
static const char __pyx_k__162[] = "\343\203\254";
static const char __pyx_k__163[] = "\343\203\255";
static const char __pyx_k__164[] = "\343\203\257";
static const char __pyx_k__165[] = "\343\203\262";
static const char __pyx_k__166[] = "\343\203\263";
static const char __pyx_k__167[] = "\343\202\241";
static const char __pyx_k__168[] = "\343\202\243";
static const char __pyx_k__169[] = "\343\202\245";
static const char __pyx_k__170[] = "\343\202\247";
static const char __pyx_k__171[] = "\343\202\251";
static const char __pyx_k__172[] = "\343\203\203";
static const char __pyx_k__173[] = "\343\203\243";
static const char __pyx_k__174[] = "\343\203\245";
static const char __pyx_k__175[] = "\343\203\247";
static const char __pyx_k__176[] = "\343\200\202";
static const char __pyx_k__177[] = "\343\200\201";
static const char __pyx_k__178[] = "\343\203\273";
static const char __pyx_k__179[] = "\343\202\233";
static const char __pyx_k__180[] = "\343\202\234";
static const char __pyx_k__181[] = "\343\200\214";
static const char __pyx_k__182[] = "\343\200\215";
static const char __pyx_k__183[] = "\343\203\274";
static const char __pyx_k__185[] = "\357\275\261";
static const char __pyx_k__186[] = "\357\275\262";
static const char __pyx_k__187[] = "\357\275\263";
static const char __pyx_k__188[] = "\357\275\264";
static const char __pyx_k__189[] = "\357\275\265";
static const char __pyx_k__190[] = "\357\275\266";
static const char __pyx_k__191[] = "\357\275\267";
static const char __pyx_k__192[] = "\357\275\270";
static const char __pyx_k__193[] = "\357\275\271";
static const char __pyx_k__194[] = "\357\275\272";
static const char __pyx_k__195[] = "\357\275\273";
static const char __pyx_k__196[] = "\357\275\274";
static const char __pyx_k__197[] = "\357\275\275";
static const char __pyx_k__198[] = "\357\275\276";
static const char __pyx_k__199[] = "\357\275\277";
static const char __pyx_k__200[] = "\357\276\200";
static const char __pyx_k__201[] = "\357\276\201";
static const char __pyx_k__202[] = "\357\276\202";
static const char __pyx_k__203[] = "\357\276\203";
static const char __pyx_k__204[] = "\357\276\204";
static const char __pyx_k__205[] = "\357\276\205";
static const char __pyx_k__206[] = "\357\276\206";
static const char __pyx_k__207[] = "\357\276\207";
static const char __pyx_k__208[] = "\357\276\210";
static const char __pyx_k__209[] = "\357\276\211";
static const char __pyx_k__210[] = "\357\276\212";
static const char __pyx_k__211[] = "\357\276\213";
static const char __pyx_k__212[] = "\357\276\214";
static const char __pyx_k__213[] = "\357\276\215";
static const char __pyx_k__214[] = "\357\276\216";
static const char __pyx_k__215[] = "\357\276\217";
static const char __pyx_k__216[] = "\357\276\220";
static const char __pyx_k__217[] = "\357\276\221";
static const char __pyx_k__218[] = "\357\276\222";
static const char __pyx_k__219[] = "\357\276\223";
static const char __pyx_k__220[] = "\357\276\224";
static const char __pyx_k__221[] = "\357\276\225";
static const char __pyx_k__222[] = "\357\276\226";
static const char __pyx_k__223[] = "\357\276\227";
static const char __pyx_k__224[] = "\357\276\230";
static const char __pyx_k__225[] = "\357\276\231";
static const char __pyx_k__226[] = "\357\276\232";
static const char __pyx_k__227[] = "\357\276\233";
static const char __pyx_k__228[] = "\357\276\234";
static const char __pyx_k__229[] = "\357\275\246";
static const char __pyx_k__230[] = "\357\276\235";
static const char __pyx_k__231[] = "\357\275\247";
static const char __pyx_k__232[] = "\357\275\250";
static const char __pyx_k__233[] = "\357\275\251";
static const char __pyx_k__234[] = "\357\275\252";
static const char __pyx_k__235[] = "\357\275\253";
static const char __pyx_k__236[] = "\357\275\257";
static const char __pyx_k__237[] = "\357\275\254";
static const char __pyx_k__238[] = "\357\275\255";
static const char __pyx_k__239[] = "\357\275\256";
static const char __pyx_k__240[] = "\357\275\241";
static const char __pyx_k__241[] = "\357\275\244";
static const char __pyx_k__242[] = "\357\275\245";
static const char __pyx_k__243[] = "\357\276\236";
static const char __pyx_k__244[] = "\357\276\237";
static const char __pyx_k__245[] = "\357\275\242";
static const char __pyx_k__246[] = "\357\275\243";
static const char __pyx_k__247[] = "\357\275\260";
static const char __pyx_k__249[] = "\357\274\220";
static const char __pyx_k__250[] = "\357\274\221";
static const char __pyx_k__251[] = "\357\274\222";
static const char __pyx_k__252[] = "\357\274\223";
static const char __pyx_k__253[] = "\357\274\224";
static const char __pyx_k__254[] = "\357\274\225";
static const char __pyx_k__255[] = "\357\274\226";
static const char __pyx_k__256[] = "\357\274\227";
static const char __pyx_k__257[] = "\357\274\230";
static const char __pyx_k__258[] = "\357\274\231";
static const char __pyx_k__261[] = "\343\202\254";
static const char __pyx_k__263[] = "\343\202\256";
static const char __pyx_k__265[] = "\343\202\260";
static const char __pyx_k__267[] = "\343\202\262";
static const char __pyx_k__269[] = "\343\202\264";
static const char __pyx_k__271[] = "\343\202\266";
static const char __pyx_k__273[] = "\343\202\270";
static const char __pyx_k__275[] = "\343\202\272";
static const char __pyx_k__277[] = "\343\202\274";
static const char __pyx_k__279[] = "\343\202\276";
static const char __pyx_k__281[] = "\343\203\200";
static const char __pyx_k__283[] = "\343\203\202";
static const char __pyx_k__285[] = "\343\203\205";
static const char __pyx_k__287[] = "\343\203\207";
static const char __pyx_k__289[] = "\343\203\211";
static const char __pyx_k__291[] = "\343\203\220";
static const char __pyx_k__293[] = "\343\203\223";
static const char __pyx_k__295[] = "\343\203\226";
static const char __pyx_k__297[] = "\343\203\231";
static const char __pyx_k__299[] = "\343\203\234";
static const char __pyx_k__301[] = "\343\203\264";
static const char __pyx_k__304[] = "\343\203\221";
static const char __pyx_k__306[] = "\343\203\224";
static const char __pyx_k__308[] = "\343\203\227";
static const char __pyx_k__310[] = "\343\203\232";
static const char __pyx_k__312[] = "\343\203\235";
static const char __pyx_k_kana[] = "kana";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_digit[] = "digit";
static const char __pyx_k_KANA_TEN_MAP[] = "KANA_TEN_MAP";
static const char __pyx_k_KANA_MARU_MAP[] = "KANA_MARU_MAP";
static const char __pyx_k_KANA_HANKAKU_CHARS[] = "KANA_HANKAKU_CHARS";
static const char __pyx_k_KANA_ZENKAKU_CHARS[] = "KANA_ZENKAKU_CHARS";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_ASCII_HANKAKU_CHARS[] = "ASCII_HANKAKU_CHARS";
static const char __pyx_k_ASCII_ZENKAKU_CHARS[] = "ASCII_ZENKAKU_CHARS";
static const char __pyx_k_DIGIT_HANKAKU_CHARS[] = "DIGIT_HANKAKU_CHARS";
static const char __pyx_k_DIGIT_ZENKAKU_CHARS[] = "DIGIT_ZENKAKU_CHARS";
static PyObject *__pyx_n_u_;
static PyObject *__pyx_kp_u_0;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_2;
static PyObject *__pyx_kp_u_3;
static PyObject *__pyx_kp_u_4;
static PyObject *__pyx_kp_u_5;
static PyObject *__pyx_kp_u_6;
static PyObject *__pyx_kp_u_7;
static PyObject *__pyx_kp_u_8;
static PyObject *__pyx_kp_u_9;
static PyObject *__pyx_n_u_A;
static PyObject *__pyx_n_s_ASCII_HANKAKU_CHARS;
static PyObject *__pyx_n_s_ASCII_ZENKAKU_CHARS;
static PyObject *__pyx_n_u_B;
static PyObject *__pyx_n_u_C;
static PyObject *__pyx_n_u_D;
static PyObject *__pyx_n_s_DIGIT_HANKAKU_CHARS;
static PyObject *__pyx_n_s_DIGIT_ZENKAKU_CHARS;
static PyObject *__pyx_n_u_E;
static PyObject *__pyx_n_u_F;
static PyObject *__pyx_n_u_G;
static PyObject *__pyx_n_u_H;
static PyObject *__pyx_n_u_I;
static PyObject *__pyx_n_u_J;
static PyObject *__pyx_n_u_K;
static PyObject *__pyx_n_s_KANA_HANKAKU_CHARS;
static PyObject *__pyx_n_s_KANA_MARU_MAP;
static PyObject *__pyx_n_s_KANA_TEN_MAP;
static PyObject *__pyx_n_s_KANA_ZENKAKU_CHARS;
static PyObject *__pyx_n_u_L;
static PyObject *__pyx_n_u_M;
static PyObject *__pyx_n_u_N;
static PyObject *__pyx_n_u_O;
static PyObject *__pyx_n_u_P;
static PyObject *__pyx_n_u_Q;
static PyObject *__pyx_n_u_R;
static PyObject *__pyx_n_u_S;
static PyObject *__pyx_n_u_T;
static PyObject *__pyx_n_u_U;
static PyObject *__pyx_n_u_V;
static PyObject *__pyx_n_u_W;
static PyObject *__pyx_n_u_X;
static PyObject *__pyx_n_u_Y;
static PyObject *__pyx_n_u_Z;
static PyObject *__pyx_n_u__10;
static PyObject *__pyx_kp_u__100;
static PyObject *__pyx_kp_u__101;
static PyObject *__pyx_kp_u__102;
static PyObject *__pyx_kp_u__103;
static PyObject *__pyx_kp_u__104;
static PyObject *__pyx_kp_u__105;
static PyObject *__pyx_kp_u__106;
static PyObject *__pyx_kp_u__107;
static PyObject *__pyx_kp_u__108;
static PyObject *__pyx_kp_u__109;
static PyObject *__pyx_n_u__11;
static PyObject *__pyx_kp_u__110;
static PyObject *__pyx_kp_u__111;
static PyObject *__pyx_kp_u__112;
static PyObject *__pyx_n_u__113;
static PyObject *__pyx_kp_u__114;
static PyObject *__pyx_kp_u__115;
static PyObject *__pyx_kp_u__116;
static PyObject *__pyx_kp_u__117;
static PyObject *__pyx_kp_u__118;
static PyObject *__pyx_kp_u__119;
static PyObject *__pyx_n_u__12;
static PyObject *__pyx_n_u__121;
static PyObject *__pyx_n_u__122;
static PyObject *__pyx_n_u__123;
static PyObject *__pyx_n_u__124;
static PyObject *__pyx_n_u__125;
static PyObject *__pyx_n_u__126;
static PyObject *__pyx_n_u__127;
static PyObject *__pyx_n_u__128;
static PyObject *__pyx_n_u__129;
static PyObject *__pyx_n_u__13;
static PyObject *__pyx_n_u__130;
static PyObject *__pyx_n_u__131;
static PyObject *__pyx_n_u__132;
static PyObject *__pyx_n_u__133;
static PyObject *__pyx_n_u__134;
static PyObject *__pyx_n_u__135;
static PyObject *__pyx_n_u__136;
static PyObject *__pyx_n_u__137;
static PyObject *__pyx_n_u__138;
static PyObject *__pyx_n_u__139;
static PyObject *__pyx_n_u__14;
static PyObject *__pyx_n_u__140;
static PyObject *__pyx_n_u__141;
static PyObject *__pyx_n_u__142;
static PyObject *__pyx_n_u__143;
static PyObject *__pyx_n_u__144;
static PyObject *__pyx_n_u__145;
static PyObject *__pyx_n_u__146;
static PyObject *__pyx_n_u__147;
static PyObject *__pyx_n_u__148;
static PyObject *__pyx_n_u__149;
static PyObject *__pyx_n_u__15;
static PyObject *__pyx_n_u__150;
static PyObject *__pyx_n_u__151;
static PyObject *__pyx_n_u__152;
static PyObject *__pyx_n_u__153;
static PyObject *__pyx_n_u__154;
static PyObject *__pyx_n_u__155;
static PyObject *__pyx_n_u__156;
static PyObject *__pyx_n_u__157;
static PyObject *__pyx_n_u__158;
static PyObject *__pyx_n_u__159;
static PyObject *__pyx_n_u__16;
static PyObject *__pyx_n_u__160;
static PyObject *__pyx_n_u__161;
static PyObject *__pyx_n_u__162;
static PyObject *__pyx_n_u__163;
static PyObject *__pyx_n_u__164;
static PyObject *__pyx_n_u__165;
static PyObject *__pyx_n_u__166;
static PyObject *__pyx_n_u__167;
static PyObject *__pyx_n_u__168;
static PyObject *__pyx_n_u__169;
static PyObject *__pyx_n_u__17;
static PyObject *__pyx_n_u__170;
static PyObject *__pyx_n_u__171;
static PyObject *__pyx_n_u__172;
static PyObject *__pyx_n_u__173;
static PyObject *__pyx_n_u__174;
static PyObject *__pyx_n_u__175;
static PyObject *__pyx_kp_u__176;
static PyObject *__pyx_kp_u__177;
static PyObject *__pyx_kp_u__178;
static PyObject *__pyx_kp_u__179;
static PyObject *__pyx_n_u__18;
static PyObject *__pyx_kp_u__180;
static PyObject *__pyx_kp_u__181;
static PyObject *__pyx_kp_u__182;
static PyObject *__pyx_n_u__183;
static PyObject *__pyx_n_u__185;
static PyObject *__pyx_n_u__186;
static PyObject *__pyx_n_u__187;
static PyObject *__pyx_n_u__188;
static PyObject *__pyx_n_u__189;
static PyObject *__pyx_n_u__19;
static PyObject *__pyx_n_u__190;
static PyObject *__pyx_n_u__191;
static PyObject *__pyx_n_u__192;
static PyObject *__pyx_n_u__193;
static PyObject *__pyx_n_u__194;
static PyObject *__pyx_n_u__195;
static PyObject *__pyx_n_u__196;
static PyObject *__pyx_n_u__197;
static PyObject *__pyx_n_u__198;
static PyObject *__pyx_n_u__199;
static PyObject *__pyx_n_u__2;
static PyObject *__pyx_n_u__20;
static PyObject *__pyx_n_u__200;
static PyObject *__pyx_n_u__201;
static PyObject *__pyx_n_u__202;
static PyObject *__pyx_n_u__203;
static PyObject *__pyx_n_u__204;
static PyObject *__pyx_n_u__205;
static PyObject *__pyx_n_u__206;
static PyObject *__pyx_n_u__207;
static PyObject *__pyx_n_u__208;
static PyObject *__pyx_n_u__209;
static PyObject *__pyx_n_u__21;
static PyObject *__pyx_n_u__210;
static PyObject *__pyx_n_u__211;
static PyObject *__pyx_n_u__212;
static PyObject *__pyx_n_u__213;
static PyObject *__pyx_n_u__214;
static PyObject *__pyx_n_u__215;
static PyObject *__pyx_n_u__216;
static PyObject *__pyx_n_u__217;
static PyObject *__pyx_n_u__218;
static PyObject *__pyx_n_u__219;
static PyObject *__pyx_n_u__22;
static PyObject *__pyx_n_u__220;
static PyObject *__pyx_n_u__221;
static PyObject *__pyx_n_u__222;
static PyObject *__pyx_n_u__223;
static PyObject *__pyx_n_u__224;
static PyObject *__pyx_n_u__225;
static PyObject *__pyx_n_u__226;
static PyObject *__pyx_n_u__227;
static PyObject *__pyx_n_u__228;
static PyObject *__pyx_n_u__229;
static PyObject *__pyx_n_u__23;
static PyObject *__pyx_n_u__230;
static PyObject *__pyx_n_u__231;
static PyObject *__pyx_n_u__232;
static PyObject *__pyx_n_u__233;
static PyObject *__pyx_n_u__234;
static PyObject *__pyx_n_u__235;
static PyObject *__pyx_n_u__236;
static PyObject *__pyx_n_u__237;
static PyObject *__pyx_n_u__238;
static PyObject *__pyx_n_u__239;
static PyObject *__pyx_n_u__24;
static PyObject *__pyx_kp_u__240;
static PyObject *__pyx_kp_u__241;
static PyObject *__pyx_kp_u__242;
static PyObject *__pyx_n_u__243;
static PyObject *__pyx_n_u__244;
static PyObject *__pyx_kp_u__245;
static PyObject *__pyx_kp_u__246;
static PyObject *__pyx_n_u__247;
static PyObject *__pyx_n_u__249;
static PyObject *__pyx_n_u__25;
static PyObject *__pyx_n_u__250;
static PyObject *__pyx_n_u__251;
static PyObject *__pyx_n_u__252;
static PyObject *__pyx_n_u__253;
static PyObject *__pyx_n_u__254;
static PyObject *__pyx_n_u__255;
static PyObject *__pyx_n_u__256;
static PyObject *__pyx_n_u__257;
static PyObject *__pyx_n_u__258;
static PyObject *__pyx_n_u__26;
static PyObject *__pyx_n_u__261;
static PyObject *__pyx_n_u__263;
static PyObject *__pyx_n_u__265;
static PyObject *__pyx_n_u__267;
static PyObject *__pyx_n_u__269;
static PyObject *__pyx_n_u__27;
static PyObject *__pyx_n_u__271;
static PyObject *__pyx_n_u__273;
static PyObject *__pyx_n_u__275;
static PyObject *__pyx_n_u__277;
static PyObject *__pyx_n_u__279;
static PyObject *__pyx_n_u__28;
static PyObject *__pyx_n_u__281;
static PyObject *__pyx_n_u__283;
static PyObject *__pyx_n_u__285;
static PyObject *__pyx_n_u__287;
static PyObject *__pyx_n_u__289;
static PyObject *__pyx_n_u__29;
static PyObject *__pyx_n_u__291;
static PyObject *__pyx_n_u__293;
static PyObject *__pyx_n_u__295;
static PyObject *__pyx_n_u__297;
static PyObject *__pyx_n_u__299;
static PyObject *__pyx_n_u__3;
static PyObject *__pyx_n_u__30;
static PyObject *__pyx_n_u__301;
static PyObject *__pyx_n_u__304;
static PyObject *__pyx_n_u__306;
static PyObject *__pyx_n_u__308;
static PyObject *__pyx_n_u__31;
static PyObject *__pyx_n_u__310;
static PyObject *__pyx_n_u__312;
static PyObject *__pyx_n_u__32;
static PyObject *__pyx_n_u__33;
static PyObject *__pyx_n_u__34;
static PyObject *__pyx_n_u__35;
static PyObject *__pyx_n_u__36;
static PyObject *__pyx_n_u__37;
static PyObject *__pyx_n_u__38;
static PyObject *__pyx_n_u__39;
static PyObject *__pyx_n_u__4;
static PyObject *__pyx_n_u__40;
static PyObject *__pyx_n_u__41;
static PyObject *__pyx_n_u__42;
static PyObject *__pyx_n_u__43;
static PyObject *__pyx_n_u__44;
static PyObject *__pyx_n_u__45;
static PyObject *__pyx_n_u__46;
static PyObject *__pyx_n_u__47;
static PyObject *__pyx_n_u__48;
static PyObject *__pyx_n_u__49;
static PyObject *__pyx_n_u__5;
static PyObject *__pyx_n_u__50;
static PyObject *__pyx_n_u__51;
static PyObject *__pyx_n_u__52;
static PyObject *__pyx_kp_u__53;
static PyObject *__pyx_kp_u__54;
static PyObject *__pyx_kp_u__55;
static PyObject *__pyx_kp_u__56;
static PyObject *__pyx_kp_u__57;
static PyObject *__pyx_kp_u__58;
static PyObject *__pyx_kp_u__59;
static PyObject *__pyx_n_u__6;
static PyObject *__pyx_kp_u__60;
static PyObject *__pyx_kp_u__61;
static PyObject *__pyx_kp_u__62;
static PyObject *__pyx_kp_u__63;
static PyObject *__pyx_kp_u__64;
static PyObject *__pyx_kp_u__65;
static PyObject *__pyx_kp_u__66;
static PyObject *__pyx_kp_u__67;
static PyObject *__pyx_kp_u__68;
static PyObject *__pyx_kp_u__69;
static PyObject *__pyx_n_u__7;
static PyObject *__pyx_kp_u__70;
static PyObject *__pyx_kp_u__71;
static PyObject *__pyx_kp_u__72;
static PyObject *__pyx_kp_u__73;
static PyObject *__pyx_kp_u__74;
static PyObject *__pyx_kp_u__75;
static PyObject *__pyx_kp_u__76;
static PyObject *__pyx_kp_u__77;
static PyObject *__pyx_kp_u__78;
static PyObject *__pyx_kp_u__79;
static PyObject *__pyx_n_u__8;
static PyObject *__pyx_kp_u__80;
static PyObject *__pyx_kp_u__81;
static PyObject *__pyx_kp_u__82;
static PyObject *__pyx_kp_u__83;
static PyObject *__pyx_kp_u__84;
static PyObject *__pyx_kp_u__85;
static PyObject *__pyx_kp_u__87;
static PyObject *__pyx_kp_u__88;
static PyObject *__pyx_kp_u__89;
static PyObject *__pyx_n_u__9;
static PyObject *__pyx_kp_u__90;
static PyObject *__pyx_kp_u__91;
static PyObject *__pyx_kp_u__92;
static PyObject *__pyx_kp_u__93;
static PyObject *__pyx_kp_u__94;
static PyObject *__pyx_kp_u__95;
static PyObject *__pyx_kp_u__96;
static PyObject *__pyx_kp_u__97;
static PyObject *__pyx_kp_u__98;
static PyObject *__pyx_kp_u__99;
static PyObject *__pyx_n_u_a;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_u_b;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_digit;
static PyObject *__pyx_n_u_e;
static PyObject *__pyx_n_u_f;
static PyObject *__pyx_n_u_g;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_u_h;
static PyObject *__pyx_n_u_i;
static PyObject *__pyx_n_u_j;
static PyObject *__pyx_n_u_k;
static PyObject *__pyx_n_s_kana;
static PyObject *__pyx_n_u_l;
static PyObject *__pyx_n_u_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_u_n;
static PyObject *__pyx_n_u_o;
static PyObject *__pyx_n_u_p;
static PyObject *__pyx_n_u_q;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_n_u_s;
static PyObject *__pyx_n_u_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_u_u;
static PyObject *__pyx_n_u_v;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_u_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_u_z;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_8mojimoji_zen_to_han(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_ascii, int __pyx_v_digit, int __pyx_v_kana); /* proto */
static PyObject *__pyx_pf_8mojimoji_2han_to_zen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_ascii, int __pyx_v_digit, int __pyx_v_kana); /* proto */
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__248;
static PyObject *__pyx_tuple__259;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__266;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_tuple__272;
static PyObject *__pyx_tuple__274;
static PyObject *__pyx_tuple__276;
static PyObject *__pyx_tuple__278;
static PyObject *__pyx_tuple__280;
static PyObject *__pyx_tuple__282;
static PyObject *__pyx_tuple__284;
static PyObject *__pyx_tuple__286;
static PyObject *__pyx_tuple__288;
static PyObject *__pyx_tuple__290;
static PyObject *__pyx_tuple__292;
static PyObject *__pyx_tuple__294;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__302;
static PyObject *__pyx_tuple__303;
static PyObject *__pyx_tuple__305;
static PyObject *__pyx_tuple__307;
static PyObject *__pyx_tuple__309;
static PyObject *__pyx_tuple__311;
static PyObject *__pyx_tuple__313;
static PyObject *__pyx_tuple__314;
/* Late includes */

/* "mojimoji.pyx":110
 * 
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

static PyObject *__pyx_pw_8mojimoji_1zen_to_han(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8mojimoji_zen_to_han(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8mojimoji_zen_to_han *__pyx_optional_args) {
  int __pyx_v_ascii = ((int)1);
  int __pyx_v_digit = ((int)1);

  /* "mojimoji.pyx":111
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,
 *                          bint kana=True):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) * 2 + 1))
 */
  int __pyx_v_kana = ((int)1);
  Py_UNICODE *__pyx_v_buf;
  Py_UNICODE __pyx_v_c;
  int __pyx_v_pos;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("zen_to_han", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ascii = __pyx_optional_args->ascii;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_digit = __pyx_optional_args->digit;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_kana = __pyx_optional_args->kana;
        }
      }
    }
  }

  /* "mojimoji.pyx":113
 *                          bint kana=True):
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) * 2 + 1))             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE c
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 113, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_v_buf = ((Py_UNICODE *)malloc(((sizeof(Py_UNICODE)) * ((__pyx_t_1 * 2) + 1))));

  /* "mojimoji.pyx":116
 * 
 *     cdef Py_UNICODE c
 *     cdef int pos = 0             # <<<<<<<<<<<<<<
 * 
 *     for c in text:
 */
  __pyx_v_pos = 0;

  /* "mojimoji.pyx":118
 *     cdef int pos = 0
 * 
 *     for c in text:             # <<<<<<<<<<<<<<
 *         if ascii and ascii_zh_table.count(c):
 *             buf[pos] = ascii_zh_table[c]
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 118, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_text);
  __pyx_t_2 = __pyx_v_text;
  __pyx_t_6 = __Pyx_init_unicode_iteration(__pyx_t_2, (&__pyx_t_3), (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_3; __pyx_t_7++) {
    __pyx_t_1 = __pyx_t_7;
    __pyx_v_c = __Pyx_PyUnicode_READ(__pyx_t_5, __pyx_t_4, __pyx_t_1);

    /* "mojimoji.pyx":119
 * 
 *     for c in text:
 *         if ascii and ascii_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = ascii_zh_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_ascii != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_ascii_zh_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":120
 *     for c in text:
 *         if ascii and ascii_zh_table.count(c):
 *             buf[pos] = ascii_zh_table[c]             # <<<<<<<<<<<<<<
 * 
 *         elif digit and digit_zh_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_ascii_zh_table[__pyx_v_c]);

      /* "mojimoji.pyx":119
 * 
 *     for c in text:
 *         if ascii and ascii_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = ascii_zh_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":122
 *             buf[pos] = ascii_zh_table[c]
 * 
 *         elif digit and digit_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = digit_zh_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_digit != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_digit_zh_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":123
 * 
 *         elif digit and digit_zh_table.count(c):
 *             buf[pos] = digit_zh_table[c]             # <<<<<<<<<<<<<<
 * 
 *         elif kana and kana_zh_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_digit_zh_table[__pyx_v_c]);

      /* "mojimoji.pyx":122
 *             buf[pos] = ascii_zh_table[c]
 * 
 *         elif digit and digit_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = digit_zh_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":125
 *             buf[pos] = digit_zh_table[c]
 * 
 *         elif kana and kana_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_zh_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_zh_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":126
 * 
 *         elif kana and kana_zh_table.count(c):
 *             buf[pos] = kana_zh_table[c]             # <<<<<<<<<<<<<<
 * 
 *         elif kana and kana_ten_zh_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_zh_table[__pyx_v_c]);

      /* "mojimoji.pyx":125
 *             buf[pos] = digit_zh_table[c]
 * 
 *         elif kana and kana_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_zh_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":128
 *             buf[pos] = kana_zh_table[c]
 * 
 *         elif kana and kana_ten_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_ten_zh_table[c]
 *             pos += 1
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_ten_zh_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":129
 * 
 *         elif kana and kana_ten_zh_table.count(c):
 *             buf[pos] = kana_ten_zh_table[c]             # <<<<<<<<<<<<<<
 *             pos += 1
 *             buf[pos] = u''
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_ten_zh_table[__pyx_v_c]);

      /* "mojimoji.pyx":130
 *         elif kana and kana_ten_zh_table.count(c):
 *             buf[pos] = kana_ten_zh_table[c]
 *             pos += 1             # <<<<<<<<<<<<<<
 *             buf[pos] = u''
 * 
 */
      __pyx_v_pos = (__pyx_v_pos + 1);

      /* "mojimoji.pyx":131
 *             buf[pos] = kana_ten_zh_table[c]
 *             pos += 1
 *             buf[pos] = u''             # <<<<<<<<<<<<<<
 * 
 *         elif kana and kana_maru_zh_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = 0xFF9E;

      /* "mojimoji.pyx":128
 *             buf[pos] = kana_zh_table[c]
 * 
 *         elif kana and kana_ten_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_ten_zh_table[c]
 *             pos += 1
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":133
 *             buf[pos] = u''
 * 
 *         elif kana and kana_maru_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_maru_zh_table[c]
 *             pos += 1
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_maru_zh_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":134
 * 
 *         elif kana and kana_maru_zh_table.count(c):
 *             buf[pos] = kana_maru_zh_table[c]             # <<<<<<<<<<<<<<
 *             pos += 1
 *             buf[pos] = u''
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_maru_zh_table[__pyx_v_c]);

      /* "mojimoji.pyx":135
 *         elif kana and kana_maru_zh_table.count(c):
 *             buf[pos] = kana_maru_zh_table[c]
 *             pos += 1             # <<<<<<<<<<<<<<
 *             buf[pos] = u''
 * 
 */
      __pyx_v_pos = (__pyx_v_pos + 1);

      /* "mojimoji.pyx":136
 *             buf[pos] = kana_maru_zh_table[c]
 *             pos += 1
 *             buf[pos] = u''             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      (__pyx_v_buf[__pyx_v_pos]) = 0xFF9F;

      /* "mojimoji.pyx":133
 *             buf[pos] = u''
 * 
 *         elif kana and kana_maru_zh_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_maru_zh_table[c]
 *             pos += 1
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":139
 * 
 *         else:
 *             buf[pos] = c             # <<<<<<<<<<<<<<
 * 
 *         pos += 1
 */
    /*else*/ {
      (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
    }
    __pyx_L5:;

    /* "mojimoji.pyx":141
 *             buf[pos] = c
 * 
 *         pos += 1             # <<<<<<<<<<<<<<
 * 
 *     buf[pos] = u'\0'
 */
    __pyx_v_pos = (__pyx_v_pos + 1);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mojimoji.pyx":143
 *         pos += 1
 * 
 *     buf[pos] = u'\0'             # <<<<<<<<<<<<<<
 * 
 *     cdef unicode ret = buf
 */
  (__pyx_v_buf[__pyx_v_pos]) = 0;

  /* "mojimoji.pyx":145
 *     buf[pos] = u'\0'
 * 
 *     cdef unicode ret = buf             # <<<<<<<<<<<<<<
 * 
 *     free(buf)
 */
  __pyx_t_10 = __Pyx_PyUnicode_FromUnicode(__pyx_v_buf); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_v_ret = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "mojimoji.pyx":147
 *     cdef unicode ret = buf
 * 
 *     free(buf)             # <<<<<<<<<<<<<<
 * 
 *     return ret
 */
  free(__pyx_v_buf);

  /* "mojimoji.pyx":149
 *     free(buf)
 * 
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mojimoji.pyx":110
 * 
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mojimoji.zen_to_han", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8mojimoji_1zen_to_han(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8mojimoji_1zen_to_han(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_ascii;
  int __pyx_v_digit;
  int __pyx_v_kana;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zen_to_han (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_ascii,&__pyx_n_s_digit,&__pyx_n_s_kana,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ascii);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_digit);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kana);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "zen_to_han") < 0)) __PYX_ERR(0, 110, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_ascii = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_ascii == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    } else {
      __pyx_v_ascii = ((int)1);
    }
    if (values[2]) {
      __pyx_v_digit = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_digit == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    } else {
      __pyx_v_digit = ((int)1);
    }
    if (values[3]) {
      __pyx_v_kana = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_kana == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L3_error)
    } else {

      /* "mojimoji.pyx":111
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,
 *                          bint kana=True):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) * 2 + 1))
 */
      __pyx_v_kana = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("zen_to_han", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 110, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mojimoji.zen_to_han", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_r = __pyx_pf_8mojimoji_zen_to_han(__pyx_self, __pyx_v_text, __pyx_v_ascii, __pyx_v_digit, __pyx_v_kana);

  /* "mojimoji.pyx":110
 * 
 * 
 * cpdef unicode zen_to_han(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8mojimoji_zen_to_han(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_ascii, int __pyx_v_digit, int __pyx_v_kana) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8mojimoji_zen_to_han __pyx_t_2;
  __Pyx_RefNannySetupContext("zen_to_han", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.ascii = __pyx_v_ascii;
  __pyx_t_2.digit = __pyx_v_digit;
  __pyx_t_2.kana = __pyx_v_kana;
  __pyx_t_1 = __pyx_f_8mojimoji_zen_to_han(__pyx_v_text, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mojimoji.zen_to_han", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mojimoji.pyx":152
 * 
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

static PyObject *__pyx_pw_8mojimoji_3han_to_zen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8mojimoji_han_to_zen(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8mojimoji_han_to_zen *__pyx_optional_args) {
  int __pyx_v_ascii = ((int)1);
  int __pyx_v_digit = ((int)1);

  /* "mojimoji.pyx":153
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,
 *                          bint kana=True):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) + 1))
 */
  int __pyx_v_kana = ((int)1);
  Py_UNICODE *__pyx_v_buf;
  Py_UNICODE __pyx_v_c;
  Py_UNICODE __pyx_v_prev;
  int __pyx_v_pos;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("han_to_zen", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ascii = __pyx_optional_args->ascii;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_digit = __pyx_optional_args->digit;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_kana = __pyx_optional_args->kana;
        }
      }
    }
  }

  /* "mojimoji.pyx":155
 *                          bint kana=True):
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) + 1))             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE c, prev
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 155, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 155, __pyx_L1_error)
  __pyx_v_buf = ((Py_UNICODE *)malloc(((sizeof(Py_UNICODE)) * (__pyx_t_1 + 1))));

  /* "mojimoji.pyx":158
 * 
 *     cdef Py_UNICODE c, prev
 *     cdef int pos = 0             # <<<<<<<<<<<<<<
 * 
 *     for c in text:
 */
  __pyx_v_pos = 0;

  /* "mojimoji.pyx":160
 *     cdef int pos = 0
 * 
 *     for c in text:             # <<<<<<<<<<<<<<
 *         if ascii and ascii_hz_table.count(c):
 *             buf[pos] = ascii_hz_table[c]
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_text);
  __pyx_t_2 = __pyx_v_text;
  __pyx_t_6 = __Pyx_init_unicode_iteration(__pyx_t_2, (&__pyx_t_3), (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 160, __pyx_L1_error)
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_3; __pyx_t_7++) {
    __pyx_t_1 = __pyx_t_7;
    __pyx_v_c = __Pyx_PyUnicode_READ(__pyx_t_5, __pyx_t_4, __pyx_t_1);

    /* "mojimoji.pyx":161
 * 
 *     for c in text:
 *         if ascii and ascii_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = ascii_hz_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_ascii != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_ascii_hz_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":162
 *     for c in text:
 *         if ascii and ascii_hz_table.count(c):
 *             buf[pos] = ascii_hz_table[c]             # <<<<<<<<<<<<<<
 * 
 *         elif digit and digit_hz_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_ascii_hz_table[__pyx_v_c]);

      /* "mojimoji.pyx":161
 * 
 *     for c in text:
 *         if ascii and ascii_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = ascii_hz_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":164
 *             buf[pos] = ascii_hz_table[c]
 * 
 *         elif digit and digit_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = digit_hz_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_digit != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_digit_hz_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":165
 * 
 *         elif digit and digit_hz_table.count(c):
 *             buf[pos] = digit_hz_table[c]             # <<<<<<<<<<<<<<
 * 
 *         elif kana and c == u'' and kana_ten_hz_table.count(prev):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_digit_hz_table[__pyx_v_c]);

      /* "mojimoji.pyx":164
 *             buf[pos] = ascii_hz_table[c]
 * 
 *         elif digit and digit_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = digit_hz_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":167
 *             buf[pos] = digit_hz_table[c]
 * 
 *         elif kana and c == u'' and kana_ten_hz_table.count(prev):             # <<<<<<<<<<<<<<
 *             pos -= 1
 *             buf[pos] = kana_ten_hz_table[prev]
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_9 = ((__pyx_v_c == 0xFF9E) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_ten_hz_table.count(__pyx_v_prev) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":168
 * 
 *         elif kana and c == u'' and kana_ten_hz_table.count(prev):
 *             pos -= 1             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_ten_hz_table[prev]
 * 
 */
      __pyx_v_pos = (__pyx_v_pos - 1);

      /* "mojimoji.pyx":169
 *         elif kana and c == u'' and kana_ten_hz_table.count(prev):
 *             pos -= 1
 *             buf[pos] = kana_ten_hz_table[prev]             # <<<<<<<<<<<<<<
 * 
 *         elif kana and c == u'' and kana_maru_hz_table.count(prev):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_ten_hz_table[__pyx_v_prev]);

      /* "mojimoji.pyx":167
 *             buf[pos] = digit_hz_table[c]
 * 
 *         elif kana and c == u'' and kana_ten_hz_table.count(prev):             # <<<<<<<<<<<<<<
 *             pos -= 1
 *             buf[pos] = kana_ten_hz_table[prev]
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":171
 *             buf[pos] = kana_ten_hz_table[prev]
 * 
 *         elif kana and c == u'' and kana_maru_hz_table.count(prev):             # <<<<<<<<<<<<<<
 *             pos -= 1
 *             buf[pos] = kana_maru_hz_table[prev]
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_9 = ((__pyx_v_c == 0xFF9F) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_maru_hz_table.count(__pyx_v_prev) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":172
 * 
 *         elif kana and c == u'' and kana_maru_hz_table.count(prev):
 *             pos -= 1             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_maru_hz_table[prev]
 * 
 */
      __pyx_v_pos = (__pyx_v_pos - 1);

      /* "mojimoji.pyx":173
 *         elif kana and c == u'' and kana_maru_hz_table.count(prev):
 *             pos -= 1
 *             buf[pos] = kana_maru_hz_table[prev]             # <<<<<<<<<<<<<<
 * 
 *         elif kana and kana_hz_table.count(c):
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_maru_hz_table[__pyx_v_prev]);

      /* "mojimoji.pyx":171
 *             buf[pos] = kana_ten_hz_table[prev]
 * 
 *         elif kana and c == u'' and kana_maru_hz_table.count(prev):             # <<<<<<<<<<<<<<
 *             pos -= 1
 *             buf[pos] = kana_maru_hz_table[prev]
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":175
 *             buf[pos] = kana_maru_hz_table[prev]
 * 
 *         elif kana and kana_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_hz_table[c]
 * 
 */
    __pyx_t_9 = (__pyx_v_kana != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_8mojimoji_kana_hz_table.count(__pyx_v_c) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_8) {

      /* "mojimoji.pyx":176
 * 
 *         elif kana and kana_hz_table.count(c):
 *             buf[pos] = kana_hz_table[c]             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      (__pyx_v_buf[__pyx_v_pos]) = (__pyx_v_8mojimoji_kana_hz_table[__pyx_v_c]);

      /* "mojimoji.pyx":175
 *             buf[pos] = kana_maru_hz_table[prev]
 * 
 *         elif kana and kana_hz_table.count(c):             # <<<<<<<<<<<<<<
 *             buf[pos] = kana_hz_table[c]
 * 
 */
      goto __pyx_L5;
    }

    /* "mojimoji.pyx":179
 * 
 *         else:
 *             buf[pos] = c             # <<<<<<<<<<<<<<
 * 
 *         prev = c
 */
    /*else*/ {
      (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
    }
    __pyx_L5:;

    /* "mojimoji.pyx":181
 *             buf[pos] = c
 * 
 *         prev = c             # <<<<<<<<<<<<<<
 *         pos += 1
 * 
 */
    __pyx_v_prev = __pyx_v_c;

    /* "mojimoji.pyx":182
 * 
 *         prev = c
 *         pos += 1             # <<<<<<<<<<<<<<
 * 
 *     buf[pos] = u'\0'
 */
    __pyx_v_pos = (__pyx_v_pos + 1);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mojimoji.pyx":184
 *         pos += 1
 * 
 *     buf[pos] = u'\0'             # <<<<<<<<<<<<<<
 * 
 *     cdef unicode ret = buf
 */
  (__pyx_v_buf[__pyx_v_pos]) = 0;

  /* "mojimoji.pyx":186
 *     buf[pos] = u'\0'
 * 
 *     cdef unicode ret = buf             # <<<<<<<<<<<<<<
 * 
 *     free(buf)
 */
  __pyx_t_10 = __Pyx_PyUnicode_FromUnicode(__pyx_v_buf); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_v_ret = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "mojimoji.pyx":188
 *     cdef unicode ret = buf
 * 
 *     free(buf)             # <<<<<<<<<<<<<<
 * 
 *     return ret
 */
  free(__pyx_v_buf);

  /* "mojimoji.pyx":190
 *     free(buf)
 * 
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "mojimoji.pyx":152
 * 
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("mojimoji.han_to_zen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8mojimoji_3han_to_zen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8mojimoji_3han_to_zen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_ascii;
  int __pyx_v_digit;
  int __pyx_v_kana;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("han_to_zen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_ascii,&__pyx_n_s_digit,&__pyx_n_s_kana,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ascii);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_digit);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kana);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "han_to_zen") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_ascii = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_ascii == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
    } else {
      __pyx_v_ascii = ((int)1);
    }
    if (values[2]) {
      __pyx_v_digit = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_digit == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
    } else {
      __pyx_v_digit = ((int)1);
    }
    if (values[3]) {
      __pyx_v_kana = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_kana == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L3_error)
    } else {

      /* "mojimoji.pyx":153
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,
 *                          bint kana=True):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UNICODE *buf = <Py_UNICODE *>malloc(sizeof(Py_UNICODE) * (len(text) + 1))
 */
      __pyx_v_kana = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("han_to_zen", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mojimoji.han_to_zen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_r = __pyx_pf_8mojimoji_2han_to_zen(__pyx_self, __pyx_v_text, __pyx_v_ascii, __pyx_v_digit, __pyx_v_kana);

  /* "mojimoji.pyx":152
 * 
 * 
 * cpdef unicode han_to_zen(unicode text, bint ascii=True, bint digit=True,             # <<<<<<<<<<<<<<
 *                          bint kana=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8mojimoji_2han_to_zen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_ascii, int __pyx_v_digit, int __pyx_v_kana) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8mojimoji_han_to_zen __pyx_t_2;
  __Pyx_RefNannySetupContext("han_to_zen", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.ascii = __pyx_v_ascii;
  __pyx_t_2.digit = __pyx_v_digit;
  __pyx_t_2.kana = __pyx_v_kana;
  __pyx_t_1 = __pyx_f_8mojimoji_han_to_zen(__pyx_v_text, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mojimoji.han_to_zen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"zen_to_han", (PyCFunction)__pyx_pw_8mojimoji_1zen_to_han, METH_VARARGS|METH_KEYWORDS, 0},
  {"han_to_zen", (PyCFunction)__pyx_pw_8mojimoji_3han_to_zen, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_mojimoji(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_mojimoji},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mojimoji",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 1},
  {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
  {&__pyx_kp_u_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0, 0},
  {&__pyx_kp_u_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0, 0},
  {&__pyx_kp_u_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0, 0},
  {&__pyx_kp_u_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 1, 0, 0},
  {&__pyx_kp_u_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0, 0},
  {&__pyx_kp_u_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0, 0},
  {&__pyx_kp_u_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0, 0},
  {&__pyx_n_u_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 1, 0, 1},
  {&__pyx_n_s_ASCII_HANKAKU_CHARS, __pyx_k_ASCII_HANKAKU_CHARS, sizeof(__pyx_k_ASCII_HANKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII_ZENKAKU_CHARS, __pyx_k_ASCII_ZENKAKU_CHARS, sizeof(__pyx_k_ASCII_ZENKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
  {&__pyx_n_u_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 1, 0, 1},
  {&__pyx_n_u_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 1, 0, 1},
  {&__pyx_n_s_DIGIT_HANKAKU_CHARS, __pyx_k_DIGIT_HANKAKU_CHARS, sizeof(__pyx_k_DIGIT_HANKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_s_DIGIT_ZENKAKU_CHARS, __pyx_k_DIGIT_ZENKAKU_CHARS, sizeof(__pyx_k_DIGIT_ZENKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_u_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 1, 0, 1},
  {&__pyx_n_u_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 1, 0, 1},
  {&__pyx_n_u_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 1, 0, 1},
  {&__pyx_n_u_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 1, 0, 1},
  {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
  {&__pyx_n_u_J, __pyx_k_J, sizeof(__pyx_k_J), 0, 1, 0, 1},
  {&__pyx_n_u_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 1, 0, 1},
  {&__pyx_n_s_KANA_HANKAKU_CHARS, __pyx_k_KANA_HANKAKU_CHARS, sizeof(__pyx_k_KANA_HANKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_s_KANA_MARU_MAP, __pyx_k_KANA_MARU_MAP, sizeof(__pyx_k_KANA_MARU_MAP), 0, 0, 1, 1},
  {&__pyx_n_s_KANA_TEN_MAP, __pyx_k_KANA_TEN_MAP, sizeof(__pyx_k_KANA_TEN_MAP), 0, 0, 1, 1},
  {&__pyx_n_s_KANA_ZENKAKU_CHARS, __pyx_k_KANA_ZENKAKU_CHARS, sizeof(__pyx_k_KANA_ZENKAKU_CHARS), 0, 0, 1, 1},
  {&__pyx_n_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 1},
  {&__pyx_n_u_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 1, 0, 1},
  {&__pyx_n_u_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 1, 0, 1},
  {&__pyx_n_u_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 1, 0, 1},
  {&__pyx_n_u_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 1, 0, 1},
  {&__pyx_n_u_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 1, 0, 1},
  {&__pyx_n_u_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 1, 0, 1},
  {&__pyx_n_u_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 1, 0, 1},
  {&__pyx_n_u_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 1, 0, 1},
  {&__pyx_n_u_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 1, 0, 1},
  {&__pyx_n_u_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 1, 0, 1},
  {&__pyx_n_u_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 1, 0, 1},
  {&__pyx_n_u_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 1, 0, 1},
  {&__pyx_n_u_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 1, 0, 1},
  {&__pyx_n_u_Z, __pyx_k_Z, sizeof(__pyx_k_Z), 0, 1, 0, 1},
  {&__pyx_n_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 1},
  {&__pyx_kp_u__100, __pyx_k__100, sizeof(__pyx_k__100), 0, 1, 0, 0},
  {&__pyx_kp_u__101, __pyx_k__101, sizeof(__pyx_k__101), 0, 1, 0, 0},
  {&__pyx_kp_u__102, __pyx_k__102, sizeof(__pyx_k__102), 0, 1, 0, 0},
  {&__pyx_kp_u__103, __pyx_k__103, sizeof(__pyx_k__103), 0, 1, 0, 0},
  {&__pyx_kp_u__104, __pyx_k__104, sizeof(__pyx_k__104), 0, 1, 0, 0},
  {&__pyx_kp_u__105, __pyx_k__105, sizeof(__pyx_k__105), 0, 1, 0, 0},
  {&__pyx_kp_u__106, __pyx_k__106, sizeof(__pyx_k__106), 0, 1, 0, 0},
  {&__pyx_kp_u__107, __pyx_k__107, sizeof(__pyx_k__107), 0, 1, 0, 0},
  {&__pyx_kp_u__108, __pyx_k__108, sizeof(__pyx_k__108), 0, 1, 0, 0},
  {&__pyx_kp_u__109, __pyx_k__109, sizeof(__pyx_k__109), 0, 1, 0, 0},
  {&__pyx_n_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 1},
  {&__pyx_kp_u__110, __pyx_k__110, sizeof(__pyx_k__110), 0, 1, 0, 0},
  {&__pyx_kp_u__111, __pyx_k__111, sizeof(__pyx_k__111), 0, 1, 0, 0},
  {&__pyx_kp_u__112, __pyx_k__112, sizeof(__pyx_k__112), 0, 1, 0, 0},
  {&__pyx_n_u__113, __pyx_k__113, sizeof(__pyx_k__113), 0, 1, 0, 1},
  {&__pyx_kp_u__114, __pyx_k__114, sizeof(__pyx_k__114), 0, 1, 0, 0},
  {&__pyx_kp_u__115, __pyx_k__115, sizeof(__pyx_k__115), 0, 1, 0, 0},
  {&__pyx_kp_u__116, __pyx_k__116, sizeof(__pyx_k__116), 0, 1, 0, 0},
  {&__pyx_kp_u__117, __pyx_k__117, sizeof(__pyx_k__117), 0, 1, 0, 0},
  {&__pyx_kp_u__118, __pyx_k__118, sizeof(__pyx_k__118), 0, 1, 0, 0},
  {&__pyx_kp_u__119, __pyx_k__119, sizeof(__pyx_k__119), 0, 1, 0, 0},
  {&__pyx_n_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 1},
  {&__pyx_n_u__121, __pyx_k__121, sizeof(__pyx_k__121), 0, 1, 0, 1},
  {&__pyx_n_u__122, __pyx_k__122, sizeof(__pyx_k__122), 0, 1, 0, 1},
  {&__pyx_n_u__123, __pyx_k__123, sizeof(__pyx_k__123), 0, 1, 0, 1},
  {&__pyx_n_u__124, __pyx_k__124, sizeof(__pyx_k__124), 0, 1, 0, 1},
  {&__pyx_n_u__125, __pyx_k__125, sizeof(__pyx_k__125), 0, 1, 0, 1},
  {&__pyx_n_u__126, __pyx_k__126, sizeof(__pyx_k__126), 0, 1, 0, 1},
  {&__pyx_n_u__127, __pyx_k__127, sizeof(__pyx_k__127), 0, 1, 0, 1},
  {&__pyx_n_u__128, __pyx_k__128, sizeof(__pyx_k__128), 0, 1, 0, 1},
  {&__pyx_n_u__129, __pyx_k__129, sizeof(__pyx_k__129), 0, 1, 0, 1},
  {&__pyx_n_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 1},
  {&__pyx_n_u__130, __pyx_k__130, sizeof(__pyx_k__130), 0, 1, 0, 1},
  {&__pyx_n_u__131, __pyx_k__131, sizeof(__pyx_k__131), 0, 1, 0, 1},
  {&__pyx_n_u__132, __pyx_k__132, sizeof(__pyx_k__132), 0, 1, 0, 1},
  {&__pyx_n_u__133, __pyx_k__133, sizeof(__pyx_k__133), 0, 1, 0, 1},
  {&__pyx_n_u__134, __pyx_k__134, sizeof(__pyx_k__134), 0, 1, 0, 1},
  {&__pyx_n_u__135, __pyx_k__135, sizeof(__pyx_k__135), 0, 1, 0, 1},
  {&__pyx_n_u__136, __pyx_k__136, sizeof(__pyx_k__136), 0, 1, 0, 1},
  {&__pyx_n_u__137, __pyx_k__137, sizeof(__pyx_k__137), 0, 1, 0, 1},
  {&__pyx_n_u__138, __pyx_k__138, sizeof(__pyx_k__138), 0, 1, 0, 1},
  {&__pyx_n_u__139, __pyx_k__139, sizeof(__pyx_k__139), 0, 1, 0, 1},
  {&__pyx_n_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 1},
  {&__pyx_n_u__140, __pyx_k__140, sizeof(__pyx_k__140), 0, 1, 0, 1},
  {&__pyx_n_u__141, __pyx_k__141, sizeof(__pyx_k__141), 0, 1, 0, 1},
  {&__pyx_n_u__142, __pyx_k__142, sizeof(__pyx_k__142), 0, 1, 0, 1},
  {&__pyx_n_u__143, __pyx_k__143, sizeof(__pyx_k__143), 0, 1, 0, 1},
  {&__pyx_n_u__144, __pyx_k__144, sizeof(__pyx_k__144), 0, 1, 0, 1},
  {&__pyx_n_u__145, __pyx_k__145, sizeof(__pyx_k__145), 0, 1, 0, 1},
  {&__pyx_n_u__146, __pyx_k__146, sizeof(__pyx_k__146), 0, 1, 0, 1},
  {&__pyx_n_u__147, __pyx_k__147, sizeof(__pyx_k__147), 0, 1, 0, 1},
  {&__pyx_n_u__148, __pyx_k__148, sizeof(__pyx_k__148), 0, 1, 0, 1},
  {&__pyx_n_u__149, __pyx_k__149, sizeof(__pyx_k__149), 0, 1, 0, 1},
  {&__pyx_n_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 1},
  {&__pyx_n_u__150, __pyx_k__150, sizeof(__pyx_k__150), 0, 1, 0, 1},
  {&__pyx_n_u__151, __pyx_k__151, sizeof(__pyx_k__151), 0, 1, 0, 1},
  {&__pyx_n_u__152, __pyx_k__152, sizeof(__pyx_k__152), 0, 1, 0, 1},
  {&__pyx_n_u__153, __pyx_k__153, sizeof(__pyx_k__153), 0, 1, 0, 1},
  {&__pyx_n_u__154, __pyx_k__154, sizeof(__pyx_k__154), 0, 1, 0, 1},
  {&__pyx_n_u__155, __pyx_k__155, sizeof(__pyx_k__155), 0, 1, 0, 1},
  {&__pyx_n_u__156, __pyx_k__156, sizeof(__pyx_k__156), 0, 1, 0, 1},
  {&__pyx_n_u__157, __pyx_k__157, sizeof(__pyx_k__157), 0, 1, 0, 1},
  {&__pyx_n_u__158, __pyx_k__158, sizeof(__pyx_k__158), 0, 1, 0, 1},
  {&__pyx_n_u__159, __pyx_k__159, sizeof(__pyx_k__159), 0, 1, 0, 1},
  {&__pyx_n_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 1},
  {&__pyx_n_u__160, __pyx_k__160, sizeof(__pyx_k__160), 0, 1, 0, 1},
  {&__pyx_n_u__161, __pyx_k__161, sizeof(__pyx_k__161), 0, 1, 0, 1},
  {&__pyx_n_u__162, __pyx_k__162, sizeof(__pyx_k__162), 0, 1, 0, 1},
  {&__pyx_n_u__163, __pyx_k__163, sizeof(__pyx_k__163), 0, 1, 0, 1},
  {&__pyx_n_u__164, __pyx_k__164, sizeof(__pyx_k__164), 0, 1, 0, 1},
  {&__pyx_n_u__165, __pyx_k__165, sizeof(__pyx_k__165), 0, 1, 0, 1},
  {&__pyx_n_u__166, __pyx_k__166, sizeof(__pyx_k__166), 0, 1, 0, 1},
  {&__pyx_n_u__167, __pyx_k__167, sizeof(__pyx_k__167), 0, 1, 0, 1},
  {&__pyx_n_u__168, __pyx_k__168, sizeof(__pyx_k__168), 0, 1, 0, 1},
  {&__pyx_n_u__169, __pyx_k__169, sizeof(__pyx_k__169), 0, 1, 0, 1},
  {&__pyx_n_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 1},
  {&__pyx_n_u__170, __pyx_k__170, sizeof(__pyx_k__170), 0, 1, 0, 1},
  {&__pyx_n_u__171, __pyx_k__171, sizeof(__pyx_k__171), 0, 1, 0, 1},
  {&__pyx_n_u__172, __pyx_k__172, sizeof(__pyx_k__172), 0, 1, 0, 1},
  {&__pyx_n_u__173, __pyx_k__173, sizeof(__pyx_k__173), 0, 1, 0, 1},
  {&__pyx_n_u__174, __pyx_k__174, sizeof(__pyx_k__174), 0, 1, 0, 1},
  {&__pyx_n_u__175, __pyx_k__175, sizeof(__pyx_k__175), 0, 1, 0, 1},
  {&__pyx_kp_u__176, __pyx_k__176, sizeof(__pyx_k__176), 0, 1, 0, 0},
  {&__pyx_kp_u__177, __pyx_k__177, sizeof(__pyx_k__177), 0, 1, 0, 0},
  {&__pyx_kp_u__178, __pyx_k__178, sizeof(__pyx_k__178), 0, 1, 0, 0},
  {&__pyx_kp_u__179, __pyx_k__179, sizeof(__pyx_k__179), 0, 1, 0, 0},
  {&__pyx_n_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 1},
  {&__pyx_kp_u__180, __pyx_k__180, sizeof(__pyx_k__180), 0, 1, 0, 0},
  {&__pyx_kp_u__181, __pyx_k__181, sizeof(__pyx_k__181), 0, 1, 0, 0},
  {&__pyx_kp_u__182, __pyx_k__182, sizeof(__pyx_k__182), 0, 1, 0, 0},
  {&__pyx_n_u__183, __pyx_k__183, sizeof(__pyx_k__183), 0, 1, 0, 1},
  {&__pyx_n_u__185, __pyx_k__185, sizeof(__pyx_k__185), 0, 1, 0, 1},
  {&__pyx_n_u__186, __pyx_k__186, sizeof(__pyx_k__186), 0, 1, 0, 1},
  {&__pyx_n_u__187, __pyx_k__187, sizeof(__pyx_k__187), 0, 1, 0, 1},
  {&__pyx_n_u__188, __pyx_k__188, sizeof(__pyx_k__188), 0, 1, 0, 1},
  {&__pyx_n_u__189, __pyx_k__189, sizeof(__pyx_k__189), 0, 1, 0, 1},
  {&__pyx_n_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 1},
  {&__pyx_n_u__190, __pyx_k__190, sizeof(__pyx_k__190), 0, 1, 0, 1},
  {&__pyx_n_u__191, __pyx_k__191, sizeof(__pyx_k__191), 0, 1, 0, 1},
  {&__pyx_n_u__192, __pyx_k__192, sizeof(__pyx_k__192), 0, 1, 0, 1},
  {&__pyx_n_u__193, __pyx_k__193, sizeof(__pyx_k__193), 0, 1, 0, 1},
  {&__pyx_n_u__194, __pyx_k__194, sizeof(__pyx_k__194), 0, 1, 0, 1},
  {&__pyx_n_u__195, __pyx_k__195, sizeof(__pyx_k__195), 0, 1, 0, 1},
  {&__pyx_n_u__196, __pyx_k__196, sizeof(__pyx_k__196), 0, 1, 0, 1},
  {&__pyx_n_u__197, __pyx_k__197, sizeof(__pyx_k__197), 0, 1, 0, 1},
  {&__pyx_n_u__198, __pyx_k__198, sizeof(__pyx_k__198), 0, 1, 0, 1},
  {&__pyx_n_u__199, __pyx_k__199, sizeof(__pyx_k__199), 0, 1, 0, 1},
  {&__pyx_n_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 1},
  {&__pyx_n_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 1},
  {&__pyx_n_u__200, __pyx_k__200, sizeof(__pyx_k__200), 0, 1, 0, 1},
  {&__pyx_n_u__201, __pyx_k__201, sizeof(__pyx_k__201), 0, 1, 0, 1},
  {&__pyx_n_u__202, __pyx_k__202, sizeof(__pyx_k__202), 0, 1, 0, 1},
  {&__pyx_n_u__203, __pyx_k__203, sizeof(__pyx_k__203), 0, 1, 0, 1},
  {&__pyx_n_u__204, __pyx_k__204, sizeof(__pyx_k__204), 0, 1, 0, 1},
  {&__pyx_n_u__205, __pyx_k__205, sizeof(__pyx_k__205), 0, 1, 0, 1},
  {&__pyx_n_u__206, __pyx_k__206, sizeof(__pyx_k__206), 0, 1, 0, 1},
  {&__pyx_n_u__207, __pyx_k__207, sizeof(__pyx_k__207), 0, 1, 0, 1},
  {&__pyx_n_u__208, __pyx_k__208, sizeof(__pyx_k__208), 0, 1, 0, 1},
  {&__pyx_n_u__209, __pyx_k__209, sizeof(__pyx_k__209), 0, 1, 0, 1},
  {&__pyx_n_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 1},
  {&__pyx_n_u__210, __pyx_k__210, sizeof(__pyx_k__210), 0, 1, 0, 1},
  {&__pyx_n_u__211, __pyx_k__211, sizeof(__pyx_k__211), 0, 1, 0, 1},
  {&__pyx_n_u__212, __pyx_k__212, sizeof(__pyx_k__212), 0, 1, 0, 1},
  {&__pyx_n_u__213, __pyx_k__213, sizeof(__pyx_k__213), 0, 1, 0, 1},
  {&__pyx_n_u__214, __pyx_k__214, sizeof(__pyx_k__214), 0, 1, 0, 1},
  {&__pyx_n_u__215, __pyx_k__215, sizeof(__pyx_k__215), 0, 1, 0, 1},
  {&__pyx_n_u__216, __pyx_k__216, sizeof(__pyx_k__216), 0, 1, 0, 1},
  {&__pyx_n_u__217, __pyx_k__217, sizeof(__pyx_k__217), 0, 1, 0, 1},
  {&__pyx_n_u__218, __pyx_k__218, sizeof(__pyx_k__218), 0, 1, 0, 1},
  {&__pyx_n_u__219, __pyx_k__219, sizeof(__pyx_k__219), 0, 1, 0, 1},
  {&__pyx_n_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 1},
  {&__pyx_n_u__220, __pyx_k__220, sizeof(__pyx_k__220), 0, 1, 0, 1},
  {&__pyx_n_u__221, __pyx_k__221, sizeof(__pyx_k__221), 0, 1, 0, 1},
  {&__pyx_n_u__222, __pyx_k__222, sizeof(__pyx_k__222), 0, 1, 0, 1},
  {&__pyx_n_u__223, __pyx_k__223, sizeof(__pyx_k__223), 0, 1, 0, 1},
  {&__pyx_n_u__224, __pyx_k__224, sizeof(__pyx_k__224), 0, 1, 0, 1},
  {&__pyx_n_u__225, __pyx_k__225, sizeof(__pyx_k__225), 0, 1, 0, 1},
  {&__pyx_n_u__226, __pyx_k__226, sizeof(__pyx_k__226), 0, 1, 0, 1},
  {&__pyx_n_u__227, __pyx_k__227, sizeof(__pyx_k__227), 0, 1, 0, 1},
  {&__pyx_n_u__228, __pyx_k__228, sizeof(__pyx_k__228), 0, 1, 0, 1},
  {&__pyx_n_u__229, __pyx_k__229, sizeof(__pyx_k__229), 0, 1, 0, 1},
  {&__pyx_n_u__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 1},
  {&__pyx_n_u__230, __pyx_k__230, sizeof(__pyx_k__230), 0, 1, 0, 1},
  {&__pyx_n_u__231, __pyx_k__231, sizeof(__pyx_k__231), 0, 1, 0, 1},
  {&__pyx_n_u__232, __pyx_k__232, sizeof(__pyx_k__232), 0, 1, 0, 1},
  {&__pyx_n_u__233, __pyx_k__233, sizeof(__pyx_k__233), 0, 1, 0, 1},
  {&__pyx_n_u__234, __pyx_k__234, sizeof(__pyx_k__234), 0, 1, 0, 1},
  {&__pyx_n_u__235, __pyx_k__235, sizeof(__pyx_k__235), 0, 1, 0, 1},
  {&__pyx_n_u__236, __pyx_k__236, sizeof(__pyx_k__236), 0, 1, 0, 1},
  {&__pyx_n_u__237, __pyx_k__237, sizeof(__pyx_k__237), 0, 1, 0, 1},
  {&__pyx_n_u__238, __pyx_k__238, sizeof(__pyx_k__238), 0, 1, 0, 1},
  {&__pyx_n_u__239, __pyx_k__239, sizeof(__pyx_k__239), 0, 1, 0, 1},
  {&__pyx_n_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 1},
  {&__pyx_kp_u__240, __pyx_k__240, sizeof(__pyx_k__240), 0, 1, 0, 0},
  {&__pyx_kp_u__241, __pyx_k__241, sizeof(__pyx_k__241), 0, 1, 0, 0},
  {&__pyx_kp_u__242, __pyx_k__242, sizeof(__pyx_k__242), 0, 1, 0, 0},
  {&__pyx_n_u__243, __pyx_k__243, sizeof(__pyx_k__243), 0, 1, 0, 1},
  {&__pyx_n_u__244, __pyx_k__244, sizeof(__pyx_k__244), 0, 1, 0, 1},
  {&__pyx_kp_u__245, __pyx_k__245, sizeof(__pyx_k__245), 0, 1, 0, 0},
  {&__pyx_kp_u__246, __pyx_k__246, sizeof(__pyx_k__246), 0, 1, 0, 0},
  {&__pyx_n_u__247, __pyx_k__247, sizeof(__pyx_k__247), 0, 1, 0, 1},
  {&__pyx_n_u__249, __pyx_k__249, sizeof(__pyx_k__249), 0, 1, 0, 1},
  {&__pyx_n_u__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 1},
  {&__pyx_n_u__250, __pyx_k__250, sizeof(__pyx_k__250), 0, 1, 0, 1},
  {&__pyx_n_u__251, __pyx_k__251, sizeof(__pyx_k__251), 0, 1, 0, 1},
  {&__pyx_n_u__252, __pyx_k__252, sizeof(__pyx_k__252), 0, 1, 0, 1},
  {&__pyx_n_u__253, __pyx_k__253, sizeof(__pyx_k__253), 0, 1, 0, 1},
  {&__pyx_n_u__254, __pyx_k__254, sizeof(__pyx_k__254), 0, 1, 0, 1},
  {&__pyx_n_u__255, __pyx_k__255, sizeof(__pyx_k__255), 0, 1, 0, 1},
  {&__pyx_n_u__256, __pyx_k__256, sizeof(__pyx_k__256), 0, 1, 0, 1},
  {&__pyx_n_u__257, __pyx_k__257, sizeof(__pyx_k__257), 0, 1, 0, 1},
  {&__pyx_n_u__258, __pyx_k__258, sizeof(__pyx_k__258), 0, 1, 0, 1},
  {&__pyx_n_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 1},
  {&__pyx_n_u__261, __pyx_k__261, sizeof(__pyx_k__261), 0, 1, 0, 1},
  {&__pyx_n_u__263, __pyx_k__263, sizeof(__pyx_k__263), 0, 1, 0, 1},
  {&__pyx_n_u__265, __pyx_k__265, sizeof(__pyx_k__265), 0, 1, 0, 1},
  {&__pyx_n_u__267, __pyx_k__267, sizeof(__pyx_k__267), 0, 1, 0, 1},
  {&__pyx_n_u__269, __pyx_k__269, sizeof(__pyx_k__269), 0, 1, 0, 1},
  {&__pyx_n_u__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 1},
  {&__pyx_n_u__271, __pyx_k__271, sizeof(__pyx_k__271), 0, 1, 0, 1},
  {&__pyx_n_u__273, __pyx_k__273, sizeof(__pyx_k__273), 0, 1, 0, 1},
  {&__pyx_n_u__275, __pyx_k__275, sizeof(__pyx_k__275), 0, 1, 0, 1},
  {&__pyx_n_u__277, __pyx_k__277, sizeof(__pyx_k__277), 0, 1, 0, 1},
  {&__pyx_n_u__279, __pyx_k__279, sizeof(__pyx_k__279), 0, 1, 0, 1},
  {&__pyx_n_u__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 1},
  {&__pyx_n_u__281, __pyx_k__281, sizeof(__pyx_k__281), 0, 1, 0, 1},
  {&__pyx_n_u__283, __pyx_k__283, sizeof(__pyx_k__283), 0, 1, 0, 1},
  {&__pyx_n_u__285, __pyx_k__285, sizeof(__pyx_k__285), 0, 1, 0, 1},
  {&__pyx_n_u__287, __pyx_k__287, sizeof(__pyx_k__287), 0, 1, 0, 1},
  {&__pyx_n_u__289, __pyx_k__289, sizeof(__pyx_k__289), 0, 1, 0, 1},
  {&__pyx_n_u__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 1, 0, 1},
  {&__pyx_n_u__291, __pyx_k__291, sizeof(__pyx_k__291), 0, 1, 0, 1},
  {&__pyx_n_u__293, __pyx_k__293, sizeof(__pyx_k__293), 0, 1, 0, 1},
  {&__pyx_n_u__295, __pyx_k__295, sizeof(__pyx_k__295), 0, 1, 0, 1},
  {&__pyx_n_u__297, __pyx_k__297, sizeof(__pyx_k__297), 0, 1, 0, 1},
  {&__pyx_n_u__299, __pyx_k__299, sizeof(__pyx_k__299), 0, 1, 0, 1},
  {&__pyx_n_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 1},
  {&__pyx_n_u__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 1},
  {&__pyx_n_u__301, __pyx_k__301, sizeof(__pyx_k__301), 0, 1, 0, 1},
  {&__pyx_n_u__304, __pyx_k__304, sizeof(__pyx_k__304), 0, 1, 0, 1},
  {&__pyx_n_u__306, __pyx_k__306, sizeof(__pyx_k__306), 0, 1, 0, 1},
  {&__pyx_n_u__308, __pyx_k__308, sizeof(__pyx_k__308), 0, 1, 0, 1},
  {&__pyx_n_u__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 1, 0, 1},
  {&__pyx_n_u__310, __pyx_k__310, sizeof(__pyx_k__310), 0, 1, 0, 1},
  {&__pyx_n_u__312, __pyx_k__312, sizeof(__pyx_k__312), 0, 1, 0, 1},
  {&__pyx_n_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 1},
  {&__pyx_n_u__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 1, 0, 1},
  {&__pyx_n_u__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 1, 0, 1},
  {&__pyx_n_u__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 1, 0, 1},
  {&__pyx_n_u__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 1, 0, 1},
  {&__pyx_n_u__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 1, 0, 1},
  {&__pyx_n_u__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 1, 0, 1},
  {&__pyx_n_u__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 1, 0, 1},
  {&__pyx_n_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 1},
  {&__pyx_n_u__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 1, 0, 1},
  {&__pyx_n_u__41, __pyx_k__41, sizeof(__pyx_k__41), 0, 1, 0, 1},
  {&__pyx_n_u__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 1, 0, 1},
  {&__pyx_n_u__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 1, 0, 1},
  {&__pyx_n_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 1},
  {&__pyx_n_u__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 1, 0, 1},
  {&__pyx_n_u__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 1, 0, 1},
  {&__pyx_n_u__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 1, 0, 1},
  {&__pyx_n_u__48, __pyx_k__48, sizeof(__pyx_k__48), 0, 1, 0, 1},
  {&__pyx_n_u__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 1, 0, 1},
  {&__pyx_n_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 1},
  {&__pyx_n_u__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 1, 0, 1},
  {&__pyx_n_u__51, __pyx_k__51, sizeof(__pyx_k__51), 0, 1, 0, 1},
  {&__pyx_n_u__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 1, 0, 1},
  {&__pyx_kp_u__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 1, 0, 0},
  {&__pyx_kp_u__54, __pyx_k__54, sizeof(__pyx_k__54), 0, 1, 0, 0},
  {&__pyx_kp_u__55, __pyx_k__55, sizeof(__pyx_k__55), 0, 1, 0, 0},
  {&__pyx_kp_u__56, __pyx_k__56, sizeof(__pyx_k__56), 0, 1, 0, 0},
  {&__pyx_kp_u__57, __pyx_k__57, sizeof(__pyx_k__57), 0, 1, 0, 0},
  {&__pyx_kp_u__58, __pyx_k__58, sizeof(__pyx_k__58), 0, 1, 0, 0},
  {&__pyx_kp_u__59, __pyx_k__59, sizeof(__pyx_k__59), 0, 1, 0, 0},
  {&__pyx_n_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 1},
  {&__pyx_kp_u__60, __pyx_k__60, sizeof(__pyx_k__60), 0, 1, 0, 0},
  {&__pyx_kp_u__61, __pyx_k__61, sizeof(__pyx_k__61), 0, 1, 0, 0},
  {&__pyx_kp_u__62, __pyx_k__62, sizeof(__pyx_k__62), 0, 1, 0, 0},
  {&__pyx_kp_u__63, __pyx_k__63, sizeof(__pyx_k__63), 0, 1, 0, 0},
  {&__pyx_kp_u__64, __pyx_k__64, sizeof(__pyx_k__64), 0, 1, 0, 0},
  {&__pyx_kp_u__65, __pyx_k__65, sizeof(__pyx_k__65), 0, 1, 0, 0},
  {&__pyx_kp_u__66, __pyx_k__66, sizeof(__pyx_k__66), 0, 1, 0, 0},
  {&__pyx_kp_u__67, __pyx_k__67, sizeof(__pyx_k__67), 0, 1, 0, 0},
  {&__pyx_kp_u__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0, 0},
  {&__pyx_kp_u__69, __pyx_k__69, sizeof(__pyx_k__69), 0, 1, 0, 0},
  {&__pyx_n_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 1},
  {&__pyx_kp_u__70, __pyx_k__70, sizeof(__pyx_k__70), 0, 1, 0, 0},
  {&__pyx_kp_u__71, __pyx_k__71, sizeof(__pyx_k__71), 0, 1, 0, 0},
  {&__pyx_kp_u__72, __pyx_k__72, sizeof(__pyx_k__72), 0, 1, 0, 0},
  {&__pyx_kp_u__73, __pyx_k__73, sizeof(__pyx_k__73), 0, 1, 0, 0},
  {&__pyx_kp_u__74, __pyx_k__74, sizeof(__pyx_k__74), 0, 1, 0, 0},
  {&__pyx_kp_u__75, __pyx_k__75, sizeof(__pyx_k__75), 0, 1, 0, 0},
  {&__pyx_kp_u__76, __pyx_k__76, sizeof(__pyx_k__76), 0, 1, 0, 0},
  {&__pyx_kp_u__77, __pyx_k__77, sizeof(__pyx_k__77), 0, 1, 0, 0},
  {&__pyx_kp_u__78, __pyx_k__78, sizeof(__pyx_k__78), 0, 1, 0, 0},
  {&__pyx_kp_u__79, __pyx_k__79, sizeof(__pyx_k__79), 0, 1, 0, 0},
  {&__pyx_n_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 1},
  {&__pyx_kp_u__80, __pyx_k__80, sizeof(__pyx_k__80), 0, 1, 0, 0},
  {&__pyx_kp_u__81, __pyx_k__81, sizeof(__pyx_k__81), 0, 1, 0, 0},
  {&__pyx_kp_u__82, __pyx_k__82, sizeof(__pyx_k__82), 0, 1, 0, 0},
  {&__pyx_kp_u__83, __pyx_k__83, sizeof(__pyx_k__83), 0, 1, 0, 0},
  {&__pyx_kp_u__84, __pyx_k__84, sizeof(__pyx_k__84), 0, 1, 0, 0},
  {&__pyx_kp_u__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 1, 0, 0},
  {&__pyx_kp_u__87, __pyx_k__87, sizeof(__pyx_k__87), 0, 1, 0, 0},
  {&__pyx_kp_u__88, __pyx_k__88, sizeof(__pyx_k__88), 0, 1, 0, 0},
  {&__pyx_kp_u__89, __pyx_k__89, sizeof(__pyx_k__89), 0, 1, 0, 0},
  {&__pyx_n_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 1},
  {&__pyx_kp_u__90, __pyx_k__90, sizeof(__pyx_k__90), 0, 1, 0, 0},
  {&__pyx_kp_u__91, __pyx_k__91, sizeof(__pyx_k__91), 0, 1, 0, 0},
  {&__pyx_kp_u__92, __pyx_k__92, sizeof(__pyx_k__92), 0, 1, 0, 0},
  {&__pyx_kp_u__93, __pyx_k__93, sizeof(__pyx_k__93), 0, 1, 0, 0},
  {&__pyx_kp_u__94, __pyx_k__94, sizeof(__pyx_k__94), 0, 1, 0, 0},
  {&__pyx_kp_u__95, __pyx_k__95, sizeof(__pyx_k__95), 0, 1, 0, 0},
  {&__pyx_kp_u__96, __pyx_k__96, sizeof(__pyx_k__96), 0, 1, 0, 0},
  {&__pyx_kp_u__97, __pyx_k__97, sizeof(__pyx_k__97), 0, 1, 0, 0},
  {&__pyx_kp_u__98, __pyx_k__98, sizeof(__pyx_k__98), 0, 1, 0, 0},
  {&__pyx_kp_u__99, __pyx_k__99, sizeof(__pyx_k__99), 0, 1, 0, 0},
  {&__pyx_n_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_u_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 1, 0, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_digit, __pyx_k_digit, sizeof(__pyx_k_digit), 0, 0, 1, 1},
  {&__pyx_n_u_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 1, 0, 1},
  {&__pyx_n_u_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
  {&__pyx_n_u_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 1, 0, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_u_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 1, 0, 1},
  {&__pyx_n_u_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 1, 0, 1},
  {&__pyx_n_u_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 1, 0, 1},
  {&__pyx_n_u_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 1, 0, 1},
  {&__pyx_n_s_kana, __pyx_k_kana, sizeof(__pyx_k_kana), 0, 0, 1, 1},
  {&__pyx_n_u_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 1, 0, 1},
  {&__pyx_n_u_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 1, 0, 1},
  {&__pyx_n_u_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 1, 0, 1},
  {&__pyx_n_u_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 1, 0, 1},
  {&__pyx_n_u_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 1, 0, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_n_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
  {&__pyx_n_u_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_u_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 1, 0, 1},
  {&__pyx_n_u_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 1, 0, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_u_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 1, 0, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 76, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mojimoji.pyx":11
 * 
 * ASCII_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'',
 */
  __pyx_tuple__86 = PyTuple_Pack(85, __pyx_n_u_, __pyx_n_u__2, __pyx_n_u__3, __pyx_n_u__4, __pyx_n_u__5, __pyx_n_u__6, __pyx_n_u__7, __pyx_n_u__8, __pyx_n_u__9, __pyx_n_u__10, __pyx_n_u__11, __pyx_n_u__12, __pyx_n_u__13, __pyx_n_u__14, __pyx_n_u__15, __pyx_n_u__16, __pyx_n_u__17, __pyx_n_u__18, __pyx_n_u__19, __pyx_n_u__20, __pyx_n_u__21, __pyx_n_u__22, __pyx_n_u__23, __pyx_n_u__24, __pyx_n_u__25, __pyx_n_u__26, __pyx_n_u__27, __pyx_n_u__28, __pyx_n_u__29, __pyx_n_u__30, __pyx_n_u__31, __pyx_n_u__32, __pyx_n_u__33, __pyx_n_u__34, __pyx_n_u__35, __pyx_n_u__36, __pyx_n_u__37, __pyx_n_u__38, __pyx_n_u__39, __pyx_n_u__40, __pyx_n_u__41, __pyx_n_u__42, __pyx_n_u__43, __pyx_n_u__44, __pyx_n_u__45, __pyx_n_u__46, __pyx_n_u__47, __pyx_n_u__48, __pyx_n_u__49, __pyx_n_u__50, __pyx_n_u__51, __pyx_n_u__52, __pyx_kp_u__53, __pyx_kp_u__54, __pyx_kp_u__55, __pyx_kp_u__56, __pyx_kp_u__57, __pyx_kp_u__58, __pyx_kp_u__59, __pyx_kp_u__60, __pyx_kp_u__61, __pyx_kp_u__62, __pyx_kp_u__63, __pyx_kp_u__64, __pyx_kp_u__65, __pyx_kp_u__66, __pyx_kp_u__67, __pyx_kp_u__68, __pyx_kp_u__69, __pyx_kp_u__70, __pyx_kp_u__71, __pyx_kp_u__72, __pyx_kp_u__73, __pyx_kp_u__74, __pyx_kp_u__75, __pyx_kp_u__76, __pyx_kp_u__77, __pyx_kp_u__78, __pyx_kp_u__79, __pyx_kp_u__80, __pyx_kp_u__81, __pyx_kp_u__82, __pyx_kp_u__83, __pyx_kp_u__84, __pyx_kp_u__85); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "mojimoji.pyx":23
 * 
 * ASCII_HANKAKU_CHARS = (
 *     u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', u'i', u'j', u'k',             # <<<<<<<<<<<<<<
 *     u'l', u'm', u'n', u'o', u'p', u'q', u'r', u's', u't', u'u', u'v',
 *     u'w', u'x', u'y', u'z',
 */
  __pyx_tuple__120 = PyTuple_Pack(85, __pyx_n_u_a, __pyx_n_u_b, __pyx_n_u_c, __pyx_n_u_d, __pyx_n_u_e, __pyx_n_u_f, __pyx_n_u_g, __pyx_n_u_h, __pyx_n_u_i, __pyx_n_u_j, __pyx_n_u_k, __pyx_n_u_l, __pyx_n_u_m, __pyx_n_u_n, __pyx_n_u_o, __pyx_n_u_p, __pyx_n_u_q, __pyx_n_u_r, __pyx_n_u_s, __pyx_n_u_t, __pyx_n_u_u, __pyx_n_u_v, __pyx_n_u_w, __pyx_n_u_x, __pyx_n_u_y, __pyx_n_u_z, __pyx_n_u_A, __pyx_n_u_B, __pyx_n_u_C, __pyx_n_u_D, __pyx_n_u_E, __pyx_n_u_F, __pyx_n_u_G, __pyx_n_u_H, __pyx_n_u_I, __pyx_n_u_J, __pyx_n_u_K, __pyx_n_u_L, __pyx_n_u_M, __pyx_n_u_N, __pyx_n_u_O, __pyx_n_u_P, __pyx_n_u_Q, __pyx_n_u_R, __pyx_n_u_S, __pyx_n_u_T, __pyx_n_u_U, __pyx_n_u_V, __pyx_n_u_W, __pyx_n_u_X, __pyx_n_u_Y, __pyx_n_u_Z, __pyx_kp_u__87, __pyx_kp_u__88, __pyx_kp_u__89, __pyx_kp_u__90, __pyx_kp_u__91, __pyx_kp_u__92, __pyx_kp_u__93, __pyx_kp_u__94, __pyx_kp_u__95, __pyx_kp_u__96, __pyx_kp_u__97, __pyx_kp_u__98, __pyx_kp_u__99, __pyx_kp_u__100, __pyx_kp_u__101, __pyx_kp_u__102, __pyx_kp_u__103, __pyx_kp_u__104, __pyx_kp_u__105, __pyx_kp_u__106, __pyx_kp_u__107, __pyx_kp_u__108, __pyx_kp_u__109, __pyx_kp_u__110, __pyx_kp_u__111, __pyx_kp_u__112, __pyx_n_u__113, __pyx_kp_u__114, __pyx_kp_u__115, __pyx_kp_u__116, __pyx_kp_u__117, __pyx_kp_u__118, __pyx_kp_u__119); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "mojimoji.pyx":35
 * 
 * KANA_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 */
  __pyx_tuple__184 = PyTuple_Pack(63, __pyx_n_u__121, __pyx_n_u__122, __pyx_n_u__123, __pyx_n_u__124, __pyx_n_u__125, __pyx_n_u__126, __pyx_n_u__127, __pyx_n_u__128, __pyx_n_u__129, __pyx_n_u__130, __pyx_n_u__131, __pyx_n_u__132, __pyx_n_u__133, __pyx_n_u__134, __pyx_n_u__135, __pyx_n_u__136, __pyx_n_u__137, __pyx_n_u__138, __pyx_n_u__139, __pyx_n_u__140, __pyx_n_u__141, __pyx_n_u__142, __pyx_n_u__143, __pyx_n_u__144, __pyx_n_u__145, __pyx_n_u__146, __pyx_n_u__147, __pyx_n_u__148, __pyx_n_u__149, __pyx_n_u__150, __pyx_n_u__151, __pyx_n_u__152, __pyx_n_u__153, __pyx_n_u__154, __pyx_n_u__155, __pyx_n_u__156, __pyx_n_u__157, __pyx_n_u__158, __pyx_n_u__159, __pyx_n_u__160, __pyx_n_u__161, __pyx_n_u__162, __pyx_n_u__163, __pyx_n_u__164, __pyx_n_u__165, __pyx_n_u__166, __pyx_n_u__167, __pyx_n_u__168, __pyx_n_u__169, __pyx_n_u__170, __pyx_n_u__171, __pyx_n_u__172, __pyx_n_u__173, __pyx_n_u__174, __pyx_n_u__175, __pyx_kp_u__176, __pyx_kp_u__177, __pyx_kp_u__178, __pyx_kp_u__179, __pyx_kp_u__180, __pyx_kp_u__181, __pyx_kp_u__182, __pyx_n_u__183); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "mojimoji.pyx":45
 * 
 * KANA_HANKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 */
  __pyx_tuple__248 = PyTuple_Pack(63, __pyx_n_u__185, __pyx_n_u__186, __pyx_n_u__187, __pyx_n_u__188, __pyx_n_u__189, __pyx_n_u__190, __pyx_n_u__191, __pyx_n_u__192, __pyx_n_u__193, __pyx_n_u__194, __pyx_n_u__195, __pyx_n_u__196, __pyx_n_u__197, __pyx_n_u__198, __pyx_n_u__199, __pyx_n_u__200, __pyx_n_u__201, __pyx_n_u__202, __pyx_n_u__203, __pyx_n_u__204, __pyx_n_u__205, __pyx_n_u__206, __pyx_n_u__207, __pyx_n_u__208, __pyx_n_u__209, __pyx_n_u__210, __pyx_n_u__211, __pyx_n_u__212, __pyx_n_u__213, __pyx_n_u__214, __pyx_n_u__215, __pyx_n_u__216, __pyx_n_u__217, __pyx_n_u__218, __pyx_n_u__219, __pyx_n_u__220, __pyx_n_u__221, __pyx_n_u__222, __pyx_n_u__223, __pyx_n_u__224, __pyx_n_u__225, __pyx_n_u__226, __pyx_n_u__227, __pyx_n_u__228, __pyx_n_u__229, __pyx_n_u__230, __pyx_n_u__231, __pyx_n_u__232, __pyx_n_u__233, __pyx_n_u__234, __pyx_n_u__235, __pyx_n_u__236, __pyx_n_u__237, __pyx_n_u__238, __pyx_n_u__239, __pyx_kp_u__240, __pyx_kp_u__241, __pyx_kp_u__242, __pyx_n_u__243, __pyx_n_u__244, __pyx_kp_u__245, __pyx_kp_u__246, __pyx_n_u__247); if (unlikely(!__pyx_tuple__248)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__248);
  __Pyx_GIVEREF(__pyx_tuple__248);

  /* "mojimoji.pyx":55
 * 
 * DIGIT_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u''             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_tuple__259 = PyTuple_Pack(10, __pyx_n_u__249, __pyx_n_u__250, __pyx_n_u__251, __pyx_n_u__252, __pyx_n_u__253, __pyx_n_u__254, __pyx_n_u__255, __pyx_n_u__256, __pyx_n_u__257, __pyx_n_u__258); if (unlikely(!__pyx_tuple__259)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__259);
  __Pyx_GIVEREF(__pyx_tuple__259);

  /* "mojimoji.pyx":59
 * 
 * DIGIT_HANKAKU_CHARS = (
 *     u'0', u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9'             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_tuple__260 = PyTuple_Pack(10, __pyx_kp_u_0, __pyx_kp_u_1, __pyx_kp_u_2, __pyx_kp_u_3, __pyx_kp_u_4, __pyx_kp_u_5, __pyx_kp_u_6, __pyx_kp_u_7, __pyx_kp_u_8, __pyx_kp_u_9); if (unlikely(!__pyx_tuple__260)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);

  /* "mojimoji.pyx":63
 * 
 * KANA_TEN_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 */
  __pyx_tuple__262 = PyTuple_Pack(2, __pyx_n_u__261, __pyx_n_u__190); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_tuple__264 = PyTuple_Pack(2, __pyx_n_u__263, __pyx_n_u__191); if (unlikely(!__pyx_tuple__264)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  __pyx_tuple__266 = PyTuple_Pack(2, __pyx_n_u__265, __pyx_n_u__192); if (unlikely(!__pyx_tuple__266)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__266);
  __Pyx_GIVEREF(__pyx_tuple__266);
  __pyx_tuple__268 = PyTuple_Pack(2, __pyx_n_u__267, __pyx_n_u__193); if (unlikely(!__pyx_tuple__268)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_tuple__270 = PyTuple_Pack(2, __pyx_n_u__269, __pyx_n_u__194); if (unlikely(!__pyx_tuple__270)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);

  /* "mojimoji.pyx":64
 * KANA_TEN_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 */
  __pyx_tuple__272 = PyTuple_Pack(2, __pyx_n_u__271, __pyx_n_u__195); if (unlikely(!__pyx_tuple__272)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__272);
  __Pyx_GIVEREF(__pyx_tuple__272);
  __pyx_tuple__274 = PyTuple_Pack(2, __pyx_n_u__273, __pyx_n_u__196); if (unlikely(!__pyx_tuple__274)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__274);
  __Pyx_GIVEREF(__pyx_tuple__274);
  __pyx_tuple__276 = PyTuple_Pack(2, __pyx_n_u__275, __pyx_n_u__197); if (unlikely(!__pyx_tuple__276)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__276);
  __Pyx_GIVEREF(__pyx_tuple__276);
  __pyx_tuple__278 = PyTuple_Pack(2, __pyx_n_u__277, __pyx_n_u__198); if (unlikely(!__pyx_tuple__278)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__278);
  __Pyx_GIVEREF(__pyx_tuple__278);
  __pyx_tuple__280 = PyTuple_Pack(2, __pyx_n_u__279, __pyx_n_u__199); if (unlikely(!__pyx_tuple__280)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);

  /* "mojimoji.pyx":65
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u'')
 */
  __pyx_tuple__282 = PyTuple_Pack(2, __pyx_n_u__281, __pyx_n_u__200); if (unlikely(!__pyx_tuple__282)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__282);
  __Pyx_GIVEREF(__pyx_tuple__282);
  __pyx_tuple__284 = PyTuple_Pack(2, __pyx_n_u__283, __pyx_n_u__201); if (unlikely(!__pyx_tuple__284)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__284);
  __Pyx_GIVEREF(__pyx_tuple__284);
  __pyx_tuple__286 = PyTuple_Pack(2, __pyx_n_u__285, __pyx_n_u__202); if (unlikely(!__pyx_tuple__286)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  __pyx_tuple__288 = PyTuple_Pack(2, __pyx_n_u__287, __pyx_n_u__203); if (unlikely(!__pyx_tuple__288)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  __pyx_tuple__290 = PyTuple_Pack(2, __pyx_n_u__289, __pyx_n_u__204); if (unlikely(!__pyx_tuple__290)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__290);
  __Pyx_GIVEREF(__pyx_tuple__290);

  /* "mojimoji.pyx":66
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u'')
 * )
 */
  __pyx_tuple__292 = PyTuple_Pack(2, __pyx_n_u__291, __pyx_n_u__210); if (unlikely(!__pyx_tuple__292)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  __pyx_tuple__294 = PyTuple_Pack(2, __pyx_n_u__293, __pyx_n_u__211); if (unlikely(!__pyx_tuple__294)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__294);
  __Pyx_GIVEREF(__pyx_tuple__294);
  __pyx_tuple__296 = PyTuple_Pack(2, __pyx_n_u__295, __pyx_n_u__212); if (unlikely(!__pyx_tuple__296)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  __pyx_tuple__298 = PyTuple_Pack(2, __pyx_n_u__297, __pyx_n_u__213); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_tuple__300 = PyTuple_Pack(2, __pyx_n_u__299, __pyx_n_u__214); if (unlikely(!__pyx_tuple__300)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);

  /* "mojimoji.pyx":67
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u'')             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_tuple__302 = PyTuple_Pack(2, __pyx_n_u__301, __pyx_n_u__187); if (unlikely(!__pyx_tuple__302)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__302);
  __Pyx_GIVEREF(__pyx_tuple__302);

  /* "mojimoji.pyx":63
 * 
 * KANA_TEN_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 */
  __pyx_tuple__303 = PyTuple_Pack(21, __pyx_tuple__262, __pyx_tuple__264, __pyx_tuple__266, __pyx_tuple__268, __pyx_tuple__270, __pyx_tuple__272, __pyx_tuple__274, __pyx_tuple__276, __pyx_tuple__278, __pyx_tuple__280, __pyx_tuple__282, __pyx_tuple__284, __pyx_tuple__286, __pyx_tuple__288, __pyx_tuple__290, __pyx_tuple__292, __pyx_tuple__294, __pyx_tuple__296, __pyx_tuple__298, __pyx_tuple__300, __pyx_tuple__302); if (unlikely(!__pyx_tuple__303)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__303);
  __Pyx_GIVEREF(__pyx_tuple__303);

  /* "mojimoji.pyx":71
 * 
 * KANA_MARU_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u'')             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_tuple__305 = PyTuple_Pack(2, __pyx_n_u__304, __pyx_n_u__210); if (unlikely(!__pyx_tuple__305)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__305);
  __Pyx_GIVEREF(__pyx_tuple__305);
  __pyx_tuple__307 = PyTuple_Pack(2, __pyx_n_u__306, __pyx_n_u__211); if (unlikely(!__pyx_tuple__307)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__307);
  __Pyx_GIVEREF(__pyx_tuple__307);
  __pyx_tuple__309 = PyTuple_Pack(2, __pyx_n_u__308, __pyx_n_u__212); if (unlikely(!__pyx_tuple__309)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__309);
  __Pyx_GIVEREF(__pyx_tuple__309);
  __pyx_tuple__311 = PyTuple_Pack(2, __pyx_n_u__310, __pyx_n_u__213); if (unlikely(!__pyx_tuple__311)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__311);
  __Pyx_GIVEREF(__pyx_tuple__311);
  __pyx_tuple__313 = PyTuple_Pack(2, __pyx_n_u__312, __pyx_n_u__214); if (unlikely(!__pyx_tuple__313)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__313);
  __Pyx_GIVEREF(__pyx_tuple__313);
  __pyx_tuple__314 = PyTuple_Pack(5, __pyx_tuple__305, __pyx_tuple__307, __pyx_tuple__309, __pyx_tuple__311, __pyx_tuple__313); if (unlikely(!__pyx_tuple__314)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__314);
  __Pyx_GIVEREF(__pyx_tuple__314);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmojimoji(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmojimoji(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_mojimoji(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_mojimoji(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_mojimoji(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_UNICODE __pyx_t_9;
  Py_UNICODE __pyx_t_10;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_mojimoji(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("mojimoji", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mojimoji) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mojimoji")) {
      if (unlikely(PyDict_SetItemString(modules, "mojimoji", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mojimoji.pyx":11
 * 
 * ASCII_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ASCII_ZENKAKU_CHARS, __pyx_tuple__86) < 0) __PYX_ERR(0, 10, __pyx_L1_error)

  /* "mojimoji.pyx":23
 * 
 * ASCII_HANKAKU_CHARS = (
 *     u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', u'i', u'j', u'k',             # <<<<<<<<<<<<<<
 *     u'l', u'm', u'n', u'o', u'p', u'q', u'r', u's', u't', u'u', u'v',
 *     u'w', u'x', u'y', u'z',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ASCII_HANKAKU_CHARS, __pyx_tuple__120) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "mojimoji.pyx":35
 * 
 * KANA_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_ZENKAKU_CHARS, __pyx_tuple__184) < 0) __PYX_ERR(0, 34, __pyx_L1_error)

  /* "mojimoji.pyx":45
 * 
 * KANA_HANKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',             # <<<<<<<<<<<<<<
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u'',
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_HANKAKU_CHARS, __pyx_tuple__248) < 0) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "mojimoji.pyx":55
 * 
 * DIGIT_ZENKAKU_CHARS = (
 *     u'', u'', u'', u'', u'', u'', u'', u'', u'', u''             # <<<<<<<<<<<<<<
 * )
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIGIT_ZENKAKU_CHARS, __pyx_tuple__259) < 0) __PYX_ERR(0, 54, __pyx_L1_error)

  /* "mojimoji.pyx":59
 * 
 * DIGIT_HANKAKU_CHARS = (
 *     u'0', u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9'             # <<<<<<<<<<<<<<
 * )
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIGIT_HANKAKU_CHARS, __pyx_tuple__260) < 0) __PYX_ERR(0, 58, __pyx_L1_error)

  /* "mojimoji.pyx":63
 * 
 * KANA_TEN_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),             # <<<<<<<<<<<<<<
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u''),
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_TEN_MAP, __pyx_tuple__303) < 0) __PYX_ERR(0, 62, __pyx_L1_error)

  /* "mojimoji.pyx":71
 * 
 * KANA_MARU_MAP = (
 *     (u'', u''), (u'', u''), (u'', u''), (u'', u''), (u'', u'')             # <<<<<<<<<<<<<<
 * )
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_MARU_MAP, __pyx_tuple__314) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "mojimoji.pyx":76
 * cdef table_type ascii_zh_table, ascii_hz_table
 * 
 * for (z, h) in zip(ASCII_ZENKAKU_CHARS, ASCII_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     ascii_zh_table[z] = h
 *     ascii_hz_table[h] = z
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ASCII_ZENKAKU_CHARS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_ASCII_HANKAKU_CHARS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 76, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 76, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 76, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_z, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_6) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "mojimoji.pyx":77
 * 
 * for (z, h) in zip(ASCII_ZENKAKU_CHARS, ASCII_HANKAKU_CHARS):
 *     ascii_zh_table[z] = h             # <<<<<<<<<<<<<<
 *     ascii_hz_table[h] = z
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_ascii_zh_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":78
 * for (z, h) in zip(ASCII_ZENKAKU_CHARS, ASCII_HANKAKU_CHARS):
 *     ascii_zh_table[z] = h
 *     ascii_hz_table[h] = z             # <<<<<<<<<<<<<<
 * 
 * cdef table_type kana_zh_table, kana_hz_table
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_ascii_hz_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":76
 * cdef table_type ascii_zh_table, ascii_hz_table
 * 
 * for (z, h) in zip(ASCII_ZENKAKU_CHARS, ASCII_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     ascii_zh_table[z] = h
 *     ascii_hz_table[h] = z
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "mojimoji.pyx":82
 * cdef table_type kana_zh_table, kana_hz_table
 * 
 * for (z, h) in zip(KANA_ZENKAKU_CHARS, KANA_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     kana_zh_table[z] = h
 *     kana_hz_table[h] = z
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_KANA_ZENKAKU_CHARS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_KANA_HANKAKU_CHARS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_6);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 82, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 82, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 82, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_z, __pyx_t_3) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_1) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "mojimoji.pyx":83
 * 
 * for (z, h) in zip(KANA_ZENKAKU_CHARS, KANA_HANKAKU_CHARS):
 *     kana_zh_table[z] = h             # <<<<<<<<<<<<<<
 *     kana_hz_table[h] = z
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_kana_zh_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":84
 * for (z, h) in zip(KANA_ZENKAKU_CHARS, KANA_HANKAKU_CHARS):
 *     kana_zh_table[z] = h
 *     kana_hz_table[h] = z             # <<<<<<<<<<<<<<
 * 
 * cdef table_type digit_zh_table, digit_hz_table
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_kana_hz_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":82
 * cdef table_type kana_zh_table, kana_hz_table
 * 
 * for (z, h) in zip(KANA_ZENKAKU_CHARS, KANA_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     kana_zh_table[z] = h
 *     kana_hz_table[h] = z
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "mojimoji.pyx":88
 * cdef table_type digit_zh_table, digit_hz_table
 * 
 * for (z, h) in zip(DIGIT_ZENKAKU_CHARS, DIGIT_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     digit_zh_table[z] = h
 *     digit_hz_table[h] = z
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_DIGIT_ZENKAKU_CHARS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_DIGIT_HANKAKU_CHARS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 88, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 88, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L13_unpacking_done;
      __pyx_L12_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 88, __pyx_L1_error)
      __pyx_L13_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_z, __pyx_t_6) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_3) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mojimoji.pyx":89
 * 
 * for (z, h) in zip(DIGIT_ZENKAKU_CHARS, DIGIT_HANKAKU_CHARS):
 *     digit_zh_table[z] = h             # <<<<<<<<<<<<<<
 *     digit_hz_table[h] = z
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_digit_zh_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":90
 * for (z, h) in zip(DIGIT_ZENKAKU_CHARS, DIGIT_HANKAKU_CHARS):
 *     digit_zh_table[z] = h
 *     digit_hz_table[h] = z             # <<<<<<<<<<<<<<
 * 
 * cdef table_type kana_ten_zh_table, kana_ten_hz_table
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_digit_hz_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":88
 * cdef table_type digit_zh_table, digit_hz_table
 * 
 * for (z, h) in zip(DIGIT_ZENKAKU_CHARS, DIGIT_HANKAKU_CHARS):             # <<<<<<<<<<<<<<
 *     digit_zh_table[z] = h
 *     digit_hz_table[h] = z
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mojimoji.pyx":94
 * cdef table_type kana_ten_zh_table, kana_ten_hz_table
 * 
 * for (z, h) in KANA_TEN_MAP:             # <<<<<<<<<<<<<<
 *     kana_ten_zh_table[z] = h
 *     kana_ten_hz_table[h] = z
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_KANA_TEN_MAP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 94, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 94, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 94, __pyx_L1_error)
      __pyx_L17_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_z, __pyx_t_3) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_6) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "mojimoji.pyx":95
 * 
 * for (z, h) in KANA_TEN_MAP:
 *     kana_ten_zh_table[z] = h             # <<<<<<<<<<<<<<
 *     kana_ten_hz_table[h] = z
 * 
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_1); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_1); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_8mojimoji_kana_ten_zh_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":96
 * for (z, h) in KANA_TEN_MAP:
 *     kana_ten_zh_table[z] = h
 *     kana_ten_hz_table[h] = z             # <<<<<<<<<<<<<<
 * 
 * cdef table_type kana_maru_zh_table, kana_maru_hz_table
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_1); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_1); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_8mojimoji_kana_ten_hz_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":94
 * cdef table_type kana_ten_zh_table, kana_ten_hz_table
 * 
 * for (z, h) in KANA_TEN_MAP:             # <<<<<<<<<<<<<<
 *     kana_ten_zh_table[z] = h
 *     kana_ten_hz_table[h] = z
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mojimoji.pyx":100
 * cdef table_type kana_maru_zh_table, kana_maru_hz_table
 * 
 * for (z, h) in KANA_MARU_MAP:             # <<<<<<<<<<<<<<
 *     kana_maru_zh_table[z] = h
 *     kana_maru_hz_table[h] = z
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_KANA_MARU_MAP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 100, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L21_unpacking_done;
      __pyx_L20_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 100, __pyx_L1_error)
      __pyx_L21_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_z, __pyx_t_6) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_3) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "mojimoji.pyx":101
 * 
 * for (z, h) in KANA_MARU_MAP:
 *     kana_maru_zh_table[z] = h             # <<<<<<<<<<<<<<
 *     kana_maru_hz_table[h] = z
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_kana_maru_zh_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":102
 * for (z, h) in KANA_MARU_MAP:
 *     kana_maru_zh_table[z] = h
 *     kana_maru_hz_table[h] = z             # <<<<<<<<<<<<<<
 * 
 * del ASCII_HANKAKU_CHARS, ASCII_ZENKAKU_CHARS,\
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_9 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UNICODE(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UNICODE)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8mojimoji_kana_maru_hz_table[__pyx_t_10]) = __pyx_t_9;

    /* "mojimoji.pyx":100
 * cdef table_type kana_maru_zh_table, kana_maru_hz_table
 * 
 * for (z, h) in KANA_MARU_MAP:             # <<<<<<<<<<<<<<
 *     kana_maru_zh_table[z] = h
 *     kana_maru_hz_table[h] = z
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mojimoji.pyx":104
 *     kana_maru_hz_table[h] = z
 * 
 * del ASCII_HANKAKU_CHARS, ASCII_ZENKAKU_CHARS,\             # <<<<<<<<<<<<<<
 *     KANA_HANKAKU_CHARS, KANA_ZENKAKU_CHARS,\
 *     DIGIT_HANKAKU_CHARS, DIGIT_ZENKAKU_CHARS,\
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_ASCII_HANKAKU_CHARS) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_ASCII_ZENKAKU_CHARS) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_HANKAKU_CHARS) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_ZENKAKU_CHARS) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_DIGIT_HANKAKU_CHARS) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_DIGIT_ZENKAKU_CHARS) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_TEN_MAP) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_MARU_MAP) < 0) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "mojimoji.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # -*- coding: utf-8 -*-
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mojimoji", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mojimoji");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* unicode_iter */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind) {
#if CYTHON_PEP393_ENABLED
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return -1;
    *kind   = PyUnicode_KIND(ustring);
    *length = PyUnicode_GET_LENGTH(ustring);
    *data   = PyUnicode_DATA(ustring);
#else
    *kind   = 0;
    *length = PyUnicode_GET_SIZE(ustring);
    *data   = (void*)PyUnicode_AS_UNICODE(ustring);
#endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectSetAttrStr */
    #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* ObjectAsPyUnicode */
    static CYTHON_INLINE Py_UNICODE __Pyx_PyObject_AsPy_UNICODE(PyObject* x) {
    long ival;
    #if CYTHON_PEP393_ENABLED
    #if Py_UNICODE_SIZE > 2
    const long maxval = 1114111;
    #else
    const long maxval = 65535;
    #endif
    #else
    static long maxval = 0;
    #endif
    if (PyUnicode_Check(x)) {
        if (unlikely(__Pyx_PyUnicode_GET_LENGTH(x) != 1)) {
            PyErr_Format(PyExc_ValueError,
                         "only single character unicode strings can be converted to Py_UNICODE, "
                         "got length %" CYTHON_FORMAT_SSIZE_T "d", __Pyx_PyUnicode_GET_LENGTH(x));
            return (Py_UNICODE)-1;
        }
        #if CYTHON_PEP393_ENABLED
        ival = PyUnicode_READ_CHAR(x, 0);
        #else
        return PyUnicode_AS_UNICODE(x)[0];
        #endif
    } else {
        #if !CYTHON_PEP393_ENABLED
        if (unlikely(!maxval))
            maxval = (long)PyUnicode_GetMax();
        #endif
        ival = __Pyx_PyInt_As_long(x);
    }
    if (unlikely(ival < 0)) {
        if (!PyErr_Occurred())
            PyErr_SetString(PyExc_OverflowError,
                            "cannot convert negative value to Py_UNICODE");
        return (Py_UNICODE)-1;
    } else if (unlikely(ival > maxval)) {
        PyErr_SetString(PyExc_OverflowError,
                        "value too large to convert to Py_UNICODE");
        return (Py_UNICODE)-1;
    }
    return (Py_UNICODE)ival;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
