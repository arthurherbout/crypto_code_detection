/*
 *
 * System5x7
 *
 *
 * File Name           : System5x7.h
 * Date                : 28 Oct 2008
 * Font size in bytes  : 470
 * Font width          : 5
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 127
 * Font used chars     : 94
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#ifndef SYSTEM5x7mod_H
#define SYSTEM5x7mod_H

#define SYSTEM5x7mod_WIDTH 5
#define SYSTEM5x7mod_HEIGHT 7

GLCDFONTDECL(System5x7mod) = {
    0x0, 0x0, // size of zero indicates fixed width font,
    0x05, // width
    0x07, // height
    0x20, // first char
    0x66, // char count
    
    // Fixed width; char width table not used !!!!
    
    // font data
  0x00, 0x00, 0x00, 0x00, 0x00,   // sp
 0x00, 0x00, 0x2f, 0x00, 0x00,   // !
 0x00, 0x07, 0x00, 0x07, 0x00,   // "
 0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
 0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
 0x23, 0x13, 0x08, 0x64, 0x62,   // %
 0x36, 0x49, 0x55, 0x22, 0x50,   // &
 0x00, 0x05, 0x03, 0x00, 0x00,   // '
 0x00, 0x1c, 0x22, 0x41, 0x00,   // (
 0x00, 0x41, 0x22, 0x1c, 0x00,   // )
 0x14, 0x08, 0x3E, 0x08, 0x14,   // *
 0x08, 0x08, 0x3E, 0x08, 0x08,   // +
 0x3E, 0x49, 0x45, 0x45, 0x38,   // ,
 0x08, 0x08, 0x08, 0x08, 0x08,   // -
 0x00, 0x60, 0x60, 0x00, 0x00,   // .
 0x20, 0x10, 0x08, 0x04, 0x02,   // /

 0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
 0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
 0x42, 0x61, 0x51, 0x49, 0x46,   // 2
 0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
 0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
 0x27, 0x45, 0x45, 0x45, 0x39,   // 5
 0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
 0x01, 0x71, 0x09, 0x05, 0x03,   // 7
 0x36, 0x49, 0x49, 0x49, 0x36,   // 8
 0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
 0x00, 0x36, 0x36, 0x00, 0x00,   // :
 0x4C, 0x30, 0x7C, 0x30, 0x4C,   // ;
 0x00, 0x08, 0x14, 0x22, 0x41,   // <
 0x6c, 0x10, 0x7c, 0x10, 0x6c,   // =
 0x41, 0x22, 0x14, 0x08, 0x00,   // >
 0x7f, 0x49, 0x49, 0x49, 0x33,   // ?

 0x32, 0x49, 0x59, 0x51, 0x3E,   // @
 0x1C, 0x22, 0x7F, 0x22, 0x1C,   // A
 0x7F, 0x10, 0x08, 0x04, 0x7F,   // B
 0x3E, 0x41, 0x41, 0x41, 0x22,   // C
 0x7F, 0x45, 0x45, 0x45, 0x3A,   // D
 0x61, 0x26, 0x18, 0x06, 0x01,   // E
 0x7C, 0x12, 0x11, 0x12, 0x7C,   // F
 0x7F, 0x01, 0x01, 0x01, 0x7F,   // G
 0x7F, 0x09, 0x09, 0x09, 0x06,   // H
 0x7F, 0x40, 0x7F, 0x40, 0x7F,   // I
 0x3E, 0x41, 0x41, 0x41, 0x3E,   // J
 0x40, 0x3F, 0x01, 0x01, 0x7F,   // K
 0x60, 0x3F, 0x21, 0x3F, 0x60,   // L
 0x7F, 0x48, 0x48, 0x30, 0x00,   // M
 0x03, 0x01, 0x7F, 0x01, 0x03,   // N
 0x3F, 0x20, 0x3F, 0x20, 0x7F,   // O

 0x21, 0x41, 0x49, 0x4D, 0x33,   // P
 0x7E, 0x20, 0x11, 0x08, 0x7E,   // Q
 0x7F, 0x08, 0x14, 0x22, 0x41,   // R
 0x7f, 0x48, 0x30, 0x00, 0x7f,   // S
 0x7F, 0x49, 0x49, 0x49, 0x41,   // T
 0x7F, 0x01, 0x01, 0x01, 0x03,   // U
 0x7F, 0x06, 0x08, 0x06, 0x7F,   // V
 0x3F, 0x20, 0x20, 0x3F, 0x60,   // W
 0x07, 0x08, 0x08, 0x08, 0x7F,   // X
 0x7F, 0x08, 0x08, 0x08, 0x7F,   // Y
 0x66, 0x19, 0x09, 0x09, 0x7F,   // Z
 0x44, 0x28, 0x10, 0x28, 0x44,   // [
 0x55, 0xAA, 0x55, 0xAA, 0x55,   // Backslash (Checker pattern)
 0x00, 0x45, 0x7C, 0x41, 0x00,   // ]
 0x04, 0x02, 0x01, 0x02, 0x04,   // ^
 0x40, 0x40, 0x40, 0x40, 0x40,   // _

 0x38, 0x54, 0x54, 0x44, 0x00,   // `
 0x18, 0x24, 0x7E, 0x24, 0x18,   // a
 0x7C, 0x20, 0x10, 0x7C, 0x00,   // b
 0x38, 0x44, 0x44, 0x44, 0x28,   // c
 0x7E, 0x4A, 0x4A, 0x34, 0x00,   // d
 0x4C, 0x90, 0x90, 0x90, 0x7C,   // e
 0x20, 0x54, 0x54, 0x54, 0x78,   // f
 0x7C, 0x04, 0x04, 0x7C, 0x00,   // g
 0xFC, 0x18, 0x24, 0x24, 0x18,   // h
 0x7C, 0x40, 0x7C, 0x40, 0x7C,   // i
 0x38, 0x44, 0x44, 0x44, 0x38,   // j
 0x40, 0x3C, 0x04, 0x04, 0x7C,   // k
 0x38, 0x45, 0x45, 0x49, 0x3E,   // l
 0x7C, 0x50, 0x70, 0x00, 0x00,   // m   
 0x04, 0x04, 0x7C, 0x04, 0x04,   // n
 0x3C, 0x20, 0x3C, 0x20, 0x7C,   // o

 0x44, 0x54, 0x54, 0x28, 0x00,   // p
 0x7C, 0x21, 0x11, 0x7C, 0x00,   // q
 0x7C, 0x10, 0x28, 0x44, 0x00,   // r
 0x7c, 0x50, 0x50, 0x20, 0x7c,   // s
 0x38, 0x54, 0x54, 0x54, 0x18,   // t
 0x7C, 0x04, 0x04, 0x0C, 0x00,   // u
 0x7C, 0x08, 0x10, 0x08, 0x7C,   // v
 0x3C, 0x20, 0x20, 0x3C, 0x60,   // w
 0x1C, 0x10, 0x10, 0x7C, 0x00,   // x
 0x7C, 0x10, 0x10, 0x7C, 0x00,   // y
 0x48, 0x34, 0x14, 0x7C, 0x00,   // z
 0x63, 0x14, 0x08, 0x14, 0x63,   // {
 0x00, 0x00, 0xFF, 0x00, 0x00,   // |
 0x00, 0x45, 0x7C, 0x45, 0x00,   // }
 0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
 0x08, 0x1C, 0x2A, 0x08, 0x08,// <-
 0x00, 0x06, 0x09, 0x09, 0x06,// ~ (Degrees)
 0x00, 0x00, 0x00, 0x7F, 0x41,// [
 0x5D, 0x5D, 0x5D, 0x5D, 0x41,// =
	0x41, 0x41, 0x41, 0x41, 0x41,// -
	0x7F, 0x00, 0x00, 0x00, 0x00,// ]
	0x7C, 0x7C, 0x7C, 0x7C, 0x7C // .
};

#endif
