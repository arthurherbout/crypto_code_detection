/////////////////////////////////////////////////////////////////////////
//
// Author: Mateusz Jurczyk (mjurczyk@google.com)
//
// Copyright 2019 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Description
// ===========
//
// A container class for managing code coverage traces registered during the
// program run time.

#ifndef CMPCOV_TRACES_H_
#define CMPCOV_TRACES_H_

#include <cstdint>
#include <cstdlib>
#include <memory>
#include <unordered_set>
#include <vector>

#include "modules.h"

class Traces {
 public:
  Traces() : modules_(std::make_unique<Modules>()) { }

  // Saves an execution trace based on a virtual address, and two arguments: a
  // 4-bit and a 12-bit one. The meaning of the arguments is up to the caller.
  void TrySaveTrace(size_t pc, int trace_arg1, int trace_arg2);

  // Returns the number of modules in which execution traces have been
  // registered.
  int GetModulesCount() const;

  // Returns the name of a specific module.
  std::string GetModuleName(int idx) const;

  // Returns a list of (module index, offset) pairs that have been found so far.
  void GetTracesList(std::vector<std::pair<int, size_t>> *traces_list) const;

 private:
  // A set of unique wide traces logged in the process so far.
  std::unordered_set<uint64_t> traces_set_;

  // A list of unique output traces in the form of:
  //
  // (module index, offset in module with extra information encoded)
  //
  // The module index is generated by the Modules class.
  std::vector<std::pair<int, size_t>> traces_list_;

  // An instance of a class keeping track of executable modules in the process.
  std::unique_ptr<Modules> modules_;

  // Internal methods for constructing wide traces, output traces, and
  // performing 64->32 bit mixing.
  static uint32_t Hash_64_32_Shift(uint64_t key);
  static uint64_t ConstructWideTrace(
      size_t offset, int trace_arg1, int trace_arg2);
  static size_t ConstructOutputTrace(
      size_t offset, int trace_arg1, int trace_arg2);
};

#endif  // CMPCOV_TRACES_H_
